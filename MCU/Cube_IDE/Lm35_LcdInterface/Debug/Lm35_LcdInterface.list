
Lm35_LcdInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800333c  0800333c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003344  08003344  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800334c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  080033bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080033bc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007741  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001904  00000000  00000000  000277e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  000290e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00029748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021814  00000000  00000000  00029cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d6a  00000000  00000000  0004b4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0881  00000000  00000000  0005424e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  00124b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080032dc 	.word	0x080032dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080032dc 	.word	0x080032dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <print>:


#include "main.h"

void print(unsigned char dat)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	///////0

	if((dat&0x1)==0x1)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <print+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4841      	ldr	r0, [pc, #260]	; (80006d4 <print+0x120>)
 80005d0:	f001 fc16 	bl	8001e00 <HAL_GPIO_WritePin>
 80005d4:	e005      	b.n	80005e2 <print+0x2e>

	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	483d      	ldr	r0, [pc, #244]	; (80006d4 <print+0x120>)
 80005de:	f001 fc0f 	bl	8001e00 <HAL_GPIO_WritePin>
	}
	////////1
	if((dat&0x2)==0x2)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <print+0x44>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2108      	movs	r1, #8
 80005f0:	4839      	ldr	r0, [pc, #228]	; (80006d8 <print+0x124>)
 80005f2:	f001 fc05 	bl	8001e00 <HAL_GPIO_WritePin>
 80005f6:	e004      	b.n	8000602 <print+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2108      	movs	r1, #8
 80005fc:	4836      	ldr	r0, [pc, #216]	; (80006d8 <print+0x124>)
 80005fe:	f001 fbff 	bl	8001e00 <HAL_GPIO_WritePin>
	}
	////////2
	if((dat&0x4)==0x4)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <print+0x64>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	4831      	ldr	r0, [pc, #196]	; (80006d8 <print+0x124>)
 8000612:	f001 fbf5 	bl	8001e00 <HAL_GPIO_WritePin>
 8000616:	e004      	b.n	8000622 <print+0x6e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	482e      	ldr	r0, [pc, #184]	; (80006d8 <print+0x124>)
 800061e:	f001 fbef 	bl	8001e00 <HAL_GPIO_WritePin>
		}
	////////3
	if((dat&0x8)==0x8)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b00      	cmp	r3, #0
 800062a:	d005      	beq.n	8000638 <print+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4829      	ldr	r0, [pc, #164]	; (80006d8 <print+0x124>)
 8000632:	f001 fbe5 	bl	8001e00 <HAL_GPIO_WritePin>
 8000636:	e004      	b.n	8000642 <print+0x8e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4826      	ldr	r0, [pc, #152]	; (80006d8 <print+0x124>)
 800063e:	f001 fbdf 	bl	8001e00 <HAL_GPIO_WritePin>
		}
	////////4
	if((dat&0x10)==0x10)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <print+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <print+0x124>)
 8000654:	f001 fbd4 	bl	8001e00 <HAL_GPIO_WritePin>
 8000658:	e005      	b.n	8000666 <print+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	481d      	ldr	r0, [pc, #116]	; (80006d8 <print+0x124>)
 8000662:	f001 fbcd 	bl	8001e00 <HAL_GPIO_WritePin>
		}
	////////5
	if((dat&0x20)==0x20)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <print+0xca>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <print+0x120>)
 8000678:	f001 fbc2 	bl	8001e00 <HAL_GPIO_WritePin>
 800067c:	e005      	b.n	800068a <print+0xd6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <print+0x120>)
 8000686:	f001 fbbb 	bl	8001e00 <HAL_GPIO_WritePin>
		}
	////////6
	if((dat&0x40)==0x40)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <print+0xee>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <print+0x120>)
 800069c:	f001 fbb0 	bl	8001e00 <HAL_GPIO_WritePin>
 80006a0:	e005      	b.n	80006ae <print+0xfa>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <print+0x120>)
 80006aa:	f001 fba9 	bl	8001e00 <HAL_GPIO_WritePin>
		}
	////////7
	if((dat&0x80)==0x80)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da05      	bge.n	80006c2 <print+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <print+0x128>)
 80006bc:	f001 fba0 	bl	8001e00 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
		}

}
 80006c0:	e004      	b.n	80006cc <print+0x118>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <print+0x128>)
 80006c8:	f001 fb9a 	bl	8001e00 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800

080006e0 <lcd_cmd>:
void lcd_cmd(unsigned char cmd)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	print(cmd);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff61 	bl	80005b4 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//REG SELECT PIN
 80006f2:	2200      	movs	r2, #0
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <lcd_cmd+0x48>)
 80006f8:	f001 fb82 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);//READ WRITE PIN
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <lcd_cmd+0x4c>)
 8000702:	f001 fb7d 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);// ENABLE PIN
 8000706:	2201      	movs	r2, #1
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <lcd_cmd+0x4c>)
 800070c:	f001 fb78 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f000 fb63 	bl	8000ddc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);// ENABLE PIN
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <lcd_cmd+0x4c>)
 800071c:	f001 fb70 	bl	8001e00 <HAL_GPIO_WritePin>

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020400 	.word	0x40020400
 800072c:	40020000 	.word	0x40020000

08000730 <lcd_data>:
void lcd_data(unsigned char mydat)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	print(mydat);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff39 	bl	80005b4 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <lcd_data+0x48>)
 8000748:	f001 fb5a 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <lcd_data+0x4c>)
 8000752:	f001 fb55 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <lcd_data+0x4c>)
 800075c:	f001 fb50 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fb3b 	bl	8000ddc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <lcd_data+0x4c>)
 800076c:	f001 fb48 	bl	8001e00 <HAL_GPIO_WritePin>



}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020400 	.word	0x40020400
 800077c:	40020000 	.word	0x40020000

08000780 <lcd_init>:
void lcd_init()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	lcd_cmd(0x38);
 8000784:	2038      	movs	r0, #56	; 0x38
 8000786:	f7ff ffab 	bl	80006e0 <lcd_cmd>
	lcd_cmd(0x06);
 800078a:	2006      	movs	r0, #6
 800078c:	f7ff ffa8 	bl	80006e0 <lcd_cmd>
	lcd_cmd(0x01);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffa5 	bl	80006e0 <lcd_cmd>
	lcd_cmd(0x0C);
 8000796:	200c      	movs	r0, #12
 8000798:	f7ff ffa2 	bl	80006e0 <lcd_cmd>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <lcd_display>:
void lcd_display(unsigned char *str,unsigned int length)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	for(int i=0;i<length;i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e009      	b.n	80007c4 <lcd_display+0x24>
	{
		lcd_data(str[i]);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb9 	bl	8000730 <lcd_data>
	for(int i=0;i<length;i++)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f1      	bhi.n	80007b0 <lcd_display+0x10>
	}
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <main>:
  */

uint32_t adcVal;

int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fa8b 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f839 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e6:	f000 f8e9 	bl	80009bc <MX_GPIO_Init>
  MX_ADC1_Init();
 80007ea:	f000 f895 	bl	8000918 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t message[10]={0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2228      	movs	r2, #40	; 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 f8fb 	bl	80029f0 <memset>
  /* USER CODE END 2 */
  lcd_init();
 80007fa:	f7ff ffc1 	bl	8000780 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <main+0x74>)
 8000800:	f000 fb54 	bl	8000eac <HAL_ADC_Start>
	 	  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK)
 8000804:	210a      	movs	r1, #10
 8000806:	4811      	ldr	r0, [pc, #68]	; (800084c <main+0x74>)
 8000808:	f000 fc55 	bl	80010b6 <HAL_ADC_PollForConversion>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d114      	bne.n	800083c <main+0x64>
	 	  {

	 		  adcVal=HAL_ADC_GetValue(&hadc1);
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <main+0x74>)
 8000814:	f000 fdea 	bl	80013ec <HAL_ADC_GetValue>
 8000818:	4603      	mov	r3, r0
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <main+0x78>)
 800081c:	6013      	str	r3, [r2, #0]
	 		  sprintf(message, "%d",adcVal);
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <main+0x78>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	463b      	mov	r3, r7
 8000824:	490b      	ldr	r1, [pc, #44]	; (8000854 <main+0x7c>)
 8000826:	4618      	mov	r0, r3
 8000828:	f002 f8ea 	bl	8002a00 <siprintf>
	 		  lcd_cmd(0x80);
 800082c:	2080      	movs	r0, #128	; 0x80
 800082e:	f7ff ff57 	bl	80006e0 <lcd_cmd>
	 		  lcd_display(message,4);
 8000832:	463b      	mov	r3, r7
 8000834:	2104      	movs	r1, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffb2 	bl	80007a0 <lcd_display>
	 	  }


    /* USER CODE END WHILE */
	 	  HAL_ADC_Stop(&hadc1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <main+0x74>)
 800083e:	f000 fc07 	bl	8001050 <HAL_ADC_Stop>
	 	  HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f000 faca 	bl	8000ddc <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000848:	e7d9      	b.n	80007fe <main+0x26>
 800084a:	bf00      	nop
 800084c:	2000008c 	.word	0x2000008c
 8000850:	200000d4 	.word	0x200000d4
 8000854:	080032f4 	.word	0x080032f4

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f8c2 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xb8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a22      	ldr	r2, [pc, #136]	; (8000910 <SystemClock_Config+0xb8>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <SystemClock_Config+0xb8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <SystemClock_Config+0xbc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <SystemClock_Config+0xbc>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <SystemClock_Config+0xbc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2310      	movs	r3, #16
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fdc7 	bl	8002460 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008d8:	f000 f8ee 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fa9b 	bl	8001e34 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000904:	f000 f8d8 	bl	8000ab8 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	; 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_ADC1_Init+0x98>)
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <MX_ADC1_Init+0x9c>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000944:	2201      	movs	r2, #1
 8000946:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_ADC1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_ADC1_Init+0xa0>)
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_ADC1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000964:	2201      	movs	r2, #1
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_ADC1_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000972:	2201      	movs	r2, #1
 8000974:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000978:	f000 fa54 	bl	8000e24 <HAL_ADC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f899 	bl	8000ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_ADC1_Init+0x98>)
 8000998:	f000 fd54 	bl	8001444 <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009a2:	f000 f889 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40012000 	.word	0x40012000
 80009b8:	0f000001 	.word	0x0f000001

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_GPIO_Init+0xf0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <MX_GPIO_Init+0xf0>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_GPIO_Init+0xf0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_GPIO_Init+0xf0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <MX_GPIO_Init+0xf0>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a26      	ldr	r2, [pc, #152]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_GPIO_Init+0xf0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a48:	f001 f9da 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a64:	f001 f838 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a84:	f001 f828 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_GPIO_Init+0xf4>)
 8000aa0:	f001 f81a 	bl	8001ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 ffa6 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_ADC_MspInit+0x8c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12f      	bne.n	8000b96 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_ADC_MspInit+0x90>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_ADC_MspInit+0x94>)
 8000b82:	f000 ffa9 	bl	8001ad8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2012      	movs	r0, #18
 8000b8c:	f000 ff6d 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b90:	2012      	movs	r0, #18
 8000b92:	f000 ff86 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8d0 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <ADC_IRQHandler+0x10>)
 8000c06:	f000 fae1 	bl	80011cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f001 feaa 	bl	800299c <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200000d8 	.word	0x200000d8
 8000c7c:	200000f0 	.word	0x200000f0

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f001 fe69 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fd7f 	bl	80007d8 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	0800334c 	.word	0x0800334c
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	200000f0 	.word	0x200000f0

08000cf4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <CAN1_RX0_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fe97 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff feca 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 feaf 	bl	8001abe <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 fe77 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200000dc 	.word	0x200000dc

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000dc 	.word	0x200000dc

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e033      	b.n	8000ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe66 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6a:	f023 0302 	bic.w	r3, r3, #2
 8000e6e:	f043 0202 	orr.w	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fc16 	bl	80016a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
 8000e92:	e001      	b.n	8000e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Start+0x1a>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e0b2      	b.n	800102c <HAL_ADC_Start+0x180>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d018      	beq.n	8000f0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <HAL_ADC_Start+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_ADC_Start+0x190>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9a      	lsrs	r2, r3, #18
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d17a      	bne.n	8001012 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f5a:	d106      	bne.n	8000f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f023 0206 	bic.w	r2, r3, #6
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <HAL_ADC_Start+0x194>)
 8000f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d12a      	bne.n	8000fe8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <HAL_ADC_Start+0x198>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d015      	beq.n	8000fc8 <HAL_ADC_Start+0x11c>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_ADC_Start+0x19c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d105      	bne.n	8000fb2 <HAL_ADC_Start+0x106>
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_ADC_Start+0x194>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a25      	ldr	r2, [pc, #148]	; (800104c <HAL_ADC_Start+0x1a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d136      	bne.n	800102a <HAL_ADC_Start+0x17e>
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HAL_ADC_Start+0x194>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d130      	bne.n	800102a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d129      	bne.n	800102a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	e020      	b.n	800102a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <HAL_ADC_Start+0x198>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11b      	bne.n	800102a <HAL_ADC_Start+0x17e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d114      	bne.n	800102a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	e00b      	b.n	800102a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f043 0210 	orr.w	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83
 8001040:	40012300 	.word	0x40012300
 8001044:	40012000 	.word	0x40012000
 8001048:	40012100 	.word	0x40012100
 800104c:	40012200 	.word	0x40012200

08001050 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Stop+0x16>
 8001062:	2302      	movs	r3, #2
 8001064:	e021      	b.n	80010aa <HAL_ADC_Stop+0x5a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d2:	d113      	bne.n	80010fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e2:	d10b      	bne.n	80010fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f043 0220 	orr.w	r2, r3, #32
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e063      	b.n	80011c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010fc:	f7ff fe62 	bl	8000dc4 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001102:	e021      	b.n	8001148 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110a:	d01d      	beq.n	8001148 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_ADC_PollForConversion+0x6c>
 8001112:	f7ff fe57 	bl	8000dc4 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d212      	bcs.n	8001148 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b02      	cmp	r3, #2
 800112e:	d00b      	beq.n	8001148 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f043 0204 	orr.w	r2, r3, #4
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e03d      	b.n	80011c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d1d6      	bne.n	8001104 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f06f 0212 	mvn.w	r2, #18
 800115e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d123      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11f      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d049      	beq.n	8001296 <HAL_ADC_IRQHandler+0xca>
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d046      	beq.n	8001296 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d12b      	bne.n	8001286 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001232:	2b00      	cmp	r3, #0
 8001234:	d127      	bne.n	8001286 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800124e:	2b00      	cmp	r3, #0
 8001250:	d119      	bne.n	8001286 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0220 	bic.w	r2, r2, #32
 8001260:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f8bd 	bl	8001406 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f06f 0212 	mvn.w	r2, #18
 8001294:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d057      	beq.n	800135c <HAL_ADC_IRQHandler+0x190>
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d054      	beq.n	800135c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d139      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d12b      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d124      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11d      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d119      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001326:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 faa7 	bl	80018a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 020c 	mvn.w	r2, #12
 800135a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d017      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x1d6>
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d014      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10d      	bne.n	80013a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f841 	bl	800141a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0201 	mvn.w	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d015      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x218>
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d012      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f06f 0220 	mvn.w	r2, #32
 80013d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f82a 	bl	800142e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f06f 0220 	mvn.w	r2, #32
 80013e2:	601a      	str	r2, [r3, #0]
  }
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1c>
 800145c:	2302      	movs	r3, #2
 800145e:	e113      	b.n	8001688 <HAL_ADC_ConfigChannel+0x244>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d925      	bls.n	80014bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	3b1e      	subs	r3, #30
 8001486:	2207      	movs	r2, #7
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43da      	mvns	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	400a      	ands	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68d9      	ldr	r1, [r3, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4403      	add	r3, r0
 80014ae:	3b1e      	subs	r3, #30
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	e022      	b.n	8001502 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	2207      	movs	r2, #7
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6919      	ldr	r1, [r3, #16]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4403      	add	r3, r0
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d824      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b05      	subs	r3, #5
 800151c:	221f      	movs	r2, #31
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b05      	subs	r3, #5
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
 8001552:	e04c      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d824      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b23      	subs	r3, #35	; 0x23
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43da      	mvns	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b23      	subs	r3, #35	; 0x23
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	e023      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3b41      	subs	r3, #65	; 0x41
 80015b8:	221f      	movs	r2, #31
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b41      	subs	r3, #65	; 0x41
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_ADC_ConfigChannel+0x250>)
 80015f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_ADC_ConfigChannel+0x254>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10f      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1d8>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b12      	cmp	r3, #18
 8001602:	d10b      	bne.n	800161c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_ADC_ConfigChannel+0x254>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x23a>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_ADC_ConfigChannel+0x258>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d003      	beq.n	8001638 <HAL_ADC_ConfigChannel+0x1f4>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b11      	cmp	r3, #17
 8001636:	d122      	bne.n	800167e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_ADC_ConfigChannel+0x258>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d111      	bne.n	800167e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_ADC_ConfigChannel+0x25c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x260>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40012300 	.word	0x40012300
 8001698:	40012000 	.word	0x40012000
 800169c:	10000012 	.word	0x10000012
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <ADC_Init+0x1f0>)
 80016b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	021a      	lsls	r2, r3, #8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6899      	ldr	r1, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <ADC_Init+0x1f4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e00f      	b.n	80017a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0202 	bic.w	r2, r2, #2
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7e1b      	ldrb	r3, [r3, #24]
 80017c0:	005a      	lsls	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01b      	beq.n	800180c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6859      	ldr	r1, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	3b01      	subs	r3, #1
 8001800:	035a      	lsls	r2, r3, #13
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	e007      	b.n	800181c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	3b01      	subs	r3, #1
 8001838:	051a      	lsls	r2, r3, #20
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800185e:	025a      	lsls	r2, r3, #9
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	029a      	lsls	r2, r3, #10
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40012300 	.word	0x40012300
 800189c:	0f000001 	.word	0x0f000001

080018a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff8e 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff29 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff3e 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff8e 	bl	80019a8 <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff31 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e165      	b.n	8001dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 8154 	bne.w	8001dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80ae 	beq.w	8001dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x308>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x216>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x212>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x314>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x318>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x20a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x31c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x206>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x202>
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d04:	4935      	ldr	r1, [pc, #212]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f ae96 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021400 	.word	0x40021400
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cc      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d90c      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d044      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d119      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e067      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff4e 	bl	8000dc4 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe ff4a 	bl	8000dc4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20c      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe feae 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	080032f8 	.word	0x080032f8
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b0ae      	sub	sp, #184	; 0xb8
 8002006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002026:	4bcb      	ldr	r3, [pc, #812]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b0c      	cmp	r3, #12
 8002030:	f200 8206 	bhi.w	8002440 <HAL_RCC_GetSysClockFreq+0x440>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	08002071 	.word	0x08002071
 8002040:	08002441 	.word	0x08002441
 8002044:	08002441 	.word	0x08002441
 8002048:	08002441 	.word	0x08002441
 800204c:	08002079 	.word	0x08002079
 8002050:	08002441 	.word	0x08002441
 8002054:	08002441 	.word	0x08002441
 8002058:	08002441 	.word	0x08002441
 800205c:	08002081 	.word	0x08002081
 8002060:	08002441 	.word	0x08002441
 8002064:	08002441 	.word	0x08002441
 8002068:	08002441 	.word	0x08002441
 800206c:	08002271 	.word	0x08002271
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4bb9      	ldr	r3, [pc, #740]	; (8002358 <HAL_RCC_GetSysClockFreq+0x358>)
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002076:	e1e7      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4bb8      	ldr	r3, [pc, #736]	; (800235c <HAL_RCC_GetSysClockFreq+0x35c>)
 800207a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800207e:	e1e3      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4bb4      	ldr	r3, [pc, #720]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208c:	4bb1      	ldr	r3, [pc, #708]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d071      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002098:	4bae      	ldr	r3, [pc, #696]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020be:	4622      	mov	r2, r4
 80020c0:	462b      	mov	r3, r5
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	0159      	lsls	r1, r3, #5
 80020cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d0:	0150      	lsls	r0, r2, #5
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4621      	mov	r1, r4
 80020d8:	1a51      	subs	r1, r2, r1
 80020da:	6439      	str	r1, [r7, #64]	; 0x40
 80020dc:	4629      	mov	r1, r5
 80020de:	eb63 0301 	sbc.w	r3, r3, r1
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020f0:	4649      	mov	r1, r9
 80020f2:	018b      	lsls	r3, r1, #6
 80020f4:	4641      	mov	r1, r8
 80020f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fa:	4641      	mov	r1, r8
 80020fc:	018a      	lsls	r2, r1, #6
 80020fe:	4641      	mov	r1, r8
 8002100:	1a51      	subs	r1, r2, r1
 8002102:	63b9      	str	r1, [r7, #56]	; 0x38
 8002104:	4649      	mov	r1, r9
 8002106:	eb63 0301 	sbc.w	r3, r3, r1
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002118:	4649      	mov	r1, r9
 800211a:	00cb      	lsls	r3, r1, #3
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002122:	4641      	mov	r1, r8
 8002124:	00ca      	lsls	r2, r1, #3
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	4603      	mov	r3, r0
 800212c:	4622      	mov	r2, r4
 800212e:	189b      	adds	r3, r3, r2
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	462b      	mov	r3, r5
 8002134:	460a      	mov	r2, r1
 8002136:	eb42 0303 	adc.w	r3, r2, r3
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002148:	4629      	mov	r1, r5
 800214a:	024b      	lsls	r3, r1, #9
 800214c:	4621      	mov	r1, r4
 800214e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002152:	4621      	mov	r1, r4
 8002154:	024a      	lsls	r2, r1, #9
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002168:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800216c:	f7fe f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4613      	mov	r3, r2
 8002176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800217a:	e067      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	2200      	movs	r2, #0
 8002184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002188:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800218c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002194:	67bb      	str	r3, [r7, #120]	; 0x78
 8002196:	2300      	movs	r3, #0
 8002198:	67fb      	str	r3, [r7, #124]	; 0x7c
 800219a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b0:	0150      	lsls	r0, r2, #5
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4621      	mov	r1, r4
 80021b8:	1a51      	subs	r1, r2, r1
 80021ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80021bc:	4629      	mov	r1, r5
 80021be:	eb63 0301 	sbc.w	r3, r3, r1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80021d0:	4649      	mov	r1, r9
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	4641      	mov	r1, r8
 80021d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021da:	4641      	mov	r1, r8
 80021dc:	018a      	lsls	r2, r1, #6
 80021de:	4641      	mov	r1, r8
 80021e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80021e4:	4649      	mov	r1, r9
 80021e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fe:	4692      	mov	sl, r2
 8002200:	469b      	mov	fp, r3
 8002202:	4623      	mov	r3, r4
 8002204:	eb1a 0303 	adds.w	r3, sl, r3
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	462b      	mov	r3, r5
 800220c:	eb4b 0303 	adc.w	r3, fp, r3
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800221e:	4629      	mov	r1, r5
 8002220:	028b      	lsls	r3, r1, #10
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002228:	4621      	mov	r1, r4
 800222a:	028a      	lsls	r2, r1, #10
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002234:	2200      	movs	r2, #0
 8002236:	673b      	str	r3, [r7, #112]	; 0x70
 8002238:	677a      	str	r2, [r7, #116]	; 0x74
 800223a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800223e:	f7fe f837 	bl	80002b0 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4613      	mov	r3, r2
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800225e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800226e:	e0eb      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d06b      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCC_GetSysClockFreq+0x354>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	66bb      	str	r3, [r7, #104]	; 0x68
 8002292:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	663b      	str	r3, [r7, #96]	; 0x60
 800229c:	2300      	movs	r3, #0
 800229e:	667b      	str	r3, [r7, #100]	; 0x64
 80022a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022a4:	4622      	mov	r2, r4
 80022a6:	462b      	mov	r3, r5
 80022a8:	f04f 0000 	mov.w	r0, #0
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	0159      	lsls	r1, r3, #5
 80022b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b6:	0150      	lsls	r0, r2, #5
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4621      	mov	r1, r4
 80022be:	1a51      	subs	r1, r2, r1
 80022c0:	61b9      	str	r1, [r7, #24]
 80022c2:	4629      	mov	r1, r5
 80022c4:	eb63 0301 	sbc.w	r3, r3, r1
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022d6:	4659      	mov	r1, fp
 80022d8:	018b      	lsls	r3, r1, #6
 80022da:	4651      	mov	r1, sl
 80022dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e0:	4651      	mov	r1, sl
 80022e2:	018a      	lsls	r2, r1, #6
 80022e4:	4651      	mov	r1, sl
 80022e6:	ebb2 0801 	subs.w	r8, r2, r1
 80022ea:	4659      	mov	r1, fp
 80022ec:	eb63 0901 	sbc.w	r9, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002300:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002304:	4690      	mov	r8, r2
 8002306:	4699      	mov	r9, r3
 8002308:	4623      	mov	r3, r4
 800230a:	eb18 0303 	adds.w	r3, r8, r3
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	462b      	mov	r3, r5
 8002312:	eb49 0303 	adc.w	r3, r9, r3
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002324:	4629      	mov	r1, r5
 8002326:	024b      	lsls	r3, r1, #9
 8002328:	4621      	mov	r1, r4
 800232a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800232e:	4621      	mov	r1, r4
 8002330:	024a      	lsls	r2, r1, #9
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800233a:	2200      	movs	r2, #0
 800233c:	65bb      	str	r3, [r7, #88]	; 0x58
 800233e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002352:	e065      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x420>
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCC_GetSysClockFreq+0x458>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	2200      	movs	r2, #0
 8002368:	4618      	mov	r0, r3
 800236a:	4611      	mov	r1, r2
 800236c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002370:	653b      	str	r3, [r7, #80]	; 0x50
 8002372:	2300      	movs	r3, #0
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
 8002376:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800237a:	4642      	mov	r2, r8
 800237c:	464b      	mov	r3, r9
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	0159      	lsls	r1, r3, #5
 8002388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238c:	0150      	lsls	r0, r2, #5
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4641      	mov	r1, r8
 8002394:	1a51      	subs	r1, r2, r1
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	4649      	mov	r1, r9
 800239a:	eb63 0301 	sbc.w	r3, r3, r1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023ac:	4659      	mov	r1, fp
 80023ae:	018b      	lsls	r3, r1, #6
 80023b0:	4651      	mov	r1, sl
 80023b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b6:	4651      	mov	r1, sl
 80023b8:	018a      	lsls	r2, r1, #6
 80023ba:	4651      	mov	r1, sl
 80023bc:	1a54      	subs	r4, r2, r1
 80023be:	4659      	mov	r1, fp
 80023c0:	eb63 0501 	sbc.w	r5, r3, r1
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	00eb      	lsls	r3, r5, #3
 80023ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d2:	00e2      	lsls	r2, r4, #3
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4643      	mov	r3, r8
 80023da:	18e3      	adds	r3, r4, r3
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	464b      	mov	r3, r9
 80023e0:	eb45 0303 	adc.w	r3, r5, r3
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023f2:	4629      	mov	r1, r5
 80023f4:	028b      	lsls	r3, r1, #10
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023fc:	4621      	mov	r1, r4
 80023fe:	028a      	lsls	r2, r1, #10
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002408:	2200      	movs	r2, #0
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
 800240c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800240e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002412:	f7fd ff4d 	bl	80002b0 <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4613      	mov	r3, r2
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCC_GetSysClockFreq+0x458>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0f1b      	lsrs	r3, r3, #28
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800242e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800243e:	e003      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002446:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800244c:	4618      	mov	r0, r3
 800244e:	37b8      	adds	r7, #184	; 0xb8
 8002450:	46bd      	mov	sp, r7
 8002452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400

08002460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e28d      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8083 	beq.w	8002586 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002480:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b04      	cmp	r3, #4
 800248a:	d019      	beq.n	80024c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800248c:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002494:	2b08      	cmp	r3, #8
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002498:	4b8e      	ldr	r3, [pc, #568]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b8b      	ldr	r3, [pc, #556]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d112      	bne.n	80024d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x124>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e25a      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x90>
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xcc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0xb4>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a72      	ldr	r2, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xcc>
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6b      	ldr	r2, [pc, #428]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fc46 	bl	8000dc4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fc42 	bl	8000dc4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e21f      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xdc>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fc32 	bl	8000dc4 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fc2e 	bl	8000dc4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e20b      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x104>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d06f      	beq.n	8002672 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002592:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b00      	cmp	r3, #0
 800259c:	d017      	beq.n	80025ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800259e:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x186>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1d3      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4937      	ldr	r1, [pc, #220]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x278>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fbdb 	bl	8000dc4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe fbd7 	bl	8000dc4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1b4      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4925      	ldr	r1, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x278>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fbba 	bl	8000dc4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe fbb6 	bl	8000dc4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e193      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fb9a 	bl	8000dc4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fb96 	bl	8000dc4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e173      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x274>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x234>
 80026b2:	e01b      	b.n	80026ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x27c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe fb83 	bl	8000dc4 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e00e      	b.n	80026e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe fb7f 	bl	8000dc4 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e15c      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470000 	.word	0x42470000
 80026dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b8a      	ldr	r3, [pc, #552]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ea      	bne.n	80026c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8097 	beq.w	8002828 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b83      	ldr	r3, [pc, #524]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a7e      	ldr	r2, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_OscConfig+0x4b0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x4b0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x4b0>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fb3f 	bl	8000dc4 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe fb3b 	bl	8000dc4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e118      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x4b0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x31e>
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x358>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x340>
 8002786:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a60      	ldr	r2, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x358>
 80027a0:	4b5a      	ldr	r3, [pc, #360]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a59      	ldr	r2, [pc, #356]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb00 	bl	8000dc4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fafc 	bl	8000dc4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0d7      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b4b      	ldr	r3, [pc, #300]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCC_OscConfig+0x368>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe faea 	bl	8000dc4 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe fae6 	bl	8000dc4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0c1      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80ad 	beq.w	800298c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d060      	beq.n	8002900 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d145      	bne.n	80028d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCC_OscConfig+0x4b4>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe faba 	bl	8000dc4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fab6 	bl	8000dc4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e093      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	071b      	lsls	r3, r3, #28
 800289e:	491b      	ldr	r1, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4b4>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fa8b 	bl	8000dc4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fa87 	bl	8000dc4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e064      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x452>
 80028d0:	e05c      	b.n	800298c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x4b4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fa74 	bl	8000dc4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fa70 	bl	8000dc4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04d      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x480>
 80028fe:	e045      	b.n	800298c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e040      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
 8002914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x538>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d030      	beq.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d129      	bne.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d122      	bne.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	4293      	cmp	r3, r2
 8002952:	d119      	bne.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d10f      	bne.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <__errno>:
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <__errno+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	; (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	; (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	; (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 fc8e 	bl	80032dc <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08003344 	.word	0x08003344
 80029e4:	08003344 	.word	0x08003344
 80029e8:	08003344 	.word	0x08003344
 80029ec:	08003348 	.word	0x08003348

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <siprintf>:
 8002a00:	b40e      	push	{r1, r2, r3}
 8002a02:	b500      	push	{lr}
 8002a04:	b09c      	sub	sp, #112	; 0x70
 8002a06:	ab1d      	add	r3, sp, #116	; 0x74
 8002a08:	9002      	str	r0, [sp, #8]
 8002a0a:	9006      	str	r0, [sp, #24]
 8002a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <siprintf+0x38>)
 8002a12:	9107      	str	r1, [sp, #28]
 8002a14:	9104      	str	r1, [sp, #16]
 8002a16:	4909      	ldr	r1, [pc, #36]	; (8002a3c <siprintf+0x3c>)
 8002a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a1c:	9105      	str	r1, [sp, #20]
 8002a1e:	6800      	ldr	r0, [r0, #0]
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	a902      	add	r1, sp, #8
 8002a24:	f000 f868 	bl	8002af8 <_svfiprintf_r>
 8002a28:	9b02      	ldr	r3, [sp, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	b01c      	add	sp, #112	; 0x70
 8002a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a34:	b003      	add	sp, #12
 8002a36:	4770      	bx	lr
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	ffff0208 	.word	0xffff0208

08002a40 <__ssputs_r>:
 8002a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	688e      	ldr	r6, [r1, #8]
 8002a46:	429e      	cmp	r6, r3
 8002a48:	4682      	mov	sl, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	461f      	mov	r7, r3
 8002a50:	d838      	bhi.n	8002ac4 <__ssputs_r+0x84>
 8002a52:	898a      	ldrh	r2, [r1, #12]
 8002a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a58:	d032      	beq.n	8002ac0 <__ssputs_r+0x80>
 8002a5a:	6825      	ldr	r5, [r4, #0]
 8002a5c:	6909      	ldr	r1, [r1, #16]
 8002a5e:	eba5 0901 	sub.w	r9, r5, r1
 8002a62:	6965      	ldr	r5, [r4, #20]
 8002a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	444b      	add	r3, r9
 8002a70:	106d      	asrs	r5, r5, #1
 8002a72:	429d      	cmp	r5, r3
 8002a74:	bf38      	it	cc
 8002a76:	461d      	movcc	r5, r3
 8002a78:	0553      	lsls	r3, r2, #21
 8002a7a:	d531      	bpl.n	8002ae0 <__ssputs_r+0xa0>
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f000 fb63 	bl	8003148 <_malloc_r>
 8002a82:	4606      	mov	r6, r0
 8002a84:	b950      	cbnz	r0, 8002a9c <__ssputs_r+0x5c>
 8002a86:	230c      	movs	r3, #12
 8002a88:	f8ca 3000 	str.w	r3, [sl]
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9c:	6921      	ldr	r1, [r4, #16]
 8002a9e:	464a      	mov	r2, r9
 8002aa0:	f000 fabe 	bl	8003020 <memcpy>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	6126      	str	r6, [r4, #16]
 8002ab2:	6165      	str	r5, [r4, #20]
 8002ab4:	444e      	add	r6, r9
 8002ab6:	eba5 0509 	sub.w	r5, r5, r9
 8002aba:	6026      	str	r6, [r4, #0]
 8002abc:	60a5      	str	r5, [r4, #8]
 8002abe:	463e      	mov	r6, r7
 8002ac0:	42be      	cmp	r6, r7
 8002ac2:	d900      	bls.n	8002ac6 <__ssputs_r+0x86>
 8002ac4:	463e      	mov	r6, r7
 8002ac6:	6820      	ldr	r0, [r4, #0]
 8002ac8:	4632      	mov	r2, r6
 8002aca:	4641      	mov	r1, r8
 8002acc:	f000 fab6 	bl	800303c <memmove>
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	1b9b      	subs	r3, r3, r6
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	4433      	add	r3, r6
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	2000      	movs	r0, #0
 8002ade:	e7db      	b.n	8002a98 <__ssputs_r+0x58>
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	f000 fba5 	bl	8003230 <_realloc_r>
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d1e1      	bne.n	8002ab0 <__ssputs_r+0x70>
 8002aec:	6921      	ldr	r1, [r4, #16]
 8002aee:	4650      	mov	r0, sl
 8002af0:	f000 fabe 	bl	8003070 <_free_r>
 8002af4:	e7c7      	b.n	8002a86 <__ssputs_r+0x46>
	...

08002af8 <_svfiprintf_r>:
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	4698      	mov	r8, r3
 8002afe:	898b      	ldrh	r3, [r1, #12]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	b09d      	sub	sp, #116	; 0x74
 8002b04:	4607      	mov	r7, r0
 8002b06:	460d      	mov	r5, r1
 8002b08:	4614      	mov	r4, r2
 8002b0a:	d50e      	bpl.n	8002b2a <_svfiprintf_r+0x32>
 8002b0c:	690b      	ldr	r3, [r1, #16]
 8002b0e:	b963      	cbnz	r3, 8002b2a <_svfiprintf_r+0x32>
 8002b10:	2140      	movs	r1, #64	; 0x40
 8002b12:	f000 fb19 	bl	8003148 <_malloc_r>
 8002b16:	6028      	str	r0, [r5, #0]
 8002b18:	6128      	str	r0, [r5, #16]
 8002b1a:	b920      	cbnz	r0, 8002b26 <_svfiprintf_r+0x2e>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	e0d1      	b.n	8002cca <_svfiprintf_r+0x1d2>
 8002b26:	2340      	movs	r3, #64	; 0x40
 8002b28:	616b      	str	r3, [r5, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2e:	2320      	movs	r3, #32
 8002b30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b38:	2330      	movs	r3, #48	; 0x30
 8002b3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ce4 <_svfiprintf_r+0x1ec>
 8002b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b42:	f04f 0901 	mov.w	r9, #1
 8002b46:	4623      	mov	r3, r4
 8002b48:	469a      	mov	sl, r3
 8002b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b4e:	b10a      	cbz	r2, 8002b54 <_svfiprintf_r+0x5c>
 8002b50:	2a25      	cmp	r2, #37	; 0x25
 8002b52:	d1f9      	bne.n	8002b48 <_svfiprintf_r+0x50>
 8002b54:	ebba 0b04 	subs.w	fp, sl, r4
 8002b58:	d00b      	beq.n	8002b72 <_svfiprintf_r+0x7a>
 8002b5a:	465b      	mov	r3, fp
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4638      	mov	r0, r7
 8002b62:	f7ff ff6d 	bl	8002a40 <__ssputs_r>
 8002b66:	3001      	adds	r0, #1
 8002b68:	f000 80aa 	beq.w	8002cc0 <_svfiprintf_r+0x1c8>
 8002b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b6e:	445a      	add	r2, fp
 8002b70:	9209      	str	r2, [sp, #36]	; 0x24
 8002b72:	f89a 3000 	ldrb.w	r3, [sl]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80a2 	beq.w	8002cc0 <_svfiprintf_r+0x1c8>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b86:	f10a 0a01 	add.w	sl, sl, #1
 8002b8a:	9304      	str	r3, [sp, #16]
 8002b8c:	9307      	str	r3, [sp, #28]
 8002b8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b92:	931a      	str	r3, [sp, #104]	; 0x68
 8002b94:	4654      	mov	r4, sl
 8002b96:	2205      	movs	r2, #5
 8002b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9c:	4851      	ldr	r0, [pc, #324]	; (8002ce4 <_svfiprintf_r+0x1ec>)
 8002b9e:	f7fd fb37 	bl	8000210 <memchr>
 8002ba2:	9a04      	ldr	r2, [sp, #16]
 8002ba4:	b9d8      	cbnz	r0, 8002bde <_svfiprintf_r+0xe6>
 8002ba6:	06d0      	lsls	r0, r2, #27
 8002ba8:	bf44      	itt	mi
 8002baa:	2320      	movmi	r3, #32
 8002bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bb0:	0711      	lsls	r1, r2, #28
 8002bb2:	bf44      	itt	mi
 8002bb4:	232b      	movmi	r3, #43	; 0x2b
 8002bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bba:	f89a 3000 	ldrb.w	r3, [sl]
 8002bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc0:	d015      	beq.n	8002bee <_svfiprintf_r+0xf6>
 8002bc2:	9a07      	ldr	r2, [sp, #28]
 8002bc4:	4654      	mov	r4, sl
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f04f 0c0a 	mov.w	ip, #10
 8002bcc:	4621      	mov	r1, r4
 8002bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd2:	3b30      	subs	r3, #48	; 0x30
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d94e      	bls.n	8002c76 <_svfiprintf_r+0x17e>
 8002bd8:	b1b0      	cbz	r0, 8002c08 <_svfiprintf_r+0x110>
 8002bda:	9207      	str	r2, [sp, #28]
 8002bdc:	e014      	b.n	8002c08 <_svfiprintf_r+0x110>
 8002bde:	eba0 0308 	sub.w	r3, r0, r8
 8002be2:	fa09 f303 	lsl.w	r3, r9, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	9304      	str	r3, [sp, #16]
 8002bea:	46a2      	mov	sl, r4
 8002bec:	e7d2      	b.n	8002b94 <_svfiprintf_r+0x9c>
 8002bee:	9b03      	ldr	r3, [sp, #12]
 8002bf0:	1d19      	adds	r1, r3, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	9103      	str	r1, [sp, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bfbb      	ittet	lt
 8002bfa:	425b      	neglt	r3, r3
 8002bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8002c00:	9307      	strge	r3, [sp, #28]
 8002c02:	9307      	strlt	r3, [sp, #28]
 8002c04:	bfb8      	it	lt
 8002c06:	9204      	strlt	r2, [sp, #16]
 8002c08:	7823      	ldrb	r3, [r4, #0]
 8002c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c0c:	d10c      	bne.n	8002c28 <_svfiprintf_r+0x130>
 8002c0e:	7863      	ldrb	r3, [r4, #1]
 8002c10:	2b2a      	cmp	r3, #42	; 0x2a
 8002c12:	d135      	bne.n	8002c80 <_svfiprintf_r+0x188>
 8002c14:	9b03      	ldr	r3, [sp, #12]
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	9203      	str	r2, [sp, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bfb8      	it	lt
 8002c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c24:	3402      	adds	r4, #2
 8002c26:	9305      	str	r3, [sp, #20]
 8002c28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cf4 <_svfiprintf_r+0x1fc>
 8002c2c:	7821      	ldrb	r1, [r4, #0]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	4650      	mov	r0, sl
 8002c32:	f7fd faed 	bl	8000210 <memchr>
 8002c36:	b140      	cbz	r0, 8002c4a <_svfiprintf_r+0x152>
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	eba0 000a 	sub.w	r0, r0, sl
 8002c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002c42:	9b04      	ldr	r3, [sp, #16]
 8002c44:	4303      	orrs	r3, r0
 8002c46:	3401      	adds	r4, #1
 8002c48:	9304      	str	r3, [sp, #16]
 8002c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c4e:	4826      	ldr	r0, [pc, #152]	; (8002ce8 <_svfiprintf_r+0x1f0>)
 8002c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c54:	2206      	movs	r2, #6
 8002c56:	f7fd fadb 	bl	8000210 <memchr>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d038      	beq.n	8002cd0 <_svfiprintf_r+0x1d8>
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <_svfiprintf_r+0x1f4>)
 8002c60:	bb1b      	cbnz	r3, 8002caa <_svfiprintf_r+0x1b2>
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	3307      	adds	r3, #7
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c70:	4433      	add	r3, r6
 8002c72:	9309      	str	r3, [sp, #36]	; 0x24
 8002c74:	e767      	b.n	8002b46 <_svfiprintf_r+0x4e>
 8002c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e7a5      	b.n	8002bcc <_svfiprintf_r+0xd4>
 8002c80:	2300      	movs	r3, #0
 8002c82:	3401      	adds	r4, #1
 8002c84:	9305      	str	r3, [sp, #20]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 0c0a 	mov.w	ip, #10
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c92:	3a30      	subs	r2, #48	; 0x30
 8002c94:	2a09      	cmp	r2, #9
 8002c96:	d903      	bls.n	8002ca0 <_svfiprintf_r+0x1a8>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0c5      	beq.n	8002c28 <_svfiprintf_r+0x130>
 8002c9c:	9105      	str	r1, [sp, #20]
 8002c9e:	e7c3      	b.n	8002c28 <_svfiprintf_r+0x130>
 8002ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e7f0      	b.n	8002c8c <_svfiprintf_r+0x194>
 8002caa:	ab03      	add	r3, sp, #12
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	462a      	mov	r2, r5
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <_svfiprintf_r+0x1f8>)
 8002cb2:	a904      	add	r1, sp, #16
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f3af 8000 	nop.w
 8002cba:	1c42      	adds	r2, r0, #1
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	d1d6      	bne.n	8002c6e <_svfiprintf_r+0x176>
 8002cc0:	89ab      	ldrh	r3, [r5, #12]
 8002cc2:	065b      	lsls	r3, r3, #25
 8002cc4:	f53f af2c 	bmi.w	8002b20 <_svfiprintf_r+0x28>
 8002cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cca:	b01d      	add	sp, #116	; 0x74
 8002ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd0:	ab03      	add	r3, sp, #12
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	462a      	mov	r2, r5
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <_svfiprintf_r+0x1f8>)
 8002cd8:	a904      	add	r1, sp, #16
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 f87a 	bl	8002dd4 <_printf_i>
 8002ce0:	e7eb      	b.n	8002cba <_svfiprintf_r+0x1c2>
 8002ce2:	bf00      	nop
 8002ce4:	08003308 	.word	0x08003308
 8002ce8:	08003312 	.word	0x08003312
 8002cec:	00000000 	.word	0x00000000
 8002cf0:	08002a41 	.word	0x08002a41
 8002cf4:	0800330e 	.word	0x0800330e

08002cf8 <_printf_common>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	4616      	mov	r6, r2
 8002cfe:	4699      	mov	r9, r3
 8002d00:	688a      	ldr	r2, [r1, #8]
 8002d02:	690b      	ldr	r3, [r1, #16]
 8002d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bfb8      	it	lt
 8002d0c:	4613      	movlt	r3, r2
 8002d0e:	6033      	str	r3, [r6, #0]
 8002d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d14:	4607      	mov	r7, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	b10a      	cbz	r2, 8002d1e <_printf_common+0x26>
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	0699      	lsls	r1, r3, #26
 8002d22:	bf42      	ittt	mi
 8002d24:	6833      	ldrmi	r3, [r6, #0]
 8002d26:	3302      	addmi	r3, #2
 8002d28:	6033      	strmi	r3, [r6, #0]
 8002d2a:	6825      	ldr	r5, [r4, #0]
 8002d2c:	f015 0506 	ands.w	r5, r5, #6
 8002d30:	d106      	bne.n	8002d40 <_printf_common+0x48>
 8002d32:	f104 0a19 	add.w	sl, r4, #25
 8002d36:	68e3      	ldr	r3, [r4, #12]
 8002d38:	6832      	ldr	r2, [r6, #0]
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	dc26      	bgt.n	8002d8e <_printf_common+0x96>
 8002d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d44:	1e13      	subs	r3, r2, #0
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	bf18      	it	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	0692      	lsls	r2, r2, #26
 8002d4e:	d42b      	bmi.n	8002da8 <_printf_common+0xb0>
 8002d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d54:	4649      	mov	r1, r9
 8002d56:	4638      	mov	r0, r7
 8002d58:	47c0      	blx	r8
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d01e      	beq.n	8002d9c <_printf_common+0xa4>
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	68e5      	ldr	r5, [r4, #12]
 8002d62:	6832      	ldr	r2, [r6, #0]
 8002d64:	f003 0306 	and.w	r3, r3, #6
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	bf08      	it	eq
 8002d6c:	1aad      	subeq	r5, r5, r2
 8002d6e:	68a3      	ldr	r3, [r4, #8]
 8002d70:	6922      	ldr	r2, [r4, #16]
 8002d72:	bf0c      	ite	eq
 8002d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d78:	2500      	movne	r5, #0
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	bfc4      	itt	gt
 8002d7e:	1a9b      	subgt	r3, r3, r2
 8002d80:	18ed      	addgt	r5, r5, r3
 8002d82:	2600      	movs	r6, #0
 8002d84:	341a      	adds	r4, #26
 8002d86:	42b5      	cmp	r5, r6
 8002d88:	d11a      	bne.n	8002dc0 <_printf_common+0xc8>
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	e008      	b.n	8002da0 <_printf_common+0xa8>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4652      	mov	r2, sl
 8002d92:	4649      	mov	r1, r9
 8002d94:	4638      	mov	r0, r7
 8002d96:	47c0      	blx	r8
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d103      	bne.n	8002da4 <_printf_common+0xac>
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	3501      	adds	r5, #1
 8002da6:	e7c6      	b.n	8002d36 <_printf_common+0x3e>
 8002da8:	18e1      	adds	r1, r4, r3
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	2030      	movs	r0, #48	; 0x30
 8002dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002db2:	4422      	add	r2, r4
 8002db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	e7c7      	b.n	8002d50 <_printf_common+0x58>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	47c0      	blx	r8
 8002dca:	3001      	adds	r0, #1
 8002dcc:	d0e6      	beq.n	8002d9c <_printf_common+0xa4>
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7d9      	b.n	8002d86 <_printf_common+0x8e>
	...

08002dd4 <_printf_i>:
 8002dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	7e0f      	ldrb	r7, [r1, #24]
 8002dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ddc:	2f78      	cmp	r7, #120	; 0x78
 8002dde:	4691      	mov	r9, r2
 8002de0:	4680      	mov	r8, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	469a      	mov	sl, r3
 8002de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dea:	d807      	bhi.n	8002dfc <_printf_i+0x28>
 8002dec:	2f62      	cmp	r7, #98	; 0x62
 8002dee:	d80a      	bhi.n	8002e06 <_printf_i+0x32>
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	f000 80d8 	beq.w	8002fa6 <_printf_i+0x1d2>
 8002df6:	2f58      	cmp	r7, #88	; 0x58
 8002df8:	f000 80a3 	beq.w	8002f42 <_printf_i+0x16e>
 8002dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e04:	e03a      	b.n	8002e7c <_printf_i+0xa8>
 8002e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e0a:	2b15      	cmp	r3, #21
 8002e0c:	d8f6      	bhi.n	8002dfc <_printf_i+0x28>
 8002e0e:	a101      	add	r1, pc, #4	; (adr r1, 8002e14 <_printf_i+0x40>)
 8002e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e81 	.word	0x08002e81
 8002e1c:	08002dfd 	.word	0x08002dfd
 8002e20:	08002dfd 	.word	0x08002dfd
 8002e24:	08002dfd 	.word	0x08002dfd
 8002e28:	08002dfd 	.word	0x08002dfd
 8002e2c:	08002e81 	.word	0x08002e81
 8002e30:	08002dfd 	.word	0x08002dfd
 8002e34:	08002dfd 	.word	0x08002dfd
 8002e38:	08002dfd 	.word	0x08002dfd
 8002e3c:	08002dfd 	.word	0x08002dfd
 8002e40:	08002f8d 	.word	0x08002f8d
 8002e44:	08002eb1 	.word	0x08002eb1
 8002e48:	08002f6f 	.word	0x08002f6f
 8002e4c:	08002dfd 	.word	0x08002dfd
 8002e50:	08002dfd 	.word	0x08002dfd
 8002e54:	08002faf 	.word	0x08002faf
 8002e58:	08002dfd 	.word	0x08002dfd
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002dfd 	.word	0x08002dfd
 8002e64:	08002dfd 	.word	0x08002dfd
 8002e68:	08002f77 	.word	0x08002f77
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	1d1a      	adds	r2, r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	602a      	str	r2, [r5, #0]
 8002e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0a3      	b.n	8002fc8 <_printf_i+0x1f4>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	6829      	ldr	r1, [r5, #0]
 8002e84:	0606      	lsls	r6, r0, #24
 8002e86:	f101 0304 	add.w	r3, r1, #4
 8002e8a:	d50a      	bpl.n	8002ea2 <_printf_i+0xce>
 8002e8c:	680e      	ldr	r6, [r1, #0]
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	2e00      	cmp	r6, #0
 8002e92:	da03      	bge.n	8002e9c <_printf_i+0xc8>
 8002e94:	232d      	movs	r3, #45	; 0x2d
 8002e96:	4276      	negs	r6, r6
 8002e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e9c:	485e      	ldr	r0, [pc, #376]	; (8003018 <_printf_i+0x244>)
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	e019      	b.n	8002ed6 <_printf_i+0x102>
 8002ea2:	680e      	ldr	r6, [r1, #0]
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002eaa:	bf18      	it	ne
 8002eac:	b236      	sxthne	r6, r6
 8002eae:	e7ef      	b.n	8002e90 <_printf_i+0xbc>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	1d19      	adds	r1, r3, #4
 8002eb6:	6029      	str	r1, [r5, #0]
 8002eb8:	0601      	lsls	r1, r0, #24
 8002eba:	d501      	bpl.n	8002ec0 <_printf_i+0xec>
 8002ebc:	681e      	ldr	r6, [r3, #0]
 8002ebe:	e002      	b.n	8002ec6 <_printf_i+0xf2>
 8002ec0:	0646      	lsls	r6, r0, #25
 8002ec2:	d5fb      	bpl.n	8002ebc <_printf_i+0xe8>
 8002ec4:	881e      	ldrh	r6, [r3, #0]
 8002ec6:	4854      	ldr	r0, [pc, #336]	; (8003018 <_printf_i+0x244>)
 8002ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8002eca:	bf0c      	ite	eq
 8002ecc:	2308      	moveq	r3, #8
 8002ece:	230a      	movne	r3, #10
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ed6:	6865      	ldr	r5, [r4, #4]
 8002ed8:	60a5      	str	r5, [r4, #8]
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	bfa2      	ittt	ge
 8002ede:	6821      	ldrge	r1, [r4, #0]
 8002ee0:	f021 0104 	bicge.w	r1, r1, #4
 8002ee4:	6021      	strge	r1, [r4, #0]
 8002ee6:	b90e      	cbnz	r6, 8002eec <_printf_i+0x118>
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	d04d      	beq.n	8002f88 <_printf_i+0x1b4>
 8002eec:	4615      	mov	r5, r2
 8002eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8002ef6:	5dc7      	ldrb	r7, [r0, r7]
 8002ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002efc:	4637      	mov	r7, r6
 8002efe:	42bb      	cmp	r3, r7
 8002f00:	460e      	mov	r6, r1
 8002f02:	d9f4      	bls.n	8002eee <_printf_i+0x11a>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d10b      	bne.n	8002f20 <_printf_i+0x14c>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	07de      	lsls	r6, r3, #31
 8002f0c:	d508      	bpl.n	8002f20 <_printf_i+0x14c>
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	6861      	ldr	r1, [r4, #4]
 8002f12:	4299      	cmp	r1, r3
 8002f14:	bfde      	ittt	le
 8002f16:	2330      	movle	r3, #48	; 0x30
 8002f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f20:	1b52      	subs	r2, r2, r5
 8002f22:	6122      	str	r2, [r4, #16]
 8002f24:	f8cd a000 	str.w	sl, [sp]
 8002f28:	464b      	mov	r3, r9
 8002f2a:	aa03      	add	r2, sp, #12
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4640      	mov	r0, r8
 8002f30:	f7ff fee2 	bl	8002cf8 <_printf_common>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d14c      	bne.n	8002fd2 <_printf_i+0x1fe>
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	b004      	add	sp, #16
 8002f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f42:	4835      	ldr	r0, [pc, #212]	; (8003018 <_printf_i+0x244>)
 8002f44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f48:	6829      	ldr	r1, [r5, #0]
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f50:	6029      	str	r1, [r5, #0]
 8002f52:	061d      	lsls	r5, r3, #24
 8002f54:	d514      	bpl.n	8002f80 <_printf_i+0x1ac>
 8002f56:	07df      	lsls	r7, r3, #31
 8002f58:	bf44      	itt	mi
 8002f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8002f5e:	6023      	strmi	r3, [r4, #0]
 8002f60:	b91e      	cbnz	r6, 8002f6a <_printf_i+0x196>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f023 0320 	bic.w	r3, r3, #32
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	e7b0      	b.n	8002ed0 <_printf_i+0xfc>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f043 0320 	orr.w	r3, r3, #32
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	2378      	movs	r3, #120	; 0x78
 8002f78:	4828      	ldr	r0, [pc, #160]	; (800301c <_printf_i+0x248>)
 8002f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f7e:	e7e3      	b.n	8002f48 <_printf_i+0x174>
 8002f80:	0659      	lsls	r1, r3, #25
 8002f82:	bf48      	it	mi
 8002f84:	b2b6      	uxthmi	r6, r6
 8002f86:	e7e6      	b.n	8002f56 <_printf_i+0x182>
 8002f88:	4615      	mov	r5, r2
 8002f8a:	e7bb      	b.n	8002f04 <_printf_i+0x130>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	6826      	ldr	r6, [r4, #0]
 8002f90:	6961      	ldr	r1, [r4, #20]
 8002f92:	1d18      	adds	r0, r3, #4
 8002f94:	6028      	str	r0, [r5, #0]
 8002f96:	0635      	lsls	r5, r6, #24
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_i+0x1cc>
 8002f9c:	6019      	str	r1, [r3, #0]
 8002f9e:	e002      	b.n	8002fa6 <_printf_i+0x1d2>
 8002fa0:	0670      	lsls	r0, r6, #25
 8002fa2:	d5fb      	bpl.n	8002f9c <_printf_i+0x1c8>
 8002fa4:	8019      	strh	r1, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6123      	str	r3, [r4, #16]
 8002faa:	4615      	mov	r5, r2
 8002fac:	e7ba      	b.n	8002f24 <_printf_i+0x150>
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	602a      	str	r2, [r5, #0]
 8002fb4:	681d      	ldr	r5, [r3, #0]
 8002fb6:	6862      	ldr	r2, [r4, #4]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f7fd f928 	bl	8000210 <memchr>
 8002fc0:	b108      	cbz	r0, 8002fc6 <_printf_i+0x1f2>
 8002fc2:	1b40      	subs	r0, r0, r5
 8002fc4:	6060      	str	r0, [r4, #4]
 8002fc6:	6863      	ldr	r3, [r4, #4]
 8002fc8:	6123      	str	r3, [r4, #16]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd0:	e7a8      	b.n	8002f24 <_printf_i+0x150>
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	4640      	mov	r0, r8
 8002fda:	47d0      	blx	sl
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d0ab      	beq.n	8002f38 <_printf_i+0x164>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	079b      	lsls	r3, r3, #30
 8002fe4:	d413      	bmi.n	800300e <_printf_i+0x23a>
 8002fe6:	68e0      	ldr	r0, [r4, #12]
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	4298      	cmp	r0, r3
 8002fec:	bfb8      	it	lt
 8002fee:	4618      	movlt	r0, r3
 8002ff0:	e7a4      	b.n	8002f3c <_printf_i+0x168>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	47d0      	blx	sl
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d09b      	beq.n	8002f38 <_printf_i+0x164>
 8003000:	3501      	adds	r5, #1
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	9903      	ldr	r1, [sp, #12]
 8003006:	1a5b      	subs	r3, r3, r1
 8003008:	42ab      	cmp	r3, r5
 800300a:	dcf2      	bgt.n	8002ff2 <_printf_i+0x21e>
 800300c:	e7eb      	b.n	8002fe6 <_printf_i+0x212>
 800300e:	2500      	movs	r5, #0
 8003010:	f104 0619 	add.w	r6, r4, #25
 8003014:	e7f5      	b.n	8003002 <_printf_i+0x22e>
 8003016:	bf00      	nop
 8003018:	08003319 	.word	0x08003319
 800301c:	0800332a 	.word	0x0800332a

08003020 <memcpy>:
 8003020:	440a      	add	r2, r1
 8003022:	4291      	cmp	r1, r2
 8003024:	f100 33ff 	add.w	r3, r0, #4294967295
 8003028:	d100      	bne.n	800302c <memcpy+0xc>
 800302a:	4770      	bx	lr
 800302c:	b510      	push	{r4, lr}
 800302e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003036:	4291      	cmp	r1, r2
 8003038:	d1f9      	bne.n	800302e <memcpy+0xe>
 800303a:	bd10      	pop	{r4, pc}

0800303c <memmove>:
 800303c:	4288      	cmp	r0, r1
 800303e:	b510      	push	{r4, lr}
 8003040:	eb01 0402 	add.w	r4, r1, r2
 8003044:	d902      	bls.n	800304c <memmove+0x10>
 8003046:	4284      	cmp	r4, r0
 8003048:	4623      	mov	r3, r4
 800304a:	d807      	bhi.n	800305c <memmove+0x20>
 800304c:	1e43      	subs	r3, r0, #1
 800304e:	42a1      	cmp	r1, r4
 8003050:	d008      	beq.n	8003064 <memmove+0x28>
 8003052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800305a:	e7f8      	b.n	800304e <memmove+0x12>
 800305c:	4402      	add	r2, r0
 800305e:	4601      	mov	r1, r0
 8003060:	428a      	cmp	r2, r1
 8003062:	d100      	bne.n	8003066 <memmove+0x2a>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800306a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800306e:	e7f7      	b.n	8003060 <memmove+0x24>

08003070 <_free_r>:
 8003070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003072:	2900      	cmp	r1, #0
 8003074:	d044      	beq.n	8003100 <_free_r+0x90>
 8003076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800307a:	9001      	str	r0, [sp, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f1a1 0404 	sub.w	r4, r1, #4
 8003082:	bfb8      	it	lt
 8003084:	18e4      	addlt	r4, r4, r3
 8003086:	f000 f913 	bl	80032b0 <__malloc_lock>
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <_free_r+0x94>)
 800308c:	9801      	ldr	r0, [sp, #4]
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	b933      	cbnz	r3, 80030a0 <_free_r+0x30>
 8003092:	6063      	str	r3, [r4, #4]
 8003094:	6014      	str	r4, [r2, #0]
 8003096:	b003      	add	sp, #12
 8003098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800309c:	f000 b90e 	b.w	80032bc <__malloc_unlock>
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	d908      	bls.n	80030b6 <_free_r+0x46>
 80030a4:	6825      	ldr	r5, [r4, #0]
 80030a6:	1961      	adds	r1, r4, r5
 80030a8:	428b      	cmp	r3, r1
 80030aa:	bf01      	itttt	eq
 80030ac:	6819      	ldreq	r1, [r3, #0]
 80030ae:	685b      	ldreq	r3, [r3, #4]
 80030b0:	1949      	addeq	r1, r1, r5
 80030b2:	6021      	streq	r1, [r4, #0]
 80030b4:	e7ed      	b.n	8003092 <_free_r+0x22>
 80030b6:	461a      	mov	r2, r3
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b10b      	cbz	r3, 80030c0 <_free_r+0x50>
 80030bc:	42a3      	cmp	r3, r4
 80030be:	d9fa      	bls.n	80030b6 <_free_r+0x46>
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	1855      	adds	r5, r2, r1
 80030c4:	42a5      	cmp	r5, r4
 80030c6:	d10b      	bne.n	80030e0 <_free_r+0x70>
 80030c8:	6824      	ldr	r4, [r4, #0]
 80030ca:	4421      	add	r1, r4
 80030cc:	1854      	adds	r4, r2, r1
 80030ce:	42a3      	cmp	r3, r4
 80030d0:	6011      	str	r1, [r2, #0]
 80030d2:	d1e0      	bne.n	8003096 <_free_r+0x26>
 80030d4:	681c      	ldr	r4, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	6053      	str	r3, [r2, #4]
 80030da:	4421      	add	r1, r4
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	e7da      	b.n	8003096 <_free_r+0x26>
 80030e0:	d902      	bls.n	80030e8 <_free_r+0x78>
 80030e2:	230c      	movs	r3, #12
 80030e4:	6003      	str	r3, [r0, #0]
 80030e6:	e7d6      	b.n	8003096 <_free_r+0x26>
 80030e8:	6825      	ldr	r5, [r4, #0]
 80030ea:	1961      	adds	r1, r4, r5
 80030ec:	428b      	cmp	r3, r1
 80030ee:	bf04      	itt	eq
 80030f0:	6819      	ldreq	r1, [r3, #0]
 80030f2:	685b      	ldreq	r3, [r3, #4]
 80030f4:	6063      	str	r3, [r4, #4]
 80030f6:	bf04      	itt	eq
 80030f8:	1949      	addeq	r1, r1, r5
 80030fa:	6021      	streq	r1, [r4, #0]
 80030fc:	6054      	str	r4, [r2, #4]
 80030fe:	e7ca      	b.n	8003096 <_free_r+0x26>
 8003100:	b003      	add	sp, #12
 8003102:	bd30      	pop	{r4, r5, pc}
 8003104:	200000e0 	.word	0x200000e0

08003108 <sbrk_aligned>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4e0e      	ldr	r6, [pc, #56]	; (8003144 <sbrk_aligned+0x3c>)
 800310c:	460c      	mov	r4, r1
 800310e:	6831      	ldr	r1, [r6, #0]
 8003110:	4605      	mov	r5, r0
 8003112:	b911      	cbnz	r1, 800311a <sbrk_aligned+0x12>
 8003114:	f000 f8bc 	bl	8003290 <_sbrk_r>
 8003118:	6030      	str	r0, [r6, #0]
 800311a:	4621      	mov	r1, r4
 800311c:	4628      	mov	r0, r5
 800311e:	f000 f8b7 	bl	8003290 <_sbrk_r>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	d00a      	beq.n	800313c <sbrk_aligned+0x34>
 8003126:	1cc4      	adds	r4, r0, #3
 8003128:	f024 0403 	bic.w	r4, r4, #3
 800312c:	42a0      	cmp	r0, r4
 800312e:	d007      	beq.n	8003140 <sbrk_aligned+0x38>
 8003130:	1a21      	subs	r1, r4, r0
 8003132:	4628      	mov	r0, r5
 8003134:	f000 f8ac 	bl	8003290 <_sbrk_r>
 8003138:	3001      	adds	r0, #1
 800313a:	d101      	bne.n	8003140 <sbrk_aligned+0x38>
 800313c:	f04f 34ff 	mov.w	r4, #4294967295
 8003140:	4620      	mov	r0, r4
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	200000e4 	.word	0x200000e4

08003148 <_malloc_r>:
 8003148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800314c:	1ccd      	adds	r5, r1, #3
 800314e:	f025 0503 	bic.w	r5, r5, #3
 8003152:	3508      	adds	r5, #8
 8003154:	2d0c      	cmp	r5, #12
 8003156:	bf38      	it	cc
 8003158:	250c      	movcc	r5, #12
 800315a:	2d00      	cmp	r5, #0
 800315c:	4607      	mov	r7, r0
 800315e:	db01      	blt.n	8003164 <_malloc_r+0x1c>
 8003160:	42a9      	cmp	r1, r5
 8003162:	d905      	bls.n	8003170 <_malloc_r+0x28>
 8003164:	230c      	movs	r3, #12
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	2600      	movs	r6, #0
 800316a:	4630      	mov	r0, r6
 800316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003170:	4e2e      	ldr	r6, [pc, #184]	; (800322c <_malloc_r+0xe4>)
 8003172:	f000 f89d 	bl	80032b0 <__malloc_lock>
 8003176:	6833      	ldr	r3, [r6, #0]
 8003178:	461c      	mov	r4, r3
 800317a:	bb34      	cbnz	r4, 80031ca <_malloc_r+0x82>
 800317c:	4629      	mov	r1, r5
 800317e:	4638      	mov	r0, r7
 8003180:	f7ff ffc2 	bl	8003108 <sbrk_aligned>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	4604      	mov	r4, r0
 8003188:	d14d      	bne.n	8003226 <_malloc_r+0xde>
 800318a:	6834      	ldr	r4, [r6, #0]
 800318c:	4626      	mov	r6, r4
 800318e:	2e00      	cmp	r6, #0
 8003190:	d140      	bne.n	8003214 <_malloc_r+0xcc>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	4631      	mov	r1, r6
 8003196:	4638      	mov	r0, r7
 8003198:	eb04 0803 	add.w	r8, r4, r3
 800319c:	f000 f878 	bl	8003290 <_sbrk_r>
 80031a0:	4580      	cmp	r8, r0
 80031a2:	d13a      	bne.n	800321a <_malloc_r+0xd2>
 80031a4:	6821      	ldr	r1, [r4, #0]
 80031a6:	3503      	adds	r5, #3
 80031a8:	1a6d      	subs	r5, r5, r1
 80031aa:	f025 0503 	bic.w	r5, r5, #3
 80031ae:	3508      	adds	r5, #8
 80031b0:	2d0c      	cmp	r5, #12
 80031b2:	bf38      	it	cc
 80031b4:	250c      	movcc	r5, #12
 80031b6:	4629      	mov	r1, r5
 80031b8:	4638      	mov	r0, r7
 80031ba:	f7ff ffa5 	bl	8003108 <sbrk_aligned>
 80031be:	3001      	adds	r0, #1
 80031c0:	d02b      	beq.n	800321a <_malloc_r+0xd2>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	442b      	add	r3, r5
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	e00e      	b.n	80031e8 <_malloc_r+0xa0>
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	1b52      	subs	r2, r2, r5
 80031ce:	d41e      	bmi.n	800320e <_malloc_r+0xc6>
 80031d0:	2a0b      	cmp	r2, #11
 80031d2:	d916      	bls.n	8003202 <_malloc_r+0xba>
 80031d4:	1961      	adds	r1, r4, r5
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	6025      	str	r5, [r4, #0]
 80031da:	bf18      	it	ne
 80031dc:	6059      	strne	r1, [r3, #4]
 80031de:	6863      	ldr	r3, [r4, #4]
 80031e0:	bf08      	it	eq
 80031e2:	6031      	streq	r1, [r6, #0]
 80031e4:	5162      	str	r2, [r4, r5]
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	4638      	mov	r0, r7
 80031ea:	f104 060b 	add.w	r6, r4, #11
 80031ee:	f000 f865 	bl	80032bc <__malloc_unlock>
 80031f2:	f026 0607 	bic.w	r6, r6, #7
 80031f6:	1d23      	adds	r3, r4, #4
 80031f8:	1af2      	subs	r2, r6, r3
 80031fa:	d0b6      	beq.n	800316a <_malloc_r+0x22>
 80031fc:	1b9b      	subs	r3, r3, r6
 80031fe:	50a3      	str	r3, [r4, r2]
 8003200:	e7b3      	b.n	800316a <_malloc_r+0x22>
 8003202:	6862      	ldr	r2, [r4, #4]
 8003204:	42a3      	cmp	r3, r4
 8003206:	bf0c      	ite	eq
 8003208:	6032      	streq	r2, [r6, #0]
 800320a:	605a      	strne	r2, [r3, #4]
 800320c:	e7ec      	b.n	80031e8 <_malloc_r+0xa0>
 800320e:	4623      	mov	r3, r4
 8003210:	6864      	ldr	r4, [r4, #4]
 8003212:	e7b2      	b.n	800317a <_malloc_r+0x32>
 8003214:	4634      	mov	r4, r6
 8003216:	6876      	ldr	r6, [r6, #4]
 8003218:	e7b9      	b.n	800318e <_malloc_r+0x46>
 800321a:	230c      	movs	r3, #12
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4638      	mov	r0, r7
 8003220:	f000 f84c 	bl	80032bc <__malloc_unlock>
 8003224:	e7a1      	b.n	800316a <_malloc_r+0x22>
 8003226:	6025      	str	r5, [r4, #0]
 8003228:	e7de      	b.n	80031e8 <_malloc_r+0xa0>
 800322a:	bf00      	nop
 800322c:	200000e0 	.word	0x200000e0

08003230 <_realloc_r>:
 8003230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003234:	4680      	mov	r8, r0
 8003236:	4614      	mov	r4, r2
 8003238:	460e      	mov	r6, r1
 800323a:	b921      	cbnz	r1, 8003246 <_realloc_r+0x16>
 800323c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003240:	4611      	mov	r1, r2
 8003242:	f7ff bf81 	b.w	8003148 <_malloc_r>
 8003246:	b92a      	cbnz	r2, 8003254 <_realloc_r+0x24>
 8003248:	f7ff ff12 	bl	8003070 <_free_r>
 800324c:	4625      	mov	r5, r4
 800324e:	4628      	mov	r0, r5
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003254:	f000 f838 	bl	80032c8 <_malloc_usable_size_r>
 8003258:	4284      	cmp	r4, r0
 800325a:	4607      	mov	r7, r0
 800325c:	d802      	bhi.n	8003264 <_realloc_r+0x34>
 800325e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003262:	d812      	bhi.n	800328a <_realloc_r+0x5a>
 8003264:	4621      	mov	r1, r4
 8003266:	4640      	mov	r0, r8
 8003268:	f7ff ff6e 	bl	8003148 <_malloc_r>
 800326c:	4605      	mov	r5, r0
 800326e:	2800      	cmp	r0, #0
 8003270:	d0ed      	beq.n	800324e <_realloc_r+0x1e>
 8003272:	42bc      	cmp	r4, r7
 8003274:	4622      	mov	r2, r4
 8003276:	4631      	mov	r1, r6
 8003278:	bf28      	it	cs
 800327a:	463a      	movcs	r2, r7
 800327c:	f7ff fed0 	bl	8003020 <memcpy>
 8003280:	4631      	mov	r1, r6
 8003282:	4640      	mov	r0, r8
 8003284:	f7ff fef4 	bl	8003070 <_free_r>
 8003288:	e7e1      	b.n	800324e <_realloc_r+0x1e>
 800328a:	4635      	mov	r5, r6
 800328c:	e7df      	b.n	800324e <_realloc_r+0x1e>
	...

08003290 <_sbrk_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4d06      	ldr	r5, [pc, #24]	; (80032ac <_sbrk_r+0x1c>)
 8003294:	2300      	movs	r3, #0
 8003296:	4604      	mov	r4, r0
 8003298:	4608      	mov	r0, r1
 800329a:	602b      	str	r3, [r5, #0]
 800329c:	f7fd fcba 	bl	8000c14 <_sbrk>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d102      	bne.n	80032aa <_sbrk_r+0x1a>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	b103      	cbz	r3, 80032aa <_sbrk_r+0x1a>
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	200000e8 	.word	0x200000e8

080032b0 <__malloc_lock>:
 80032b0:	4801      	ldr	r0, [pc, #4]	; (80032b8 <__malloc_lock+0x8>)
 80032b2:	f000 b811 	b.w	80032d8 <__retarget_lock_acquire_recursive>
 80032b6:	bf00      	nop
 80032b8:	200000ec 	.word	0x200000ec

080032bc <__malloc_unlock>:
 80032bc:	4801      	ldr	r0, [pc, #4]	; (80032c4 <__malloc_unlock+0x8>)
 80032be:	f000 b80c 	b.w	80032da <__retarget_lock_release_recursive>
 80032c2:	bf00      	nop
 80032c4:	200000ec 	.word	0x200000ec

080032c8 <_malloc_usable_size_r>:
 80032c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032cc:	1f18      	subs	r0, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bfbc      	itt	lt
 80032d2:	580b      	ldrlt	r3, [r1, r0]
 80032d4:	18c0      	addlt	r0, r0, r3
 80032d6:	4770      	bx	lr

080032d8 <__retarget_lock_acquire_recursive>:
 80032d8:	4770      	bx	lr

080032da <__retarget_lock_release_recursive>:
 80032da:	4770      	bx	lr

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
