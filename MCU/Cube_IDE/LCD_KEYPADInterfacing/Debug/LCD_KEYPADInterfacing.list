
LCD_KEYPADInterfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002dd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002dd4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000557a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001504  00000000  00000000  0002561a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  00026b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  000270a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021603  00000000  00000000  00027558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072e3  00000000  00000000  00048b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7058  00000000  00000000  0004fe3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116e96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  00116ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002bb8 	.word	0x08002bb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002bb8 	.word	0x08002bb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d013      	beq.n	8000548 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000528:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	e000      	b.n	8000534 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000532:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fd06 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f9b0 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 fa1c 	bl	80009a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000568:	f000 fbbe 	bl	8000ce8 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_cmd(0x80);
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	f000 fb6b 	bl	8000c48 <lcd_cmd>
  lcd_display("PHYTEC EMBEDDED",15);
 8000572:	210f      	movs	r1, #15
 8000574:	48b3      	ldr	r0, [pc, #716]	; (8000844 <main+0x2ec>)
 8000576:	f000 fbc7 	bl	8000d08 <lcd_display>
  {
//	  lcd_cmd(0x80);
//	  lcd_display("PHYTEC EMBEDDED",15);
//	  lcd_cmd(0xc0);

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	48b2      	ldr	r0, [pc, #712]	; (8000848 <main+0x2f0>)
 8000580:	f001 f81c 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	48af      	ldr	r0, [pc, #700]	; (8000848 <main+0x2f0>)
 800058a:	f001 f817 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 800058e:	2201      	movs	r2, #1
 8000590:	2104      	movs	r1, #4
 8000592:	48ad      	ldr	r0, [pc, #692]	; (8000848 <main+0x2f0>)
 8000594:	f001 f812 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	48aa      	ldr	r0, [pc, #680]	; (8000848 <main+0x2f0>)
 800059e:	f001 f80d 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	48a8      	ldr	r0, [pc, #672]	; (8000848 <main+0x2f0>)
 80005a8:	f001 f808 	bl	80015bc <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 80005ac:	2110      	movs	r1, #16
 80005ae:	48a6      	ldr	r0, [pc, #664]	; (8000848 <main+0x2f0>)
 80005b0:	f000 ffec 	bl	800158c <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10c      	bne.n	80005d4 <main+0x7c>
	  {
		  HAL_Delay(300);
 80005ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005be:	f000 fd47 	bl	8001050 <HAL_Delay>
		  printf("1 is pressed\n");
 80005c2:	48a2      	ldr	r0, [pc, #648]	; (800084c <main+0x2f4>)
 80005c4:	f001 fe68 	bl	8002298 <puts>
		 lcd_cmd(0xc0);
 80005c8:	20c0      	movs	r0, #192	; 0xc0
 80005ca:	f000 fb3d 	bl	8000c48 <lcd_cmd>
		  lcd_data('1');
 80005ce:	2031      	movs	r0, #49	; 0x31
 80005d0:	f000 fb62 	bl	8000c98 <lcd_data>


	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 80005d4:	2120      	movs	r1, #32
 80005d6:	489c      	ldr	r0, [pc, #624]	; (8000848 <main+0x2f0>)
 80005d8:	f000 ffd8 	bl	800158c <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d109      	bne.n	80005f6 <main+0x9e>
	  {
		  HAL_Delay(300);
 80005e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005e6:	f000 fd33 	bl	8001050 <HAL_Delay>
		  printf("2 is pressed\n");
 80005ea:	4899      	ldr	r0, [pc, #612]	; (8000850 <main+0x2f8>)
 80005ec:	f001 fe54 	bl	8002298 <puts>
//		  lcd_cmd(0xc1);
		  lcd_data('2');
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fb51 	bl	8000c98 <lcd_data>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4893      	ldr	r0, [pc, #588]	; (8000848 <main+0x2f0>)
 80005fa:	f000 ffc7 	bl	800158c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d109      	bne.n	8000618 <main+0xc0>
	  {
		  HAL_Delay(300);
 8000604:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000608:	f000 fd22 	bl	8001050 <HAL_Delay>
		  printf("3 is pressed\n");
 800060c:	4891      	ldr	r0, [pc, #580]	; (8000854 <main+0x2fc>)
 800060e:	f001 fe43 	bl	8002298 <puts>
//		  lcd_cmd(0xc2);
		  lcd_data('3');
 8000612:	2033      	movs	r0, #51	; 0x33
 8000614:	f000 fb40 	bl	8000c98 <lcd_data>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	488a      	ldr	r0, [pc, #552]	; (8000848 <main+0x2f0>)
 800061e:	f000 ffb5 	bl	800158c <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <main+0xe4>
	  {
		  HAL_Delay(300);
 8000628:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800062c:	f000 fd10 	bl	8001050 <HAL_Delay>
		  printf("A is pressed\n");
 8000630:	4889      	ldr	r0, [pc, #548]	; (8000858 <main+0x300>)
 8000632:	f001 fe31 	bl	8002298 <puts>
//		  lcd_cmd(0xc3);
		  lcd_data('A');
 8000636:	2041      	movs	r0, #65	; 0x41
 8000638:	f000 fb2e 	bl	8000c98 <lcd_data>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	4881      	ldr	r0, [pc, #516]	; (8000848 <main+0x2f0>)
 8000642:	f000 ffbb 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8000646:	2201      	movs	r2, #1
 8000648:	2102      	movs	r1, #2
 800064a:	487f      	ldr	r0, [pc, #508]	; (8000848 <main+0x2f0>)
 800064c:	f000 ffb6 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8000650:	2201      	movs	r2, #1
 8000652:	2104      	movs	r1, #4
 8000654:	487c      	ldr	r0, [pc, #496]	; (8000848 <main+0x2f0>)
 8000656:	f000 ffb1 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	487a      	ldr	r0, [pc, #488]	; (8000848 <main+0x2f0>)
 8000660:	f000 ffac 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 8000664:	2200      	movs	r2, #0
 8000666:	2102      	movs	r1, #2
 8000668:	4877      	ldr	r0, [pc, #476]	; (8000848 <main+0x2f0>)
 800066a:	f000 ffa7 	bl	80015bc <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 800066e:	2110      	movs	r1, #16
 8000670:	4875      	ldr	r0, [pc, #468]	; (8000848 <main+0x2f0>)
 8000672:	f000 ff8b 	bl	800158c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d109      	bne.n	8000690 <main+0x138>
	  {
		  HAL_Delay(300);
 800067c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000680:	f000 fce6 	bl	8001050 <HAL_Delay>
		  printf("4 is pressed\n");
 8000684:	4875      	ldr	r0, [pc, #468]	; (800085c <main+0x304>)
 8000686:	f001 fe07 	bl	8002298 <puts>
//		  lcd_cmd(0xc4);
		  lcd_data('4');
 800068a:	2034      	movs	r0, #52	; 0x34
 800068c:	f000 fb04 	bl	8000c98 <lcd_data>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 8000690:	2120      	movs	r1, #32
 8000692:	486d      	ldr	r0, [pc, #436]	; (8000848 <main+0x2f0>)
 8000694:	f000 ff7a 	bl	800158c <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d109      	bne.n	80006b2 <main+0x15a>
	  {
		  HAL_Delay(300);
 800069e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a2:	f000 fcd5 	bl	8001050 <HAL_Delay>
		  printf("5 is pressed\n");
 80006a6:	486e      	ldr	r0, [pc, #440]	; (8000860 <main+0x308>)
 80006a8:	f001 fdf6 	bl	8002298 <puts>
//		  lcd_cmd(0xc5);
		  lcd_data('5');
 80006ac:	2035      	movs	r0, #53	; 0x35
 80006ae:	f000 faf3 	bl	8000c98 <lcd_data>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	4864      	ldr	r0, [pc, #400]	; (8000848 <main+0x2f0>)
 80006b6:	f000 ff69 	bl	800158c <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d109      	bne.n	80006d4 <main+0x17c>
	  {
		  HAL_Delay(300);
 80006c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006c4:	f000 fcc4 	bl	8001050 <HAL_Delay>
		  printf("6 is pressed\n");
 80006c8:	4866      	ldr	r0, [pc, #408]	; (8000864 <main+0x30c>)
 80006ca:	f001 fde5 	bl	8002298 <puts>
//		  lcd_cmd(0xc6);
		  lcd_data('6');
 80006ce:	2036      	movs	r0, #54	; 0x36
 80006d0:	f000 fae2 	bl	8000c98 <lcd_data>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	485b      	ldr	r0, [pc, #364]	; (8000848 <main+0x2f0>)
 80006da:	f000 ff57 	bl	800158c <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d109      	bne.n	80006f8 <main+0x1a0>
	  {
		  HAL_Delay(300);
 80006e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e8:	f000 fcb2 	bl	8001050 <HAL_Delay>
		  printf("B is pressed\n");
 80006ec:	485e      	ldr	r0, [pc, #376]	; (8000868 <main+0x310>)
 80006ee:	f001 fdd3 	bl	8002298 <puts>
//		  lcd_cmd(0xc7);
		  lcd_data('B');
 80006f2:	2042      	movs	r0, #66	; 0x42
 80006f4:	f000 fad0 	bl	8000c98 <lcd_data>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4852      	ldr	r0, [pc, #328]	; (8000848 <main+0x2f0>)
 80006fe:	f000 ff5d 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8000702:	2201      	movs	r2, #1
 8000704:	2102      	movs	r1, #2
 8000706:	4850      	ldr	r0, [pc, #320]	; (8000848 <main+0x2f0>)
 8000708:	f000 ff58 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 800070c:	2201      	movs	r2, #1
 800070e:	2104      	movs	r1, #4
 8000710:	484d      	ldr	r0, [pc, #308]	; (8000848 <main+0x2f0>)
 8000712:	f000 ff53 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8000716:	2201      	movs	r2, #1
 8000718:	2108      	movs	r1, #8
 800071a:	484b      	ldr	r0, [pc, #300]	; (8000848 <main+0x2f0>)
 800071c:	f000 ff4e 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8000720:	2200      	movs	r2, #0
 8000722:	2104      	movs	r1, #4
 8000724:	4848      	ldr	r0, [pc, #288]	; (8000848 <main+0x2f0>)
 8000726:	f000 ff49 	bl	80015bc <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 800072a:	2110      	movs	r1, #16
 800072c:	4846      	ldr	r0, [pc, #280]	; (8000848 <main+0x2f0>)
 800072e:	f000 ff2d 	bl	800158c <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <main+0x1ee>
	  {
		  HAL_Delay(300);
 8000738:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800073c:	f000 fc88 	bl	8001050 <HAL_Delay>
		  printf("7 is pressed\n");
 8000740:	484a      	ldr	r0, [pc, #296]	; (800086c <main+0x314>)
 8000742:	f001 fda9 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 8000746:	2120      	movs	r1, #32
 8000748:	483f      	ldr	r0, [pc, #252]	; (8000848 <main+0x2f0>)
 800074a:	f000 ff1f 	bl	800158c <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d106      	bne.n	8000762 <main+0x20a>
	  {
		  HAL_Delay(300);
 8000754:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000758:	f000 fc7a 	bl	8001050 <HAL_Delay>
		  printf("8 is pressed\n");
 800075c:	4844      	ldr	r0, [pc, #272]	; (8000870 <main+0x318>)
 800075e:	f001 fd9b 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	4838      	ldr	r0, [pc, #224]	; (8000848 <main+0x2f0>)
 8000766:	f000 ff11 	bl	800158c <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <main+0x226>
	  {
		  HAL_Delay(300);
 8000770:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000774:	f000 fc6c 	bl	8001050 <HAL_Delay>
		  printf("9 is pressed\n");
 8000778:	483e      	ldr	r0, [pc, #248]	; (8000874 <main+0x31c>)
 800077a:	f001 fd8d 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <main+0x2f0>)
 8000784:	f000 ff02 	bl	800158c <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <main+0x244>
	  {
		  HAL_Delay(300);
 800078e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000792:	f000 fc5d 	bl	8001050 <HAL_Delay>
		  printf("C is pressed\n");
 8000796:	4838      	ldr	r0, [pc, #224]	; (8000878 <main+0x320>)
 8000798:	f001 fd7e 	bl	8002298 <puts>
	  }

	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <main+0x2f0>)
 80007a2:	f000 ff0b 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2102      	movs	r1, #2
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <main+0x2f0>)
 80007ac:	f000 ff06 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2104      	movs	r1, #4
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <main+0x2f0>)
 80007b6:	f000 ff01 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <main+0x2f0>)
 80007c0:	f000 fefc 	bl	80015bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <main+0x2f0>)
 80007ca:	f000 fef7 	bl	80015bc <HAL_GPIO_WritePin>
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)))
 80007ce:	2110      	movs	r1, #16
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <main+0x2f0>)
 80007d2:	f000 fedb 	bl	800158c <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d106      	bne.n	80007ea <main+0x292>
	  {
		  HAL_Delay(300);
 80007dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007e0:	f000 fc36 	bl	8001050 <HAL_Delay>
		  printf("* is pressed\n");
 80007e4:	4825      	ldr	r0, [pc, #148]	; (800087c <main+0x324>)
 80007e6:	f001 fd57 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)))
 80007ea:	2120      	movs	r1, #32
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <main+0x2f0>)
 80007ee:	f000 fecd 	bl	800158c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d106      	bne.n	8000806 <main+0x2ae>
	  {
		  HAL_Delay(300);
 80007f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007fc:	f000 fc28 	bl	8001050 <HAL_Delay>
		  printf("0 is pressed\n");
 8000800:	481f      	ldr	r0, [pc, #124]	; (8000880 <main+0x328>)
 8000802:	f001 fd49 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)))
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <main+0x2f0>)
 800080a:	f000 febf 	bl	800158c <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d106      	bne.n	8000822 <main+0x2ca>
	  {
		  HAL_Delay(300);
 8000814:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000818:	f000 fc1a 	bl	8001050 <HAL_Delay>
		  printf("# is pressed\n");
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <main+0x32c>)
 800081e:	f001 fd3b 	bl	8002298 <puts>
	  }
	  if(!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)))
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <main+0x2f0>)
 8000828:	f000 feb0 	bl	800158c <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f47f aea3 	bne.w	800057a <main+0x22>
	  {
		  HAL_Delay(300);
 8000834:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000838:	f000 fc0a 	bl	8001050 <HAL_Delay>
		  printf("D is pressed\n");
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x330>)
 800083e:	f001 fd2b 	bl	8002298 <puts>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8000842:	e69a      	b.n	800057a <main+0x22>
 8000844:	08002bd0 	.word	0x08002bd0
 8000848:	40020800 	.word	0x40020800
 800084c:	08002be0 	.word	0x08002be0
 8000850:	08002bf0 	.word	0x08002bf0
 8000854:	08002c00 	.word	0x08002c00
 8000858:	08002c10 	.word	0x08002c10
 800085c:	08002c20 	.word	0x08002c20
 8000860:	08002c30 	.word	0x08002c30
 8000864:	08002c40 	.word	0x08002c40
 8000868:	08002c50 	.word	0x08002c50
 800086c:	08002c60 	.word	0x08002c60
 8000870:	08002c70 	.word	0x08002c70
 8000874:	08002c80 	.word	0x08002c80
 8000878:	08002c90 	.word	0x08002c90
 800087c:	08002ca0 	.word	0x08002ca0
 8000880:	08002cb0 	.word	0x08002cb0
 8000884:	08002cc0 	.word	0x08002cc0
 8000888:	08002cd0 	.word	0x08002cd0

0800088c <_write>:
  * @brief System Clock Configuration
  * @retval None
  */

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e009      	b.n	80008b2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	60ba      	str	r2, [r7, #8]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe2e 	bl	8000508 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbf1      	blt.n	800089e <_write+0x12>
  }
  return len;
 80008ba:	687b      	ldr	r3, [r7, #4]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	; 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fc6a 	bl	80021ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <SystemClock_Config+0xd4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a29      	ldr	r2, [pc, #164]	; (8000998 <SystemClock_Config+0xd4>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <SystemClock_Config+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <SystemClock_Config+0xd8>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800093c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000940:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f962 	bl	8001c1c <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800095e:	f000 f8d7 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe36 	bl	80015f0 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800098a:	f000 f8c1 	bl	8000b10 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a50      	ldr	r2, [pc, #320]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a49      	ldr	r2, [pc, #292]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a42      	ldr	r2, [pc, #264]	; (8000b00 <MX_GPIO_Init+0x160>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a3b      	ldr	r2, [pc, #236]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <MX_GPIO_Init+0x160>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a26:	2200      	movs	r2, #0
 8000a28:	218f      	movs	r1, #143	; 0x8f
 8000a2a:	4836      	ldr	r0, [pc, #216]	; (8000b04 <MX_GPIO_Init+0x164>)
 8000a2c:	f000 fdc6 	bl	80015bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000a36:	4834      	ldr	r0, [pc, #208]	; (8000b08 <MX_GPIO_Init+0x168>)
 8000a38:	f000 fdc0 	bl	80015bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000a42:	4832      	ldr	r0, [pc, #200]	; (8000b0c <MX_GPIO_Init+0x16c>)
 8000a44:	f000 fdba 	bl	80015bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <MX_GPIO_Init+0x164>)
 8000a60:	f000 fc00 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a64:	238f      	movs	r3, #143	; 0x8f
 8000a66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4822      	ldr	r0, [pc, #136]	; (8000b04 <MX_GPIO_Init+0x164>)
 8000a7c:	f000 fbf2 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a80:	230c      	movs	r3, #12
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <MX_GPIO_Init+0x168>)
 8000a9c:	f000 fbe2 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000aa0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000aa4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <MX_GPIO_Init+0x168>)
 8000aba:	f000 fbd3 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000abe:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_GPIO_Init+0x164>)
 8000ad4:	f000 fbc6 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ad8:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_GPIO_Init+0x16c>)
 8000af2:	f000 fbb7 	bl	8001264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <print>:


#include "main.h"

void print(unsigned char dat)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	///////0

	if((dat&0x1)==0x1)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <print+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b36:	4841      	ldr	r0, [pc, #260]	; (8000c3c <print+0x120>)
 8000b38:	f000 fd40 	bl	80015bc <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <print+0x2e>

	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	483d      	ldr	r0, [pc, #244]	; (8000c3c <print+0x120>)
 8000b46:	f000 fd39 	bl	80015bc <HAL_GPIO_WritePin>
	}
	////////1
	if((dat&0x2)==0x2)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <print+0x44>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	4839      	ldr	r0, [pc, #228]	; (8000c40 <print+0x124>)
 8000b5a:	f000 fd2f 	bl	80015bc <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <print+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2108      	movs	r1, #8
 8000b64:	4836      	ldr	r0, [pc, #216]	; (8000c40 <print+0x124>)
 8000b66:	f000 fd29 	bl	80015bc <HAL_GPIO_WritePin>
	}
	////////2
	if((dat&0x4)==0x4)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <print+0x64>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	4831      	ldr	r0, [pc, #196]	; (8000c40 <print+0x124>)
 8000b7a:	f000 fd1f 	bl	80015bc <HAL_GPIO_WritePin>
 8000b7e:	e004      	b.n	8000b8a <print+0x6e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2120      	movs	r1, #32
 8000b84:	482e      	ldr	r0, [pc, #184]	; (8000c40 <print+0x124>)
 8000b86:	f000 fd19 	bl	80015bc <HAL_GPIO_WritePin>
		}
	////////3
	if((dat&0x8)==0x8)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d005      	beq.n	8000ba0 <print+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2110      	movs	r1, #16
 8000b98:	4829      	ldr	r0, [pc, #164]	; (8000c40 <print+0x124>)
 8000b9a:	f000 fd0f 	bl	80015bc <HAL_GPIO_WritePin>
 8000b9e:	e004      	b.n	8000baa <print+0x8e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4826      	ldr	r0, [pc, #152]	; (8000c40 <print+0x124>)
 8000ba6:	f000 fd09 	bl	80015bc <HAL_GPIO_WritePin>
		}
	////////4
	if((dat&0x10)==0x10)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <print+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	4821      	ldr	r0, [pc, #132]	; (8000c40 <print+0x124>)
 8000bbc:	f000 fcfe 	bl	80015bc <HAL_GPIO_WritePin>
 8000bc0:	e005      	b.n	8000bce <print+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <print+0x124>)
 8000bca:	f000 fcf7 	bl	80015bc <HAL_GPIO_WritePin>
		}
	////////5
	if((dat&0x20)==0x20)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <print+0xca>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4817      	ldr	r0, [pc, #92]	; (8000c3c <print+0x120>)
 8000be0:	f000 fcec 	bl	80015bc <HAL_GPIO_WritePin>
 8000be4:	e005      	b.n	8000bf2 <print+0xd6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <print+0x120>)
 8000bee:	f000 fce5 	bl	80015bc <HAL_GPIO_WritePin>
		}
	////////6
	if((dat&0x40)==0x40)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <print+0xee>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <print+0x120>)
 8000c04:	f000 fcda 	bl	80015bc <HAL_GPIO_WritePin>
 8000c08:	e005      	b.n	8000c16 <print+0xfa>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <print+0x120>)
 8000c12:	f000 fcd3 	bl	80015bc <HAL_GPIO_WritePin>
		}
	////////7
	if((dat&0x80)==0x80)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	da05      	bge.n	8000c2a <print+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <print+0x128>)
 8000c24:	f000 fcca 	bl	80015bc <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
		}

}
 8000c28:	e004      	b.n	8000c34 <print+0x118>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <print+0x128>)
 8000c30:	f000 fcc4 	bl	80015bc <HAL_GPIO_WritePin>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40020800 	.word	0x40020800

08000c48 <lcd_cmd>:
void lcd_cmd(unsigned char cmd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	print(cmd);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff61 	bl	8000b1c <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//REG SELECT PIN
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <lcd_cmd+0x48>)
 8000c60:	f000 fcac 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);//READ WRITE PIN
 8000c64:	2200      	movs	r2, #0
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <lcd_cmd+0x4c>)
 8000c6a:	f000 fca7 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);// ENABLE PIN
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <lcd_cmd+0x4c>)
 8000c74:	f000 fca2 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	; 0x64
 8000c7a:	f000 f9e9 	bl	8001050 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);// ENABLE PIN
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <lcd_cmd+0x4c>)
 8000c84:	f000 fc9a 	bl	80015bc <HAL_GPIO_WritePin>

}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020000 	.word	0x40020000

08000c98 <lcd_data>:
void lcd_data(unsigned char mydat)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	print(mydat);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff39 	bl	8000b1c <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <lcd_data+0x48>)
 8000cb0:	f000 fc84 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <lcd_data+0x4c>)
 8000cba:	f000 fc7f 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <lcd_data+0x4c>)
 8000cc4:	f000 fc7a 	bl	80015bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f000 f9c1 	bl	8001050 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <lcd_data+0x4c>)
 8000cd4:	f000 fc72 	bl	80015bc <HAL_GPIO_WritePin>



}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <lcd_init>:
void lcd_init()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	lcd_cmd(0x38);
 8000cec:	2038      	movs	r0, #56	; 0x38
 8000cee:	f7ff ffab 	bl	8000c48 <lcd_cmd>
	lcd_cmd(0x06);
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff ffa8 	bl	8000c48 <lcd_cmd>
	lcd_cmd(0x01);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ffa5 	bl	8000c48 <lcd_cmd>
	lcd_cmd(0x0C);
 8000cfe:	200c      	movs	r0, #12
 8000d00:	f7ff ffa2 	bl	8000c48 <lcd_cmd>

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <lcd_display>:
void lcd_display(unsigned char *str,unsigned int length)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	for(int i=0;i<length;i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e009      	b.n	8000d2c <lcd_display+0x24>
	{
		lcd_data(str[i]);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ffb9 	bl	8000c98 <lcd_data>
	for(int i=0;i<length;i++)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f1      	bhi.n	8000d18 <lcd_display+0x10>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f000 fa3c 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f918 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00a      	b.n	8000e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf0      	blt.n	8000df6 <_read+0x12>
  }

  return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e46:	605a      	str	r2, [r3, #4]
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_isatty>:

int _isatty(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f001 f94e 	bl	8002158 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	2000008c 	.word	0x2000008c
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff ffd7 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f001 f90d 	bl	8002164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fb05 	bl	8000558 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f5c:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 8000f60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f64:	200000a4 	.word	0x200000a4

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f931 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fece 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f93b 	bl	800124a <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f911 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000090 	.word	0x20000090

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000090 	.word	0x20000090

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_SetPriority>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff47 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff5c 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffb0 	bl	80011b8 <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e165      	b.n	800154c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8154 	bne.w	8001546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ae 	beq.w	8001546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_GPIO_Init+0x300>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a5c      	ldr	r2, [pc, #368]	; (8001564 <HAL_GPIO_Init+0x300>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_GPIO_Init+0x300>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a58      	ldr	r2, [pc, #352]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <HAL_GPIO_Init+0x308>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x21a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_GPIO_Init+0x30c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x216>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x310>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x212>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x314>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x318>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x20a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x31c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x206>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x320>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x202>
 8001462:	2306      	movs	r3, #6
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001466:	2307      	movs	r3, #7
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x21c>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a31      	ldr	r2, [pc, #196]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a26      	ldr	r2, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_GPIO_Init+0x324>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_GPIO_Init+0x324>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_GPIO_Init+0x324>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_GPIO_Init+0x324>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae96 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fcaa 	bl	8001038 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fca6 	bl	8001038 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc0a 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08002ce0 	.word	0x08002ce0
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c0:	b0ae      	sub	sp, #184	; 0xb8
 80017c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e2:	4bcb      	ldr	r3, [pc, #812]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	f200 8206 	bhi.w	8001bfc <HAL_RCC_GetSysClockFreq+0x440>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	08001bfd 	.word	0x08001bfd
 8001800:	08001bfd 	.word	0x08001bfd
 8001804:	08001bfd 	.word	0x08001bfd
 8001808:	08001835 	.word	0x08001835
 800180c:	08001bfd 	.word	0x08001bfd
 8001810:	08001bfd 	.word	0x08001bfd
 8001814:	08001bfd 	.word	0x08001bfd
 8001818:	0800183d 	.word	0x0800183d
 800181c:	08001bfd 	.word	0x08001bfd
 8001820:	08001bfd 	.word	0x08001bfd
 8001824:	08001bfd 	.word	0x08001bfd
 8001828:	08001a2d 	.word	0x08001a2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4bb9      	ldr	r3, [pc, #740]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x358>)
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001832:	e1e7      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4bb8      	ldr	r3, [pc, #736]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800183a:	e1e3      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4bb4      	ldr	r3, [pc, #720]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001848:	4bb1      	ldr	r3, [pc, #708]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d071      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4bae      	ldr	r3, [pc, #696]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001860:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4621      	mov	r1, r4
 8001894:	1a51      	subs	r1, r2, r1
 8001896:	6439      	str	r1, [r7, #64]	; 0x40
 8001898:	4629      	mov	r1, r5
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018ac:	4649      	mov	r1, r9
 80018ae:	018b      	lsls	r3, r1, #6
 80018b0:	4641      	mov	r1, r8
 80018b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b6:	4641      	mov	r1, r8
 80018b8:	018a      	lsls	r2, r1, #6
 80018ba:	4641      	mov	r1, r8
 80018bc:	1a51      	subs	r1, r2, r1
 80018be:	63b9      	str	r1, [r7, #56]	; 0x38
 80018c0:	4649      	mov	r1, r9
 80018c2:	eb63 0301 	sbc.w	r3, r3, r1
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018d4:	4649      	mov	r1, r9
 80018d6:	00cb      	lsls	r3, r1, #3
 80018d8:	4641      	mov	r1, r8
 80018da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018de:	4641      	mov	r1, r8
 80018e0:	00ca      	lsls	r2, r1, #3
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	4622      	mov	r2, r4
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
 80018ee:	462b      	mov	r3, r5
 80018f0:	460a      	mov	r2, r1
 80018f2:	eb42 0303 	adc.w	r3, r2, r3
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001904:	4629      	mov	r1, r5
 8001906:	024b      	lsls	r3, r1, #9
 8001908:	4621      	mov	r1, r4
 800190a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800190e:	4621      	mov	r1, r4
 8001910:	024a      	lsls	r2, r1, #9
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191a:	2200      	movs	r2, #0
 800191c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001924:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001928:	f7fe fc6c 	bl	8000204 <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001936:	e067      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001938:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	2200      	movs	r2, #0
 8001940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001944:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800194c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001950:	67bb      	str	r3, [r7, #120]	; 0x78
 8001952:	2300      	movs	r3, #0
 8001954:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001956:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0159      	lsls	r1, r3, #5
 8001968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196c:	0150      	lsls	r0, r2, #5
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4621      	mov	r1, r4
 8001974:	1a51      	subs	r1, r2, r1
 8001976:	62b9      	str	r1, [r7, #40]	; 0x28
 8001978:	4629      	mov	r1, r5
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800198c:	4649      	mov	r1, r9
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	4641      	mov	r1, r8
 8001992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001996:	4641      	mov	r1, r8
 8001998:	018a      	lsls	r2, r1, #6
 800199a:	4641      	mov	r1, r8
 800199c:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019ba:	4692      	mov	sl, r2
 80019bc:	469b      	mov	fp, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	eb1a 0303 	adds.w	r3, sl, r3
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	462b      	mov	r3, r5
 80019c8:	eb4b 0303 	adc.w	r3, fp, r3
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019da:	4629      	mov	r1, r5
 80019dc:	028b      	lsls	r3, r1, #10
 80019de:	4621      	mov	r1, r4
 80019e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e4:	4621      	mov	r1, r4
 80019e6:	028a      	lsls	r2, r1, #10
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019f0:	2200      	movs	r2, #0
 80019f2:	673b      	str	r3, [r7, #112]	; 0x70
 80019f4:	677a      	str	r2, [r7, #116]	; 0x74
 80019f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019fa:	f7fe fc03 	bl	8000204 <__aeabi_uldivmod>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4613      	mov	r3, r2
 8001a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a2a:	e0eb      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d06b      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a56:	663b      	str	r3, [r7, #96]	; 0x60
 8001a58:	2300      	movs	r3, #0
 8001a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a60:	4622      	mov	r2, r4
 8001a62:	462b      	mov	r3, r5
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0159      	lsls	r1, r3, #5
 8001a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a72:	0150      	lsls	r0, r2, #5
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4621      	mov	r1, r4
 8001a7a:	1a51      	subs	r1, r2, r1
 8001a7c:	61b9      	str	r1, [r7, #24]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	eb63 0301 	sbc.w	r3, r3, r1
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a92:	4659      	mov	r1, fp
 8001a94:	018b      	lsls	r3, r1, #6
 8001a96:	4651      	mov	r1, sl
 8001a98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	018a      	lsls	r2, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	eb63 0901 	sbc.w	r9, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac0:	4690      	mov	r8, r2
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	eb18 0303 	adds.w	r3, r8, r3
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	462b      	mov	r3, r5
 8001ace:	eb49 0303 	adc.w	r3, r9, r3
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	024b      	lsls	r3, r1, #9
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aea:	4621      	mov	r1, r4
 8001aec:	024a      	lsls	r2, r1, #9
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001af6:	2200      	movs	r2, #0
 8001af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001afa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001afc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b00:	f7fe fb80 	bl	8000204 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b0e:	e065      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x420>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	2200      	movs	r2, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	4611      	mov	r1, r2
 8001b28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b2e:	2300      	movs	r3, #0
 8001b30:	657b      	str	r3, [r7, #84]	; 0x54
 8001b32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b36:	4642      	mov	r2, r8
 8001b38:	464b      	mov	r3, r9
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	0159      	lsls	r1, r3, #5
 8001b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b48:	0150      	lsls	r0, r2, #5
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1a51      	subs	r1, r2, r1
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	4649      	mov	r1, r9
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b68:	4659      	mov	r1, fp
 8001b6a:	018b      	lsls	r3, r1, #6
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b72:	4651      	mov	r1, sl
 8001b74:	018a      	lsls	r2, r1, #6
 8001b76:	4651      	mov	r1, sl
 8001b78:	1a54      	subs	r4, r2, r1
 8001b7a:	4659      	mov	r1, fp
 8001b7c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	00eb      	lsls	r3, r5, #3
 8001b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8e:	00e2      	lsls	r2, r4, #3
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bce:	f7fe fb19 	bl	8000204 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0f1b      	lsrs	r3, r3, #28
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bfa:	e003      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	37b8      	adds	r7, #184	; 0xb8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400

08001c1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e28d      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8083 	beq.w	8001d42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c3c:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d019      	beq.n	8001c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c48:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c54:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c60:	d00c      	beq.n	8001c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d112      	bne.n	8001c94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7a:	d10b      	bne.n	8001c94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	4b84      	ldr	r3, [pc, #528]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d05b      	beq.n	8001d40 <HAL_RCC_OscConfig+0x124>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d157      	bne.n	8001d40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e25a      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d106      	bne.n	8001cac <HAL_RCC_OscConfig+0x90>
 8001c9e:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xcc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xb4>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xcc>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f9a2 	bl	8001038 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f99e 	bl	8001038 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e21f      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xdc>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f98e 	bl	8001038 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f98a 	bl	8001038 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e20b      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x104>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d06f      	beq.n	8001e2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d017      	beq.n	8001d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d5a:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d105      	bne.n	8001d72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x186>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1d3      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4937      	ldr	r1, [pc, #220]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCC_OscConfig+0x278>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f937 	bl	8001038 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff f933 	bl	8001038 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1b4      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4925      	ldr	r1, [pc, #148]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x278>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f916 	bl	8001038 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f912 	bl	8001038 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e193      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d036      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f8f6 	bl	8001038 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff f8f2 	bl	8001038 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e173      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x234>
 8001e6e:	e01b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff f8df 	bl	8001038 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e00e      	b.n	8001e9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff f8db 	bl	8001038 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d907      	bls.n	8001e9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e15c      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
 8001e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b8a      	ldr	r3, [pc, #552]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ea      	bne.n	8001e7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8097 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b83      	ldr	r3, [pc, #524]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x4b0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x4b0>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f89b 	bl	8001038 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff f897 	bl	8001038 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e118      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_RCC_OscConfig+0x4b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x31e>
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x358>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x340>
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x358>
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a59      	ldr	r2, [pc, #356]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a56      	ldr	r2, [pc, #344]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f85c 	bl	8001038 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f858 	bl	8001038 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0d7      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCC_OscConfig+0x368>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f846 	bl	8001038 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f842 	bl	8001038 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0c1      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a3a      	ldr	r2, [pc, #232]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80ad 	beq.w	8002148 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d060      	beq.n	80020bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d145      	bne.n	800208e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4b4>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f816 	bl	8001038 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f812 	bl	8001038 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e093      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	071b      	lsls	r3, r3, #28
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x4b4>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7fe ffe7 	bl	8001038 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe ffe3 	bl	8001038 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e064      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x452>
 800208c:	e05c      	b.n	8002148 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x4b4>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe ffd0 	bl	8001038 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe ffcc 	bl	8001038 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e04d      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x480>
 80020ba:	e045      	b.n	8002148 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e040      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_RCC_OscConfig+0x538>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d030      	beq.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d129      	bne.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d122      	bne.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800210c:	4293      	cmp	r3, r2
 800210e:	d119      	bne.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d10f      	bne.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <__errno>:
 8002158:	4b01      	ldr	r3, [pc, #4]	; (8002160 <__errno+0x8>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c

08002164 <__libc_init_array>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	4d0d      	ldr	r5, [pc, #52]	; (800219c <__libc_init_array+0x38>)
 8002168:	4c0d      	ldr	r4, [pc, #52]	; (80021a0 <__libc_init_array+0x3c>)
 800216a:	1b64      	subs	r4, r4, r5
 800216c:	10a4      	asrs	r4, r4, #2
 800216e:	2600      	movs	r6, #0
 8002170:	42a6      	cmp	r6, r4
 8002172:	d109      	bne.n	8002188 <__libc_init_array+0x24>
 8002174:	4d0b      	ldr	r5, [pc, #44]	; (80021a4 <__libc_init_array+0x40>)
 8002176:	4c0c      	ldr	r4, [pc, #48]	; (80021a8 <__libc_init_array+0x44>)
 8002178:	f000 fd1e 	bl	8002bb8 <_init>
 800217c:	1b64      	subs	r4, r4, r5
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	2600      	movs	r6, #0
 8002182:	42a6      	cmp	r6, r4
 8002184:	d105      	bne.n	8002192 <__libc_init_array+0x2e>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	f855 3b04 	ldr.w	r3, [r5], #4
 800218c:	4798      	blx	r3
 800218e:	3601      	adds	r6, #1
 8002190:	e7ee      	b.n	8002170 <__libc_init_array+0xc>
 8002192:	f855 3b04 	ldr.w	r3, [r5], #4
 8002196:	4798      	blx	r3
 8002198:	3601      	adds	r6, #1
 800219a:	e7f2      	b.n	8002182 <__libc_init_array+0x1e>
 800219c:	08002d5c 	.word	0x08002d5c
 80021a0:	08002d5c 	.word	0x08002d5c
 80021a4:	08002d5c 	.word	0x08002d5c
 80021a8:	08002d60 	.word	0x08002d60

080021ac <memset>:
 80021ac:	4402      	add	r2, r0
 80021ae:	4603      	mov	r3, r0
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d100      	bne.n	80021b6 <memset+0xa>
 80021b4:	4770      	bx	lr
 80021b6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ba:	e7f9      	b.n	80021b0 <memset+0x4>

080021bc <_puts_r>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	460e      	mov	r6, r1
 80021c0:	4605      	mov	r5, r0
 80021c2:	b118      	cbz	r0, 80021cc <_puts_r+0x10>
 80021c4:	6983      	ldr	r3, [r0, #24]
 80021c6:	b90b      	cbnz	r3, 80021cc <_puts_r+0x10>
 80021c8:	f000 fa48 	bl	800265c <__sinit>
 80021cc:	69ab      	ldr	r3, [r5, #24]
 80021ce:	68ac      	ldr	r4, [r5, #8]
 80021d0:	b913      	cbnz	r3, 80021d8 <_puts_r+0x1c>
 80021d2:	4628      	mov	r0, r5
 80021d4:	f000 fa42 	bl	800265c <__sinit>
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <_puts_r+0xd0>)
 80021da:	429c      	cmp	r4, r3
 80021dc:	d120      	bne.n	8002220 <_puts_r+0x64>
 80021de:	686c      	ldr	r4, [r5, #4]
 80021e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021e2:	07db      	lsls	r3, r3, #31
 80021e4:	d405      	bmi.n	80021f2 <_puts_r+0x36>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	0598      	lsls	r0, r3, #22
 80021ea:	d402      	bmi.n	80021f2 <_puts_r+0x36>
 80021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ee:	f000 fad3 	bl	8002798 <__retarget_lock_acquire_recursive>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	0719      	lsls	r1, r3, #28
 80021f6:	d51d      	bpl.n	8002234 <_puts_r+0x78>
 80021f8:	6923      	ldr	r3, [r4, #16]
 80021fa:	b1db      	cbz	r3, 8002234 <_puts_r+0x78>
 80021fc:	3e01      	subs	r6, #1
 80021fe:	68a3      	ldr	r3, [r4, #8]
 8002200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002204:	3b01      	subs	r3, #1
 8002206:	60a3      	str	r3, [r4, #8]
 8002208:	bb39      	cbnz	r1, 800225a <_puts_r+0x9e>
 800220a:	2b00      	cmp	r3, #0
 800220c:	da38      	bge.n	8002280 <_puts_r+0xc4>
 800220e:	4622      	mov	r2, r4
 8002210:	210a      	movs	r1, #10
 8002212:	4628      	mov	r0, r5
 8002214:	f000 f848 	bl	80022a8 <__swbuf_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d011      	beq.n	8002240 <_puts_r+0x84>
 800221c:	250a      	movs	r5, #10
 800221e:	e011      	b.n	8002244 <_puts_r+0x88>
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <_puts_r+0xd4>)
 8002222:	429c      	cmp	r4, r3
 8002224:	d101      	bne.n	800222a <_puts_r+0x6e>
 8002226:	68ac      	ldr	r4, [r5, #8]
 8002228:	e7da      	b.n	80021e0 <_puts_r+0x24>
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <_puts_r+0xd8>)
 800222c:	429c      	cmp	r4, r3
 800222e:	bf08      	it	eq
 8002230:	68ec      	ldreq	r4, [r5, #12]
 8002232:	e7d5      	b.n	80021e0 <_puts_r+0x24>
 8002234:	4621      	mov	r1, r4
 8002236:	4628      	mov	r0, r5
 8002238:	f000 f888 	bl	800234c <__swsetup_r>
 800223c:	2800      	cmp	r0, #0
 800223e:	d0dd      	beq.n	80021fc <_puts_r+0x40>
 8002240:	f04f 35ff 	mov.w	r5, #4294967295
 8002244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002246:	07da      	lsls	r2, r3, #31
 8002248:	d405      	bmi.n	8002256 <_puts_r+0x9a>
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	059b      	lsls	r3, r3, #22
 800224e:	d402      	bmi.n	8002256 <_puts_r+0x9a>
 8002250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002252:	f000 faa2 	bl	800279a <__retarget_lock_release_recursive>
 8002256:	4628      	mov	r0, r5
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	2b00      	cmp	r3, #0
 800225c:	da04      	bge.n	8002268 <_puts_r+0xac>
 800225e:	69a2      	ldr	r2, [r4, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	dc06      	bgt.n	8002272 <_puts_r+0xb6>
 8002264:	290a      	cmp	r1, #10
 8002266:	d004      	beq.n	8002272 <_puts_r+0xb6>
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	6022      	str	r2, [r4, #0]
 800226e:	7019      	strb	r1, [r3, #0]
 8002270:	e7c5      	b.n	80021fe <_puts_r+0x42>
 8002272:	4622      	mov	r2, r4
 8002274:	4628      	mov	r0, r5
 8002276:	f000 f817 	bl	80022a8 <__swbuf_r>
 800227a:	3001      	adds	r0, #1
 800227c:	d1bf      	bne.n	80021fe <_puts_r+0x42>
 800227e:	e7df      	b.n	8002240 <_puts_r+0x84>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	250a      	movs	r5, #10
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	6022      	str	r2, [r4, #0]
 8002288:	701d      	strb	r5, [r3, #0]
 800228a:	e7db      	b.n	8002244 <_puts_r+0x88>
 800228c:	08002d14 	.word	0x08002d14
 8002290:	08002d34 	.word	0x08002d34
 8002294:	08002cf4 	.word	0x08002cf4

08002298 <puts>:
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <puts+0xc>)
 800229a:	4601      	mov	r1, r0
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f7ff bf8d 	b.w	80021bc <_puts_r>
 80022a2:	bf00      	nop
 80022a4:	2000000c 	.word	0x2000000c

080022a8 <__swbuf_r>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	460e      	mov	r6, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	4605      	mov	r5, r0
 80022b0:	b118      	cbz	r0, 80022ba <__swbuf_r+0x12>
 80022b2:	6983      	ldr	r3, [r0, #24]
 80022b4:	b90b      	cbnz	r3, 80022ba <__swbuf_r+0x12>
 80022b6:	f000 f9d1 	bl	800265c <__sinit>
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <__swbuf_r+0x98>)
 80022bc:	429c      	cmp	r4, r3
 80022be:	d12b      	bne.n	8002318 <__swbuf_r+0x70>
 80022c0:	686c      	ldr	r4, [r5, #4]
 80022c2:	69a3      	ldr	r3, [r4, #24]
 80022c4:	60a3      	str	r3, [r4, #8]
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	071a      	lsls	r2, r3, #28
 80022ca:	d52f      	bpl.n	800232c <__swbuf_r+0x84>
 80022cc:	6923      	ldr	r3, [r4, #16]
 80022ce:	b36b      	cbz	r3, 800232c <__swbuf_r+0x84>
 80022d0:	6923      	ldr	r3, [r4, #16]
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	1ac0      	subs	r0, r0, r3
 80022d6:	6963      	ldr	r3, [r4, #20]
 80022d8:	b2f6      	uxtb	r6, r6
 80022da:	4283      	cmp	r3, r0
 80022dc:	4637      	mov	r7, r6
 80022de:	dc04      	bgt.n	80022ea <__swbuf_r+0x42>
 80022e0:	4621      	mov	r1, r4
 80022e2:	4628      	mov	r0, r5
 80022e4:	f000 f926 	bl	8002534 <_fflush_r>
 80022e8:	bb30      	cbnz	r0, 8002338 <__swbuf_r+0x90>
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60a3      	str	r3, [r4, #8]
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	6022      	str	r2, [r4, #0]
 80022f6:	701e      	strb	r6, [r3, #0]
 80022f8:	6963      	ldr	r3, [r4, #20]
 80022fa:	3001      	adds	r0, #1
 80022fc:	4283      	cmp	r3, r0
 80022fe:	d004      	beq.n	800230a <__swbuf_r+0x62>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	07db      	lsls	r3, r3, #31
 8002304:	d506      	bpl.n	8002314 <__swbuf_r+0x6c>
 8002306:	2e0a      	cmp	r6, #10
 8002308:	d104      	bne.n	8002314 <__swbuf_r+0x6c>
 800230a:	4621      	mov	r1, r4
 800230c:	4628      	mov	r0, r5
 800230e:	f000 f911 	bl	8002534 <_fflush_r>
 8002312:	b988      	cbnz	r0, 8002338 <__swbuf_r+0x90>
 8002314:	4638      	mov	r0, r7
 8002316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <__swbuf_r+0x9c>)
 800231a:	429c      	cmp	r4, r3
 800231c:	d101      	bne.n	8002322 <__swbuf_r+0x7a>
 800231e:	68ac      	ldr	r4, [r5, #8]
 8002320:	e7cf      	b.n	80022c2 <__swbuf_r+0x1a>
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <__swbuf_r+0xa0>)
 8002324:	429c      	cmp	r4, r3
 8002326:	bf08      	it	eq
 8002328:	68ec      	ldreq	r4, [r5, #12]
 800232a:	e7ca      	b.n	80022c2 <__swbuf_r+0x1a>
 800232c:	4621      	mov	r1, r4
 800232e:	4628      	mov	r0, r5
 8002330:	f000 f80c 	bl	800234c <__swsetup_r>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0cb      	beq.n	80022d0 <__swbuf_r+0x28>
 8002338:	f04f 37ff 	mov.w	r7, #4294967295
 800233c:	e7ea      	b.n	8002314 <__swbuf_r+0x6c>
 800233e:	bf00      	nop
 8002340:	08002d14 	.word	0x08002d14
 8002344:	08002d34 	.word	0x08002d34
 8002348:	08002cf4 	.word	0x08002cf4

0800234c <__swsetup_r>:
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <__swsetup_r+0xcc>)
 800234e:	b570      	push	{r4, r5, r6, lr}
 8002350:	681d      	ldr	r5, [r3, #0]
 8002352:	4606      	mov	r6, r0
 8002354:	460c      	mov	r4, r1
 8002356:	b125      	cbz	r5, 8002362 <__swsetup_r+0x16>
 8002358:	69ab      	ldr	r3, [r5, #24]
 800235a:	b913      	cbnz	r3, 8002362 <__swsetup_r+0x16>
 800235c:	4628      	mov	r0, r5
 800235e:	f000 f97d 	bl	800265c <__sinit>
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <__swsetup_r+0xd0>)
 8002364:	429c      	cmp	r4, r3
 8002366:	d10f      	bne.n	8002388 <__swsetup_r+0x3c>
 8002368:	686c      	ldr	r4, [r5, #4]
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002370:	0719      	lsls	r1, r3, #28
 8002372:	d42c      	bmi.n	80023ce <__swsetup_r+0x82>
 8002374:	06dd      	lsls	r5, r3, #27
 8002376:	d411      	bmi.n	800239c <__swsetup_r+0x50>
 8002378:	2309      	movs	r3, #9
 800237a:	6033      	str	r3, [r6, #0]
 800237c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002380:	81a3      	strh	r3, [r4, #12]
 8002382:	f04f 30ff 	mov.w	r0, #4294967295
 8002386:	e03e      	b.n	8002406 <__swsetup_r+0xba>
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <__swsetup_r+0xd4>)
 800238a:	429c      	cmp	r4, r3
 800238c:	d101      	bne.n	8002392 <__swsetup_r+0x46>
 800238e:	68ac      	ldr	r4, [r5, #8]
 8002390:	e7eb      	b.n	800236a <__swsetup_r+0x1e>
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <__swsetup_r+0xd8>)
 8002394:	429c      	cmp	r4, r3
 8002396:	bf08      	it	eq
 8002398:	68ec      	ldreq	r4, [r5, #12]
 800239a:	e7e6      	b.n	800236a <__swsetup_r+0x1e>
 800239c:	0758      	lsls	r0, r3, #29
 800239e:	d512      	bpl.n	80023c6 <__swsetup_r+0x7a>
 80023a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023a2:	b141      	cbz	r1, 80023b6 <__swsetup_r+0x6a>
 80023a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023a8:	4299      	cmp	r1, r3
 80023aa:	d002      	beq.n	80023b2 <__swsetup_r+0x66>
 80023ac:	4630      	mov	r0, r6
 80023ae:	f000 fa5b 	bl	8002868 <_free_r>
 80023b2:	2300      	movs	r3, #0
 80023b4:	6363      	str	r3, [r4, #52]	; 0x34
 80023b6:	89a3      	ldrh	r3, [r4, #12]
 80023b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023bc:	81a3      	strh	r3, [r4, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	6063      	str	r3, [r4, #4]
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	81a3      	strh	r3, [r4, #12]
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	b94b      	cbnz	r3, 80023e6 <__swsetup_r+0x9a>
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d003      	beq.n	80023e6 <__swsetup_r+0x9a>
 80023de:	4621      	mov	r1, r4
 80023e0:	4630      	mov	r0, r6
 80023e2:	f000 fa01 	bl	80027e8 <__smakebuf_r>
 80023e6:	89a0      	ldrh	r0, [r4, #12]
 80023e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023ec:	f010 0301 	ands.w	r3, r0, #1
 80023f0:	d00a      	beq.n	8002408 <__swsetup_r+0xbc>
 80023f2:	2300      	movs	r3, #0
 80023f4:	60a3      	str	r3, [r4, #8]
 80023f6:	6963      	ldr	r3, [r4, #20]
 80023f8:	425b      	negs	r3, r3
 80023fa:	61a3      	str	r3, [r4, #24]
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	b943      	cbnz	r3, 8002412 <__swsetup_r+0xc6>
 8002400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002404:	d1ba      	bne.n	800237c <__swsetup_r+0x30>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	0781      	lsls	r1, r0, #30
 800240a:	bf58      	it	pl
 800240c:	6963      	ldrpl	r3, [r4, #20]
 800240e:	60a3      	str	r3, [r4, #8]
 8002410:	e7f4      	b.n	80023fc <__swsetup_r+0xb0>
 8002412:	2000      	movs	r0, #0
 8002414:	e7f7      	b.n	8002406 <__swsetup_r+0xba>
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c
 800241c:	08002d14 	.word	0x08002d14
 8002420:	08002d34 	.word	0x08002d34
 8002424:	08002cf4 	.word	0x08002cf4

08002428 <__sflush_r>:
 8002428:	898a      	ldrh	r2, [r1, #12]
 800242a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242e:	4605      	mov	r5, r0
 8002430:	0710      	lsls	r0, r2, #28
 8002432:	460c      	mov	r4, r1
 8002434:	d458      	bmi.n	80024e8 <__sflush_r+0xc0>
 8002436:	684b      	ldr	r3, [r1, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	dc05      	bgt.n	8002448 <__sflush_r+0x20>
 800243c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	dc02      	bgt.n	8002448 <__sflush_r+0x20>
 8002442:	2000      	movs	r0, #0
 8002444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800244a:	2e00      	cmp	r6, #0
 800244c:	d0f9      	beq.n	8002442 <__sflush_r+0x1a>
 800244e:	2300      	movs	r3, #0
 8002450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002454:	682f      	ldr	r7, [r5, #0]
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	d032      	beq.n	80024c0 <__sflush_r+0x98>
 800245a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	075a      	lsls	r2, r3, #29
 8002460:	d505      	bpl.n	800246e <__sflush_r+0x46>
 8002462:	6863      	ldr	r3, [r4, #4]
 8002464:	1ac0      	subs	r0, r0, r3
 8002466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002468:	b10b      	cbz	r3, 800246e <__sflush_r+0x46>
 800246a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800246c:	1ac0      	subs	r0, r0, r3
 800246e:	2300      	movs	r3, #0
 8002470:	4602      	mov	r2, r0
 8002472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002474:	6a21      	ldr	r1, [r4, #32]
 8002476:	4628      	mov	r0, r5
 8002478:	47b0      	blx	r6
 800247a:	1c43      	adds	r3, r0, #1
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	d106      	bne.n	800248e <__sflush_r+0x66>
 8002480:	6829      	ldr	r1, [r5, #0]
 8002482:	291d      	cmp	r1, #29
 8002484:	d82c      	bhi.n	80024e0 <__sflush_r+0xb8>
 8002486:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <__sflush_r+0x108>)
 8002488:	40ca      	lsrs	r2, r1
 800248a:	07d6      	lsls	r6, r2, #31
 800248c:	d528      	bpl.n	80024e0 <__sflush_r+0xb8>
 800248e:	2200      	movs	r2, #0
 8002490:	6062      	str	r2, [r4, #4]
 8002492:	04d9      	lsls	r1, r3, #19
 8002494:	6922      	ldr	r2, [r4, #16]
 8002496:	6022      	str	r2, [r4, #0]
 8002498:	d504      	bpl.n	80024a4 <__sflush_r+0x7c>
 800249a:	1c42      	adds	r2, r0, #1
 800249c:	d101      	bne.n	80024a2 <__sflush_r+0x7a>
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	b903      	cbnz	r3, 80024a4 <__sflush_r+0x7c>
 80024a2:	6560      	str	r0, [r4, #84]	; 0x54
 80024a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024a6:	602f      	str	r7, [r5, #0]
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d0ca      	beq.n	8002442 <__sflush_r+0x1a>
 80024ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024b0:	4299      	cmp	r1, r3
 80024b2:	d002      	beq.n	80024ba <__sflush_r+0x92>
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 f9d7 	bl	8002868 <_free_r>
 80024ba:	2000      	movs	r0, #0
 80024bc:	6360      	str	r0, [r4, #52]	; 0x34
 80024be:	e7c1      	b.n	8002444 <__sflush_r+0x1c>
 80024c0:	6a21      	ldr	r1, [r4, #32]
 80024c2:	2301      	movs	r3, #1
 80024c4:	4628      	mov	r0, r5
 80024c6:	47b0      	blx	r6
 80024c8:	1c41      	adds	r1, r0, #1
 80024ca:	d1c7      	bne.n	800245c <__sflush_r+0x34>
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0c4      	beq.n	800245c <__sflush_r+0x34>
 80024d2:	2b1d      	cmp	r3, #29
 80024d4:	d001      	beq.n	80024da <__sflush_r+0xb2>
 80024d6:	2b16      	cmp	r3, #22
 80024d8:	d101      	bne.n	80024de <__sflush_r+0xb6>
 80024da:	602f      	str	r7, [r5, #0]
 80024dc:	e7b1      	b.n	8002442 <__sflush_r+0x1a>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	e7ad      	b.n	8002444 <__sflush_r+0x1c>
 80024e8:	690f      	ldr	r7, [r1, #16]
 80024ea:	2f00      	cmp	r7, #0
 80024ec:	d0a9      	beq.n	8002442 <__sflush_r+0x1a>
 80024ee:	0793      	lsls	r3, r2, #30
 80024f0:	680e      	ldr	r6, [r1, #0]
 80024f2:	bf08      	it	eq
 80024f4:	694b      	ldreq	r3, [r1, #20]
 80024f6:	600f      	str	r7, [r1, #0]
 80024f8:	bf18      	it	ne
 80024fa:	2300      	movne	r3, #0
 80024fc:	eba6 0807 	sub.w	r8, r6, r7
 8002500:	608b      	str	r3, [r1, #8]
 8002502:	f1b8 0f00 	cmp.w	r8, #0
 8002506:	dd9c      	ble.n	8002442 <__sflush_r+0x1a>
 8002508:	6a21      	ldr	r1, [r4, #32]
 800250a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800250c:	4643      	mov	r3, r8
 800250e:	463a      	mov	r2, r7
 8002510:	4628      	mov	r0, r5
 8002512:	47b0      	blx	r6
 8002514:	2800      	cmp	r0, #0
 8002516:	dc06      	bgt.n	8002526 <__sflush_r+0xfe>
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	e78e      	b.n	8002444 <__sflush_r+0x1c>
 8002526:	4407      	add	r7, r0
 8002528:	eba8 0800 	sub.w	r8, r8, r0
 800252c:	e7e9      	b.n	8002502 <__sflush_r+0xda>
 800252e:	bf00      	nop
 8002530:	20400001 	.word	0x20400001

08002534 <_fflush_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	4605      	mov	r5, r0
 800253a:	460c      	mov	r4, r1
 800253c:	b913      	cbnz	r3, 8002544 <_fflush_r+0x10>
 800253e:	2500      	movs	r5, #0
 8002540:	4628      	mov	r0, r5
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	b118      	cbz	r0, 800254e <_fflush_r+0x1a>
 8002546:	6983      	ldr	r3, [r0, #24]
 8002548:	b90b      	cbnz	r3, 800254e <_fflush_r+0x1a>
 800254a:	f000 f887 	bl	800265c <__sinit>
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <_fflush_r+0x6c>)
 8002550:	429c      	cmp	r4, r3
 8002552:	d11b      	bne.n	800258c <_fflush_r+0x58>
 8002554:	686c      	ldr	r4, [r5, #4]
 8002556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ef      	beq.n	800253e <_fflush_r+0xa>
 800255e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002560:	07d0      	lsls	r0, r2, #31
 8002562:	d404      	bmi.n	800256e <_fflush_r+0x3a>
 8002564:	0599      	lsls	r1, r3, #22
 8002566:	d402      	bmi.n	800256e <_fflush_r+0x3a>
 8002568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800256a:	f000 f915 	bl	8002798 <__retarget_lock_acquire_recursive>
 800256e:	4628      	mov	r0, r5
 8002570:	4621      	mov	r1, r4
 8002572:	f7ff ff59 	bl	8002428 <__sflush_r>
 8002576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002578:	07da      	lsls	r2, r3, #31
 800257a:	4605      	mov	r5, r0
 800257c:	d4e0      	bmi.n	8002540 <_fflush_r+0xc>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	059b      	lsls	r3, r3, #22
 8002582:	d4dd      	bmi.n	8002540 <_fflush_r+0xc>
 8002584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002586:	f000 f908 	bl	800279a <__retarget_lock_release_recursive>
 800258a:	e7d9      	b.n	8002540 <_fflush_r+0xc>
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <_fflush_r+0x70>)
 800258e:	429c      	cmp	r4, r3
 8002590:	d101      	bne.n	8002596 <_fflush_r+0x62>
 8002592:	68ac      	ldr	r4, [r5, #8]
 8002594:	e7df      	b.n	8002556 <_fflush_r+0x22>
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <_fflush_r+0x74>)
 8002598:	429c      	cmp	r4, r3
 800259a:	bf08      	it	eq
 800259c:	68ec      	ldreq	r4, [r5, #12]
 800259e:	e7da      	b.n	8002556 <_fflush_r+0x22>
 80025a0:	08002d14 	.word	0x08002d14
 80025a4:	08002d34 	.word	0x08002d34
 80025a8:	08002cf4 	.word	0x08002cf4

080025ac <std>:
 80025ac:	2300      	movs	r3, #0
 80025ae:	b510      	push	{r4, lr}
 80025b0:	4604      	mov	r4, r0
 80025b2:	e9c0 3300 	strd	r3, r3, [r0]
 80025b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ba:	6083      	str	r3, [r0, #8]
 80025bc:	8181      	strh	r1, [r0, #12]
 80025be:	6643      	str	r3, [r0, #100]	; 0x64
 80025c0:	81c2      	strh	r2, [r0, #14]
 80025c2:	6183      	str	r3, [r0, #24]
 80025c4:	4619      	mov	r1, r3
 80025c6:	2208      	movs	r2, #8
 80025c8:	305c      	adds	r0, #92	; 0x5c
 80025ca:	f7ff fdef 	bl	80021ac <memset>
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <std+0x38>)
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <std+0x3c>)
 80025d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <std+0x40>)
 80025d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <std+0x44>)
 80025dc:	6224      	str	r4, [r4, #32]
 80025de:	6323      	str	r3, [r4, #48]	; 0x30
 80025e0:	bd10      	pop	{r4, pc}
 80025e2:	bf00      	nop
 80025e4:	08002a49 	.word	0x08002a49
 80025e8:	08002a6b 	.word	0x08002a6b
 80025ec:	08002aa3 	.word	0x08002aa3
 80025f0:	08002ac7 	.word	0x08002ac7

080025f4 <_cleanup_r>:
 80025f4:	4901      	ldr	r1, [pc, #4]	; (80025fc <_cleanup_r+0x8>)
 80025f6:	f000 b8af 	b.w	8002758 <_fwalk_reent>
 80025fa:	bf00      	nop
 80025fc:	08002535 	.word	0x08002535

08002600 <__sfmoreglue>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	2268      	movs	r2, #104	; 0x68
 8002604:	1e4d      	subs	r5, r1, #1
 8002606:	4355      	muls	r5, r2
 8002608:	460e      	mov	r6, r1
 800260a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800260e:	f000 f997 	bl	8002940 <_malloc_r>
 8002612:	4604      	mov	r4, r0
 8002614:	b140      	cbz	r0, 8002628 <__sfmoreglue+0x28>
 8002616:	2100      	movs	r1, #0
 8002618:	e9c0 1600 	strd	r1, r6, [r0]
 800261c:	300c      	adds	r0, #12
 800261e:	60a0      	str	r0, [r4, #8]
 8002620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002624:	f7ff fdc2 	bl	80021ac <memset>
 8002628:	4620      	mov	r0, r4
 800262a:	bd70      	pop	{r4, r5, r6, pc}

0800262c <__sfp_lock_acquire>:
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <__sfp_lock_acquire+0x8>)
 800262e:	f000 b8b3 	b.w	8002798 <__retarget_lock_acquire_recursive>
 8002632:	bf00      	nop
 8002634:	20000095 	.word	0x20000095

08002638 <__sfp_lock_release>:
 8002638:	4801      	ldr	r0, [pc, #4]	; (8002640 <__sfp_lock_release+0x8>)
 800263a:	f000 b8ae 	b.w	800279a <__retarget_lock_release_recursive>
 800263e:	bf00      	nop
 8002640:	20000095 	.word	0x20000095

08002644 <__sinit_lock_acquire>:
 8002644:	4801      	ldr	r0, [pc, #4]	; (800264c <__sinit_lock_acquire+0x8>)
 8002646:	f000 b8a7 	b.w	8002798 <__retarget_lock_acquire_recursive>
 800264a:	bf00      	nop
 800264c:	20000096 	.word	0x20000096

08002650 <__sinit_lock_release>:
 8002650:	4801      	ldr	r0, [pc, #4]	; (8002658 <__sinit_lock_release+0x8>)
 8002652:	f000 b8a2 	b.w	800279a <__retarget_lock_release_recursive>
 8002656:	bf00      	nop
 8002658:	20000096 	.word	0x20000096

0800265c <__sinit>:
 800265c:	b510      	push	{r4, lr}
 800265e:	4604      	mov	r4, r0
 8002660:	f7ff fff0 	bl	8002644 <__sinit_lock_acquire>
 8002664:	69a3      	ldr	r3, [r4, #24]
 8002666:	b11b      	cbz	r3, 8002670 <__sinit+0x14>
 8002668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266c:	f7ff bff0 	b.w	8002650 <__sinit_lock_release>
 8002670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002674:	6523      	str	r3, [r4, #80]	; 0x50
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <__sinit+0x68>)
 8002678:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <__sinit+0x6c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	62a2      	str	r2, [r4, #40]	; 0x28
 800267e:	42a3      	cmp	r3, r4
 8002680:	bf04      	itt	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	61a3      	streq	r3, [r4, #24]
 8002686:	4620      	mov	r0, r4
 8002688:	f000 f820 	bl	80026cc <__sfp>
 800268c:	6060      	str	r0, [r4, #4]
 800268e:	4620      	mov	r0, r4
 8002690:	f000 f81c 	bl	80026cc <__sfp>
 8002694:	60a0      	str	r0, [r4, #8]
 8002696:	4620      	mov	r0, r4
 8002698:	f000 f818 	bl	80026cc <__sfp>
 800269c:	2200      	movs	r2, #0
 800269e:	60e0      	str	r0, [r4, #12]
 80026a0:	2104      	movs	r1, #4
 80026a2:	6860      	ldr	r0, [r4, #4]
 80026a4:	f7ff ff82 	bl	80025ac <std>
 80026a8:	68a0      	ldr	r0, [r4, #8]
 80026aa:	2201      	movs	r2, #1
 80026ac:	2109      	movs	r1, #9
 80026ae:	f7ff ff7d 	bl	80025ac <std>
 80026b2:	68e0      	ldr	r0, [r4, #12]
 80026b4:	2202      	movs	r2, #2
 80026b6:	2112      	movs	r1, #18
 80026b8:	f7ff ff78 	bl	80025ac <std>
 80026bc:	2301      	movs	r3, #1
 80026be:	61a3      	str	r3, [r4, #24]
 80026c0:	e7d2      	b.n	8002668 <__sinit+0xc>
 80026c2:	bf00      	nop
 80026c4:	08002cf0 	.word	0x08002cf0
 80026c8:	080025f5 	.word	0x080025f5

080026cc <__sfp>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	4607      	mov	r7, r0
 80026d0:	f7ff ffac 	bl	800262c <__sfp_lock_acquire>
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <__sfp+0x84>)
 80026d6:	681e      	ldr	r6, [r3, #0]
 80026d8:	69b3      	ldr	r3, [r6, #24]
 80026da:	b913      	cbnz	r3, 80026e2 <__sfp+0x16>
 80026dc:	4630      	mov	r0, r6
 80026de:	f7ff ffbd 	bl	800265c <__sinit>
 80026e2:	3648      	adds	r6, #72	; 0x48
 80026e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	d503      	bpl.n	80026f4 <__sfp+0x28>
 80026ec:	6833      	ldr	r3, [r6, #0]
 80026ee:	b30b      	cbz	r3, 8002734 <__sfp+0x68>
 80026f0:	6836      	ldr	r6, [r6, #0]
 80026f2:	e7f7      	b.n	80026e4 <__sfp+0x18>
 80026f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026f8:	b9d5      	cbnz	r5, 8002730 <__sfp+0x64>
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <__sfp+0x88>)
 80026fc:	60e3      	str	r3, [r4, #12]
 80026fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002702:	6665      	str	r5, [r4, #100]	; 0x64
 8002704:	f000 f847 	bl	8002796 <__retarget_lock_init_recursive>
 8002708:	f7ff ff96 	bl	8002638 <__sfp_lock_release>
 800270c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002714:	6025      	str	r5, [r4, #0]
 8002716:	61a5      	str	r5, [r4, #24]
 8002718:	2208      	movs	r2, #8
 800271a:	4629      	mov	r1, r5
 800271c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002720:	f7ff fd44 	bl	80021ac <memset>
 8002724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800272c:	4620      	mov	r0, r4
 800272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002730:	3468      	adds	r4, #104	; 0x68
 8002732:	e7d9      	b.n	80026e8 <__sfp+0x1c>
 8002734:	2104      	movs	r1, #4
 8002736:	4638      	mov	r0, r7
 8002738:	f7ff ff62 	bl	8002600 <__sfmoreglue>
 800273c:	4604      	mov	r4, r0
 800273e:	6030      	str	r0, [r6, #0]
 8002740:	2800      	cmp	r0, #0
 8002742:	d1d5      	bne.n	80026f0 <__sfp+0x24>
 8002744:	f7ff ff78 	bl	8002638 <__sfp_lock_release>
 8002748:	230c      	movs	r3, #12
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	e7ee      	b.n	800272c <__sfp+0x60>
 800274e:	bf00      	nop
 8002750:	08002cf0 	.word	0x08002cf0
 8002754:	ffff0001 	.word	0xffff0001

08002758 <_fwalk_reent>:
 8002758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800275c:	4606      	mov	r6, r0
 800275e:	4688      	mov	r8, r1
 8002760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002764:	2700      	movs	r7, #0
 8002766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800276a:	f1b9 0901 	subs.w	r9, r9, #1
 800276e:	d505      	bpl.n	800277c <_fwalk_reent+0x24>
 8002770:	6824      	ldr	r4, [r4, #0]
 8002772:	2c00      	cmp	r4, #0
 8002774:	d1f7      	bne.n	8002766 <_fwalk_reent+0xe>
 8002776:	4638      	mov	r0, r7
 8002778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277c:	89ab      	ldrh	r3, [r5, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d907      	bls.n	8002792 <_fwalk_reent+0x3a>
 8002782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002786:	3301      	adds	r3, #1
 8002788:	d003      	beq.n	8002792 <_fwalk_reent+0x3a>
 800278a:	4629      	mov	r1, r5
 800278c:	4630      	mov	r0, r6
 800278e:	47c0      	blx	r8
 8002790:	4307      	orrs	r7, r0
 8002792:	3568      	adds	r5, #104	; 0x68
 8002794:	e7e9      	b.n	800276a <_fwalk_reent+0x12>

08002796 <__retarget_lock_init_recursive>:
 8002796:	4770      	bx	lr

08002798 <__retarget_lock_acquire_recursive>:
 8002798:	4770      	bx	lr

0800279a <__retarget_lock_release_recursive>:
 800279a:	4770      	bx	lr

0800279c <__swhatbuf_r>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	460e      	mov	r6, r1
 80027a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a4:	2900      	cmp	r1, #0
 80027a6:	b096      	sub	sp, #88	; 0x58
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	da08      	bge.n	80027c0 <__swhatbuf_r+0x24>
 80027ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	602a      	str	r2, [r5, #0]
 80027b6:	061a      	lsls	r2, r3, #24
 80027b8:	d410      	bmi.n	80027dc <__swhatbuf_r+0x40>
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027be:	e00e      	b.n	80027de <__swhatbuf_r+0x42>
 80027c0:	466a      	mov	r2, sp
 80027c2:	f000 f9a7 	bl	8002b14 <_fstat_r>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	dbf1      	blt.n	80027ae <__swhatbuf_r+0x12>
 80027ca:	9a01      	ldr	r2, [sp, #4]
 80027cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027d4:	425a      	negs	r2, r3
 80027d6:	415a      	adcs	r2, r3
 80027d8:	602a      	str	r2, [r5, #0]
 80027da:	e7ee      	b.n	80027ba <__swhatbuf_r+0x1e>
 80027dc:	2340      	movs	r3, #64	; 0x40
 80027de:	2000      	movs	r0, #0
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	b016      	add	sp, #88	; 0x58
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080027e8 <__smakebuf_r>:
 80027e8:	898b      	ldrh	r3, [r1, #12]
 80027ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ec:	079d      	lsls	r5, r3, #30
 80027ee:	4606      	mov	r6, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	d507      	bpl.n	8002804 <__smakebuf_r+0x1c>
 80027f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	2301      	movs	r3, #1
 80027fe:	6163      	str	r3, [r4, #20]
 8002800:	b002      	add	sp, #8
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	ab01      	add	r3, sp, #4
 8002806:	466a      	mov	r2, sp
 8002808:	f7ff ffc8 	bl	800279c <__swhatbuf_r>
 800280c:	9900      	ldr	r1, [sp, #0]
 800280e:	4605      	mov	r5, r0
 8002810:	4630      	mov	r0, r6
 8002812:	f000 f895 	bl	8002940 <_malloc_r>
 8002816:	b948      	cbnz	r0, 800282c <__smakebuf_r+0x44>
 8002818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800281c:	059a      	lsls	r2, r3, #22
 800281e:	d4ef      	bmi.n	8002800 <__smakebuf_r+0x18>
 8002820:	f023 0303 	bic.w	r3, r3, #3
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	e7e3      	b.n	80027f4 <__smakebuf_r+0xc>
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <__smakebuf_r+0x7c>)
 800282e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	6020      	str	r0, [r4, #0]
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	81a3      	strh	r3, [r4, #12]
 800283a:	9b00      	ldr	r3, [sp, #0]
 800283c:	6163      	str	r3, [r4, #20]
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	6120      	str	r0, [r4, #16]
 8002842:	b15b      	cbz	r3, 800285c <__smakebuf_r+0x74>
 8002844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002848:	4630      	mov	r0, r6
 800284a:	f000 f975 	bl	8002b38 <_isatty_r>
 800284e:	b128      	cbz	r0, 800285c <__smakebuf_r+0x74>
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	81a3      	strh	r3, [r4, #12]
 800285c:	89a0      	ldrh	r0, [r4, #12]
 800285e:	4305      	orrs	r5, r0
 8002860:	81a5      	strh	r5, [r4, #12]
 8002862:	e7cd      	b.n	8002800 <__smakebuf_r+0x18>
 8002864:	080025f5 	.word	0x080025f5

08002868 <_free_r>:
 8002868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800286a:	2900      	cmp	r1, #0
 800286c:	d044      	beq.n	80028f8 <_free_r+0x90>
 800286e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002872:	9001      	str	r0, [sp, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f1a1 0404 	sub.w	r4, r1, #4
 800287a:	bfb8      	it	lt
 800287c:	18e4      	addlt	r4, r4, r3
 800287e:	f000 f97d 	bl	8002b7c <__malloc_lock>
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <_free_r+0x94>)
 8002884:	9801      	ldr	r0, [sp, #4]
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	b933      	cbnz	r3, 8002898 <_free_r+0x30>
 800288a:	6063      	str	r3, [r4, #4]
 800288c:	6014      	str	r4, [r2, #0]
 800288e:	b003      	add	sp, #12
 8002890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002894:	f000 b978 	b.w	8002b88 <__malloc_unlock>
 8002898:	42a3      	cmp	r3, r4
 800289a:	d908      	bls.n	80028ae <_free_r+0x46>
 800289c:	6825      	ldr	r5, [r4, #0]
 800289e:	1961      	adds	r1, r4, r5
 80028a0:	428b      	cmp	r3, r1
 80028a2:	bf01      	itttt	eq
 80028a4:	6819      	ldreq	r1, [r3, #0]
 80028a6:	685b      	ldreq	r3, [r3, #4]
 80028a8:	1949      	addeq	r1, r1, r5
 80028aa:	6021      	streq	r1, [r4, #0]
 80028ac:	e7ed      	b.n	800288a <_free_r+0x22>
 80028ae:	461a      	mov	r2, r3
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	b10b      	cbz	r3, 80028b8 <_free_r+0x50>
 80028b4:	42a3      	cmp	r3, r4
 80028b6:	d9fa      	bls.n	80028ae <_free_r+0x46>
 80028b8:	6811      	ldr	r1, [r2, #0]
 80028ba:	1855      	adds	r5, r2, r1
 80028bc:	42a5      	cmp	r5, r4
 80028be:	d10b      	bne.n	80028d8 <_free_r+0x70>
 80028c0:	6824      	ldr	r4, [r4, #0]
 80028c2:	4421      	add	r1, r4
 80028c4:	1854      	adds	r4, r2, r1
 80028c6:	42a3      	cmp	r3, r4
 80028c8:	6011      	str	r1, [r2, #0]
 80028ca:	d1e0      	bne.n	800288e <_free_r+0x26>
 80028cc:	681c      	ldr	r4, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	6053      	str	r3, [r2, #4]
 80028d2:	4421      	add	r1, r4
 80028d4:	6011      	str	r1, [r2, #0]
 80028d6:	e7da      	b.n	800288e <_free_r+0x26>
 80028d8:	d902      	bls.n	80028e0 <_free_r+0x78>
 80028da:	230c      	movs	r3, #12
 80028dc:	6003      	str	r3, [r0, #0]
 80028de:	e7d6      	b.n	800288e <_free_r+0x26>
 80028e0:	6825      	ldr	r5, [r4, #0]
 80028e2:	1961      	adds	r1, r4, r5
 80028e4:	428b      	cmp	r3, r1
 80028e6:	bf04      	itt	eq
 80028e8:	6819      	ldreq	r1, [r3, #0]
 80028ea:	685b      	ldreq	r3, [r3, #4]
 80028ec:	6063      	str	r3, [r4, #4]
 80028ee:	bf04      	itt	eq
 80028f0:	1949      	addeq	r1, r1, r5
 80028f2:	6021      	streq	r1, [r4, #0]
 80028f4:	6054      	str	r4, [r2, #4]
 80028f6:	e7ca      	b.n	800288e <_free_r+0x26>
 80028f8:	b003      	add	sp, #12
 80028fa:	bd30      	pop	{r4, r5, pc}
 80028fc:	20000098 	.word	0x20000098

08002900 <sbrk_aligned>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4e0e      	ldr	r6, [pc, #56]	; (800293c <sbrk_aligned+0x3c>)
 8002904:	460c      	mov	r4, r1
 8002906:	6831      	ldr	r1, [r6, #0]
 8002908:	4605      	mov	r5, r0
 800290a:	b911      	cbnz	r1, 8002912 <sbrk_aligned+0x12>
 800290c:	f000 f88c 	bl	8002a28 <_sbrk_r>
 8002910:	6030      	str	r0, [r6, #0]
 8002912:	4621      	mov	r1, r4
 8002914:	4628      	mov	r0, r5
 8002916:	f000 f887 	bl	8002a28 <_sbrk_r>
 800291a:	1c43      	adds	r3, r0, #1
 800291c:	d00a      	beq.n	8002934 <sbrk_aligned+0x34>
 800291e:	1cc4      	adds	r4, r0, #3
 8002920:	f024 0403 	bic.w	r4, r4, #3
 8002924:	42a0      	cmp	r0, r4
 8002926:	d007      	beq.n	8002938 <sbrk_aligned+0x38>
 8002928:	1a21      	subs	r1, r4, r0
 800292a:	4628      	mov	r0, r5
 800292c:	f000 f87c 	bl	8002a28 <_sbrk_r>
 8002930:	3001      	adds	r0, #1
 8002932:	d101      	bne.n	8002938 <sbrk_aligned+0x38>
 8002934:	f04f 34ff 	mov.w	r4, #4294967295
 8002938:	4620      	mov	r0, r4
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	2000009c 	.word	0x2000009c

08002940 <_malloc_r>:
 8002940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002944:	1ccd      	adds	r5, r1, #3
 8002946:	f025 0503 	bic.w	r5, r5, #3
 800294a:	3508      	adds	r5, #8
 800294c:	2d0c      	cmp	r5, #12
 800294e:	bf38      	it	cc
 8002950:	250c      	movcc	r5, #12
 8002952:	2d00      	cmp	r5, #0
 8002954:	4607      	mov	r7, r0
 8002956:	db01      	blt.n	800295c <_malloc_r+0x1c>
 8002958:	42a9      	cmp	r1, r5
 800295a:	d905      	bls.n	8002968 <_malloc_r+0x28>
 800295c:	230c      	movs	r3, #12
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	2600      	movs	r6, #0
 8002962:	4630      	mov	r0, r6
 8002964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002968:	4e2e      	ldr	r6, [pc, #184]	; (8002a24 <_malloc_r+0xe4>)
 800296a:	f000 f907 	bl	8002b7c <__malloc_lock>
 800296e:	6833      	ldr	r3, [r6, #0]
 8002970:	461c      	mov	r4, r3
 8002972:	bb34      	cbnz	r4, 80029c2 <_malloc_r+0x82>
 8002974:	4629      	mov	r1, r5
 8002976:	4638      	mov	r0, r7
 8002978:	f7ff ffc2 	bl	8002900 <sbrk_aligned>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	4604      	mov	r4, r0
 8002980:	d14d      	bne.n	8002a1e <_malloc_r+0xde>
 8002982:	6834      	ldr	r4, [r6, #0]
 8002984:	4626      	mov	r6, r4
 8002986:	2e00      	cmp	r6, #0
 8002988:	d140      	bne.n	8002a0c <_malloc_r+0xcc>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4631      	mov	r1, r6
 800298e:	4638      	mov	r0, r7
 8002990:	eb04 0803 	add.w	r8, r4, r3
 8002994:	f000 f848 	bl	8002a28 <_sbrk_r>
 8002998:	4580      	cmp	r8, r0
 800299a:	d13a      	bne.n	8002a12 <_malloc_r+0xd2>
 800299c:	6821      	ldr	r1, [r4, #0]
 800299e:	3503      	adds	r5, #3
 80029a0:	1a6d      	subs	r5, r5, r1
 80029a2:	f025 0503 	bic.w	r5, r5, #3
 80029a6:	3508      	adds	r5, #8
 80029a8:	2d0c      	cmp	r5, #12
 80029aa:	bf38      	it	cc
 80029ac:	250c      	movcc	r5, #12
 80029ae:	4629      	mov	r1, r5
 80029b0:	4638      	mov	r0, r7
 80029b2:	f7ff ffa5 	bl	8002900 <sbrk_aligned>
 80029b6:	3001      	adds	r0, #1
 80029b8:	d02b      	beq.n	8002a12 <_malloc_r+0xd2>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	442b      	add	r3, r5
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	e00e      	b.n	80029e0 <_malloc_r+0xa0>
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	1b52      	subs	r2, r2, r5
 80029c6:	d41e      	bmi.n	8002a06 <_malloc_r+0xc6>
 80029c8:	2a0b      	cmp	r2, #11
 80029ca:	d916      	bls.n	80029fa <_malloc_r+0xba>
 80029cc:	1961      	adds	r1, r4, r5
 80029ce:	42a3      	cmp	r3, r4
 80029d0:	6025      	str	r5, [r4, #0]
 80029d2:	bf18      	it	ne
 80029d4:	6059      	strne	r1, [r3, #4]
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	bf08      	it	eq
 80029da:	6031      	streq	r1, [r6, #0]
 80029dc:	5162      	str	r2, [r4, r5]
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	4638      	mov	r0, r7
 80029e2:	f104 060b 	add.w	r6, r4, #11
 80029e6:	f000 f8cf 	bl	8002b88 <__malloc_unlock>
 80029ea:	f026 0607 	bic.w	r6, r6, #7
 80029ee:	1d23      	adds	r3, r4, #4
 80029f0:	1af2      	subs	r2, r6, r3
 80029f2:	d0b6      	beq.n	8002962 <_malloc_r+0x22>
 80029f4:	1b9b      	subs	r3, r3, r6
 80029f6:	50a3      	str	r3, [r4, r2]
 80029f8:	e7b3      	b.n	8002962 <_malloc_r+0x22>
 80029fa:	6862      	ldr	r2, [r4, #4]
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	bf0c      	ite	eq
 8002a00:	6032      	streq	r2, [r6, #0]
 8002a02:	605a      	strne	r2, [r3, #4]
 8002a04:	e7ec      	b.n	80029e0 <_malloc_r+0xa0>
 8002a06:	4623      	mov	r3, r4
 8002a08:	6864      	ldr	r4, [r4, #4]
 8002a0a:	e7b2      	b.n	8002972 <_malloc_r+0x32>
 8002a0c:	4634      	mov	r4, r6
 8002a0e:	6876      	ldr	r6, [r6, #4]
 8002a10:	e7b9      	b.n	8002986 <_malloc_r+0x46>
 8002a12:	230c      	movs	r3, #12
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4638      	mov	r0, r7
 8002a18:	f000 f8b6 	bl	8002b88 <__malloc_unlock>
 8002a1c:	e7a1      	b.n	8002962 <_malloc_r+0x22>
 8002a1e:	6025      	str	r5, [r4, #0]
 8002a20:	e7de      	b.n	80029e0 <_malloc_r+0xa0>
 8002a22:	bf00      	nop
 8002a24:	20000098 	.word	0x20000098

08002a28 <_sbrk_r>:
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	4d06      	ldr	r5, [pc, #24]	; (8002a44 <_sbrk_r+0x1c>)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4608      	mov	r0, r1
 8002a32:	602b      	str	r3, [r5, #0]
 8002a34:	f7fe fa28 	bl	8000e88 <_sbrk>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_sbrk_r+0x1a>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_sbrk_r+0x1a>
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	200000a0 	.word	0x200000a0

08002a48 <__sread>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a50:	f000 f8a0 	bl	8002b94 <_read_r>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	bfab      	itete	ge
 8002a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a5c:	181b      	addge	r3, r3, r0
 8002a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a62:	bfac      	ite	ge
 8002a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a66:	81a3      	strhlt	r3, [r4, #12]
 8002a68:	bd10      	pop	{r4, pc}

08002a6a <__swrite>:
 8002a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6e:	461f      	mov	r7, r3
 8002a70:	898b      	ldrh	r3, [r1, #12]
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	4605      	mov	r5, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	4616      	mov	r6, r2
 8002a7a:	d505      	bpl.n	8002a88 <__swrite+0x1e>
 8002a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a80:	2302      	movs	r3, #2
 8002a82:	2200      	movs	r2, #0
 8002a84:	f000 f868 	bl	8002b58 <_lseek_r>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	4632      	mov	r2, r6
 8002a96:	463b      	mov	r3, r7
 8002a98:	4628      	mov	r0, r5
 8002a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9e:	f000 b817 	b.w	8002ad0 <_write_r>

08002aa2 <__sseek>:
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aaa:	f000 f855 	bl	8002b58 <_lseek_r>
 8002aae:	1c43      	adds	r3, r0, #1
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	bf15      	itete	ne
 8002ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002abe:	81a3      	strheq	r3, [r4, #12]
 8002ac0:	bf18      	it	ne
 8002ac2:	81a3      	strhne	r3, [r4, #12]
 8002ac4:	bd10      	pop	{r4, pc}

08002ac6 <__sclose>:
 8002ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aca:	f000 b813 	b.w	8002af4 <_close_r>
	...

08002ad0 <_write_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4d07      	ldr	r5, [pc, #28]	; (8002af0 <_write_r+0x20>)
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	4611      	mov	r1, r2
 8002ada:	2200      	movs	r2, #0
 8002adc:	602a      	str	r2, [r5, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f7fd fed4 	bl	800088c <_write>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_write_r+0x1e>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_write_r+0x1e>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	200000a0 	.word	0x200000a0

08002af4 <_close_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4d06      	ldr	r5, [pc, #24]	; (8002b10 <_close_r+0x1c>)
 8002af8:	2300      	movs	r3, #0
 8002afa:	4604      	mov	r4, r0
 8002afc:	4608      	mov	r0, r1
 8002afe:	602b      	str	r3, [r5, #0]
 8002b00:	f7fe f98d 	bl	8000e1e <_close>
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d102      	bne.n	8002b0e <_close_r+0x1a>
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	b103      	cbz	r3, 8002b0e <_close_r+0x1a>
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	200000a0 	.word	0x200000a0

08002b14 <_fstat_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4d07      	ldr	r5, [pc, #28]	; (8002b34 <_fstat_r+0x20>)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	602b      	str	r3, [r5, #0]
 8002b22:	f7fe f988 	bl	8000e36 <_fstat>
 8002b26:	1c43      	adds	r3, r0, #1
 8002b28:	d102      	bne.n	8002b30 <_fstat_r+0x1c>
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	b103      	cbz	r3, 8002b30 <_fstat_r+0x1c>
 8002b2e:	6023      	str	r3, [r4, #0]
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
 8002b32:	bf00      	nop
 8002b34:	200000a0 	.word	0x200000a0

08002b38 <_isatty_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	4d06      	ldr	r5, [pc, #24]	; (8002b54 <_isatty_r+0x1c>)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	f7fe f987 	bl	8000e56 <_isatty>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d102      	bne.n	8002b52 <_isatty_r+0x1a>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	b103      	cbz	r3, 8002b52 <_isatty_r+0x1a>
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	200000a0 	.word	0x200000a0

08002b58 <_lseek_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4d07      	ldr	r5, [pc, #28]	; (8002b78 <_lseek_r+0x20>)
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	4608      	mov	r0, r1
 8002b60:	4611      	mov	r1, r2
 8002b62:	2200      	movs	r2, #0
 8002b64:	602a      	str	r2, [r5, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f7fe f980 	bl	8000e6c <_lseek>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_lseek_r+0x1e>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_lseek_r+0x1e>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	200000a0 	.word	0x200000a0

08002b7c <__malloc_lock>:
 8002b7c:	4801      	ldr	r0, [pc, #4]	; (8002b84 <__malloc_lock+0x8>)
 8002b7e:	f7ff be0b 	b.w	8002798 <__retarget_lock_acquire_recursive>
 8002b82:	bf00      	nop
 8002b84:	20000094 	.word	0x20000094

08002b88 <__malloc_unlock>:
 8002b88:	4801      	ldr	r0, [pc, #4]	; (8002b90 <__malloc_unlock+0x8>)
 8002b8a:	f7ff be06 	b.w	800279a <__retarget_lock_release_recursive>
 8002b8e:	bf00      	nop
 8002b90:	20000094 	.word	0x20000094

08002b94 <_read_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4d07      	ldr	r5, [pc, #28]	; (8002bb4 <_read_r+0x20>)
 8002b98:	4604      	mov	r4, r0
 8002b9a:	4608      	mov	r0, r1
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	602a      	str	r2, [r5, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f7fe f91e 	bl	8000de4 <_read>
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d102      	bne.n	8002bb2 <_read_r+0x1e>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	b103      	cbz	r3, 8002bb2 <_read_r+0x1e>
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
 8002bb4:	200000a0 	.word	0x200000a0

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
