
USAT_Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003260  08003260  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003268  08003268  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000014  08003284  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003284  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a3b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b6  00000000  00000000  00029a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204a5  00000000  00000000  0002c260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f2c  00000000  00000000  0004c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4627  00000000  00000000  00056631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ac58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  0011aca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031e8 	.word	0x080031e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080031e8 	.word	0x080031e8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <print>:


#include "main.h"

void print(unsigned char dat)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	///////0

	if((dat&0x1)==0x1)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <print+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4841      	ldr	r0, [pc, #260]	; (8000638 <print+0x120>)
 8000534:	f000 ff36 	bl	80013a4 <HAL_GPIO_WritePin>
 8000538:	e005      	b.n	8000546 <print+0x2e>

	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <print+0x120>)
 8000542:	f000 ff2f 	bl	80013a4 <HAL_GPIO_WritePin>
	}
	////////1
	if((dat&0x2)==0x2)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b00      	cmp	r3, #0
 800054e:	d005      	beq.n	800055c <print+0x44>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2108      	movs	r1, #8
 8000554:	4839      	ldr	r0, [pc, #228]	; (800063c <print+0x124>)
 8000556:	f000 ff25 	bl	80013a4 <HAL_GPIO_WritePin>
 800055a:	e004      	b.n	8000566 <print+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	4836      	ldr	r0, [pc, #216]	; (800063c <print+0x124>)
 8000562:	f000 ff1f 	bl	80013a4 <HAL_GPIO_WritePin>
	}
	////////2
	if((dat&0x4)==0x4)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <print+0x64>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4831      	ldr	r0, [pc, #196]	; (800063c <print+0x124>)
 8000576:	f000 ff15 	bl	80013a4 <HAL_GPIO_WritePin>
 800057a:	e004      	b.n	8000586 <print+0x6e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2120      	movs	r1, #32
 8000580:	482e      	ldr	r0, [pc, #184]	; (800063c <print+0x124>)
 8000582:	f000 ff0f 	bl	80013a4 <HAL_GPIO_WritePin>
		}
	////////3
	if((dat&0x8)==0x8)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <print+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2110      	movs	r1, #16
 8000594:	4829      	ldr	r0, [pc, #164]	; (800063c <print+0x124>)
 8000596:	f000 ff05 	bl	80013a4 <HAL_GPIO_WritePin>
 800059a:	e004      	b.n	80005a6 <print+0x8e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <print+0x124>)
 80005a2:	f000 feff 	bl	80013a4 <HAL_GPIO_WritePin>
		}
	////////4
	if((dat&0x10)==0x10)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 0310 	and.w	r3, r3, #16
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <print+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b6:	4821      	ldr	r0, [pc, #132]	; (800063c <print+0x124>)
 80005b8:	f000 fef4 	bl	80013a4 <HAL_GPIO_WritePin>
 80005bc:	e005      	b.n	80005ca <print+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	481d      	ldr	r0, [pc, #116]	; (800063c <print+0x124>)
 80005c6:	f000 feed 	bl	80013a4 <HAL_GPIO_WritePin>
		}
	////////5
	if((dat&0x20)==0x20)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <print+0xca>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	4817      	ldr	r0, [pc, #92]	; (8000638 <print+0x120>)
 80005dc:	f000 fee2 	bl	80013a4 <HAL_GPIO_WritePin>
 80005e0:	e005      	b.n	80005ee <print+0xd6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <print+0x120>)
 80005ea:	f000 fedb 	bl	80013a4 <HAL_GPIO_WritePin>
		}
	////////6
	if((dat&0x40)==0x40)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <print+0xee>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <print+0x120>)
 8000600:	f000 fed0 	bl	80013a4 <HAL_GPIO_WritePin>
 8000604:	e005      	b.n	8000612 <print+0xfa>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <print+0x120>)
 800060e:	f000 fec9 	bl	80013a4 <HAL_GPIO_WritePin>
		}
	////////7
	if((dat&0x80)==0x80)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	da05      	bge.n	8000626 <print+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <print+0x128>)
 8000620:	f000 fec0 	bl	80013a4 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
		}

}
 8000624:	e004      	b.n	8000630 <print+0x118>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <print+0x128>)
 800062c:	f000 feba 	bl	80013a4 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020000 	.word	0x40020000
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800

08000644 <lcd_cmd>:
void lcd_cmd(unsigned char cmd)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	print(cmd);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff61 	bl	8000518 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);//REG SELECT PIN
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <lcd_cmd+0x48>)
 800065c:	f000 fea2 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);//READ WRITE PIN
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <lcd_cmd+0x4c>)
 8000666:	f000 fe9d 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);// ENABLE PIN
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <lcd_cmd+0x4c>)
 8000670:	f000 fe98 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f000 fb39 	bl	8000cec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);// ENABLE PIN
 800067a:	2200      	movs	r2, #0
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <lcd_cmd+0x4c>)
 8000680:	f000 fe90 	bl	80013a4 <HAL_GPIO_WritePin>

}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020400 	.word	0x40020400
 8000690:	40020000 	.word	0x40020000

08000694 <lcd_data>:
void lcd_data(unsigned char mydat)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	print(mydat);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff39 	bl	8000518 <print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <lcd_data+0x48>)
 80006ac:	f000 fe7a 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <lcd_data+0x4c>)
 80006b6:	f000 fe75 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <lcd_data+0x4c>)
 80006c0:	f000 fe70 	bl	80013a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f000 fb11 	bl	8000cec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <lcd_data+0x4c>)
 80006d0:	f000 fe68 	bl	80013a4 <HAL_GPIO_WritePin>



}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020000 	.word	0x40020000

080006e4 <lcd_display>:
	lcd_cmd(0x01);
	lcd_cmd(0x0C);

}
void lcd_display(unsigned char *str,unsigned int length)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	for(int i=0;i<length;i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e009      	b.n	8000708 <lcd_display+0x24>
	{
		lcd_data(str[i]);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffc9 	bl	8000694 <lcd_data>
	for(int i=0;i<length;i++)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f1      	bhi.n	80006f4 <lcd_display+0x10>
	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fa71 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f855 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f8eb 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072e:	f000 f8bf 	bl	80008b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t len_of_data1 = strlen(dat);
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd64 	bl	8000204 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	80fb      	strh	r3, [r7, #6]
  uint16_t len_of_data3 = strlen(msg1);
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <main+0xa4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd5d 	bl	8000204 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	80bb      	strh	r3, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)dat, len_of_data1, HAL_MAX_DELAY);
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <main+0xa0>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <main+0xa8>)
 800075a:	f001 fcb0 	bl	80020be <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_cmd(0x01);
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff ff70 	bl	8000644 <lcd_cmd>
   lcd_display("WELCOME",7);
 8000764:	2107      	movs	r1, #7
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <main+0xac>)
 8000768:	f7ff ffbc 	bl	80006e4 <lcd_display>
  while (1)
  {
	  lcd_cmd(0x01);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff69 	bl	8000644 <lcd_cmd>
	     lcd_display("WELCOME",7);
 8000772:	2107      	movs	r1, #7
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <main+0xac>)
 8000776:	f7ff ffb5 	bl	80006e4 <lcd_display>
	  char d1[3]={0};
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <main+0xb0>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	803b      	strh	r3, [r7, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	70bb      	strb	r3, [r7, #2]

	  HAL_UART_Receive(&huart2, d1, 2, HAL_MAX_DELAY);
 8000784:	4639      	mov	r1, r7
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2202      	movs	r2, #2
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <main+0xa8>)
 800078e:	f001 fd28 	bl	80021e2 <HAL_UART_Receive>
	  if(d1[0] == 'B')
 8000792:	783b      	ldrb	r3, [r7, #0]
 8000794:	2b42      	cmp	r3, #66	; 0x42
 8000796:	d1e9      	bne.n	800076c <main+0x50>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000798:	2120      	movs	r1, #32
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <main+0xb4>)
 800079c:	f000 fe1b 	bl	80013d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a4:	f000 faa2 	bl	8000cec <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg1, len_of_data3, HAL_MAX_DELAY);
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <main+0xa4>)
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <main+0xa8>)
 80007b4:	f001 fc83 	bl	80020be <HAL_UART_Transmit>
  {
 80007b8:	e7d8      	b.n	800076c <main+0x50>
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000030 	.word	0x20000030
 80007c8:	08003228 	.word	0x08003228
 80007cc:	08003230 	.word	0x08003230
 80007d0:	40020000 	.word	0x40020000

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	; 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fcf8 	bl	80031d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <SystemClock_Config+0xd4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <SystemClock_Config+0xd4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <SystemClock_Config+0xd4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <SystemClock_Config+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <SystemClock_Config+0xd8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <SystemClock_Config+0xd8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800084c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000850:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f940 	bl	8001ae8 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086e:	f000 f8bf 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fde0 	bl	8001454 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800089a:	f000 f8a9 	bl	80009f0 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f001 fb9c 	bl	8002024 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f87d 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000030 	.word	0x20000030
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0xe0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a29      	ldr	r2, [pc, #164]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_GPIO_Init+0xe0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_GPIO_Init+0xe0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <MX_GPIO_Init+0xe4>)
 8000990:	f000 fd08 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4810      	ldr	r0, [pc, #64]	; (80009ec <MX_GPIO_Init+0xe8>)
 80009ac:	f000 fb66 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_GPIO_Init+0xe4>)
 80009c8:	f000 fb58 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2028      	movs	r0, #40	; 0x28
 80009d2:	f000 fa8a 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	f000 faa3 	bl	8000f22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020800 	.word	0x40020800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 fa4a 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d133      	bne.n	8000ad6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_UART_MspInit+0x98>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_UART_MspInit+0x9c>)
 8000ac2:	f000 fadb 	bl	800107c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2026      	movs	r0, #38	; 0x26
 8000acc:	f000 fa0d 	bl	8000eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad0:	2026      	movs	r0, #38	; 0x26
 8000ad2:	f000 fa26 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8b8 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART2_IRQHandler+0x10>)
 8000b46:	f001 fbef 	bl	8002328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000030 	.word	0x20000030

08000b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	char *msg ="Button Pressed\r\n";
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <EXTI15_10_IRQHandler+0x34>)
 8000b5c:	607b      	str	r3, [r7, #4]
	uint16_t len_of_data2 = strlen(msg);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fb50 	bl	8000204 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b6c:	f000 fc4e 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, len_of_data2, HAL_MAX_DELAY);
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <EXTI15_10_IRQHandler+0x38>)
 8000b7a:	f001 faa0 	bl	80020be <HAL_UART_Transmit>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	08003234 	.word	0x08003234
 8000b8c:	20000030 	.word	0x20000030

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 fad5 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fd99 	bl	800071c <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bf8:	08003270 	.word	0x08003270
  ldr r2, =_sbss
 8000bfc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c00:	20000078 	.word	0x20000078

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f94f 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fede 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f967 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f92f 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000010 	.word	0x20000010
 8000ca8:	2000000c 	.word	0x2000000c

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000010 	.word	0x20000010
 8000cd0:	20000074 	.word	0x20000074

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000074 	.word	0x20000074

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000010 	.word	0x20000010

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff3e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff31 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa2 	bl	8000e90 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff feb6 	bl	8000cd4 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d008      	beq.n	8000f88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e052      	b.n	800102e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0216 	bic.w	r2, r2, #22
 8000f96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <HAL_DMA_Abort+0x62>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0208 	bic.w	r2, r2, #8
 8000fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd8:	e013      	b.n	8001002 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fda:	f7ff fe7b 	bl	8000cd4 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d90c      	bls.n	8001002 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2220      	movs	r2, #32
 8000fec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e015      	b.n	800102e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e4      	bne.n	8000fda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001014:	223f      	movs	r2, #63	; 0x3f
 8001016:	409a      	lsls	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d004      	beq.n	8001054 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00c      	b.n	800106e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2205      	movs	r2, #5
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e165      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8154 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ae 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_GPIO_Init+0x300>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_GPIO_Init+0x300>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_GPIO_Init+0x300>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x310>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x202>
 800127a:	2306      	movs	r3, #6
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800127e:	2307      	movs	r3, #7
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae96 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f806 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d90c      	bls.n	8001490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	2b03      	cmp	r3, #3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e067      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fbc6 	bl	8000cd4 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fbc2 	bl	8000cd4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d20c      	bcs.n	800159c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f855 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb26 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	08003248 	.word	0x08003248
 8001618:	20000008 	.word	0x20000008
 800161c:	2000000c 	.word	0x2000000c

08001620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_GetHCLKFreq+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800163c:	f7ff fff0 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	4903      	ldr	r1, [pc, #12]	; (800165c <HAL_RCC_GetPCLK1Freq+0x24>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	08003258 	.word	0x08003258

08001660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001664:	f7ff ffdc 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	0b5b      	lsrs	r3, r3, #13
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	08003258 	.word	0x08003258

08001688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800168c:	b0ae      	sub	sp, #184	; 0xb8
 800168e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ae:	4bcb      	ldr	r3, [pc, #812]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	f200 8206 	bhi.w	8001ac8 <HAL_RCC_GetSysClockFreq+0x440>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016f9 	.word	0x080016f9
 80016c8:	08001ac9 	.word	0x08001ac9
 80016cc:	08001ac9 	.word	0x08001ac9
 80016d0:	08001ac9 	.word	0x08001ac9
 80016d4:	08001701 	.word	0x08001701
 80016d8:	08001ac9 	.word	0x08001ac9
 80016dc:	08001ac9 	.word	0x08001ac9
 80016e0:	08001ac9 	.word	0x08001ac9
 80016e4:	08001709 	.word	0x08001709
 80016e8:	08001ac9 	.word	0x08001ac9
 80016ec:	08001ac9 	.word	0x08001ac9
 80016f0:	08001ac9 	.word	0x08001ac9
 80016f4:	080018f9 	.word	0x080018f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4bb9      	ldr	r3, [pc, #740]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016fe:	e1e7      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001700:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001706:	e1e3      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001708:	4bb4      	ldr	r3, [pc, #720]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001714:	4bb1      	ldr	r3, [pc, #708]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d071      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4bae      	ldr	r3, [pc, #696]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800172c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001746:	4622      	mov	r2, r4
 8001748:	462b      	mov	r3, r5
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4621      	mov	r1, r4
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	6439      	str	r1, [r7, #64]	; 0x40
 8001764:	4629      	mov	r1, r5
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	1a51      	subs	r1, r2, r1
 800178a:	63b9      	str	r1, [r7, #56]	; 0x38
 800178c:	4649      	mov	r1, r9
 800178e:	eb63 0301 	sbc.w	r3, r3, r1
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017a0:	4649      	mov	r1, r9
 80017a2:	00cb      	lsls	r3, r1, #3
 80017a4:	4641      	mov	r1, r8
 80017a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017aa:	4641      	mov	r1, r8
 80017ac:	00ca      	lsls	r2, r1, #3
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	4622      	mov	r2, r4
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ba:	462b      	mov	r3, r5
 80017bc:	460a      	mov	r2, r1
 80017be:	eb42 0303 	adc.w	r3, r2, r3
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017d0:	4629      	mov	r1, r5
 80017d2:	024b      	lsls	r3, r1, #9
 80017d4:	4621      	mov	r1, r4
 80017d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017da:	4621      	mov	r1, r4
 80017dc:	024a      	lsls	r2, r1, #9
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017f4:	f7fe fd0e 	bl	8000214 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001802:	e067      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001810:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	67bb      	str	r3, [r7, #120]	; 0x78
 800181e:	2300      	movs	r3, #0
 8001820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001822:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001826:	4622      	mov	r2, r4
 8001828:	462b      	mov	r3, r5
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	0159      	lsls	r1, r3, #5
 8001834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001838:	0150      	lsls	r0, r2, #5
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4621      	mov	r1, r4
 8001840:	1a51      	subs	r1, r2, r1
 8001842:	62b9      	str	r1, [r7, #40]	; 0x28
 8001844:	4629      	mov	r1, r5
 8001846:	eb63 0301 	sbc.w	r3, r3, r1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001858:	4649      	mov	r1, r9
 800185a:	018b      	lsls	r3, r1, #6
 800185c:	4641      	mov	r1, r8
 800185e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001862:	4641      	mov	r1, r8
 8001864:	018a      	lsls	r2, r1, #6
 8001866:	4641      	mov	r1, r8
 8001868:	ebb2 0a01 	subs.w	sl, r2, r1
 800186c:	4649      	mov	r1, r9
 800186e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800187e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001886:	4692      	mov	sl, r2
 8001888:	469b      	mov	fp, r3
 800188a:	4623      	mov	r3, r4
 800188c:	eb1a 0303 	adds.w	r3, sl, r3
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	462b      	mov	r3, r5
 8001894:	eb4b 0303 	adc.w	r3, fp, r3
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018bc:	2200      	movs	r2, #0
 80018be:	673b      	str	r3, [r7, #112]	; 0x70
 80018c0:	677a      	str	r2, [r7, #116]	; 0x74
 80018c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018c6:	f7fe fca5 	bl	8000214 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4613      	mov	r3, r2
 80018d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018f6:	e0eb      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d06b      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	2200      	movs	r2, #0
 8001918:	66bb      	str	r3, [r7, #104]	; 0x68
 800191a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800191c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001922:	663b      	str	r3, [r7, #96]	; 0x60
 8001924:	2300      	movs	r3, #0
 8001926:	667b      	str	r3, [r7, #100]	; 0x64
 8001928:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192c:	4622      	mov	r2, r4
 800192e:	462b      	mov	r3, r5
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	0159      	lsls	r1, r3, #5
 800193a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193e:	0150      	lsls	r0, r2, #5
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4621      	mov	r1, r4
 8001946:	1a51      	subs	r1, r2, r1
 8001948:	61b9      	str	r1, [r7, #24]
 800194a:	4629      	mov	r1, r5
 800194c:	eb63 0301 	sbc.w	r3, r3, r1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800195e:	4659      	mov	r1, fp
 8001960:	018b      	lsls	r3, r1, #6
 8001962:	4651      	mov	r1, sl
 8001964:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001968:	4651      	mov	r1, sl
 800196a:	018a      	lsls	r2, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ebb2 0801 	subs.w	r8, r2, r1
 8001972:	4659      	mov	r1, fp
 8001974:	eb63 0901 	sbc.w	r9, r3, r1
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001984:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001988:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198c:	4690      	mov	r8, r2
 800198e:	4699      	mov	r9, r3
 8001990:	4623      	mov	r3, r4
 8001992:	eb18 0303 	adds.w	r3, r8, r3
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	462b      	mov	r3, r5
 800199a:	eb49 0303 	adc.w	r3, r9, r3
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019ac:	4629      	mov	r1, r5
 80019ae:	024b      	lsls	r3, r1, #9
 80019b0:	4621      	mov	r1, r4
 80019b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019b6:	4621      	mov	r1, r4
 80019b8:	024a      	lsls	r2, r1, #9
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c2:	2200      	movs	r2, #0
 80019c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80019c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019cc:	f7fe fc22 	bl	8000214 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019da:	e065      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x420>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	4611      	mov	r1, r2
 80019f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f8:	653b      	str	r3, [r7, #80]	; 0x50
 80019fa:	2300      	movs	r3, #0
 80019fc:	657b      	str	r3, [r7, #84]	; 0x54
 80019fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a02:	4642      	mov	r2, r8
 8001a04:	464b      	mov	r3, r9
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	0159      	lsls	r1, r3, #5
 8001a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a14:	0150      	lsls	r0, r2, #5
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	1a51      	subs	r1, r2, r1
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	4649      	mov	r1, r9
 8001a22:	eb63 0301 	sbc.w	r3, r3, r1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a34:	4659      	mov	r1, fp
 8001a36:	018b      	lsls	r3, r1, #6
 8001a38:	4651      	mov	r1, sl
 8001a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3e:	4651      	mov	r1, sl
 8001a40:	018a      	lsls	r2, r1, #6
 8001a42:	4651      	mov	r1, sl
 8001a44:	1a54      	subs	r4, r2, r1
 8001a46:	4659      	mov	r1, fp
 8001a48:	eb63 0501 	sbc.w	r5, r3, r1
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	00eb      	lsls	r3, r5, #3
 8001a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	18e3      	adds	r3, r4, r3
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	464b      	mov	r3, r9
 8001a68:	eb45 0303 	adc.w	r3, r5, r3
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a84:	4621      	mov	r1, r4
 8001a86:	028a      	lsls	r2, r1, #10
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a90:	2200      	movs	r2, #0
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a9a:	f7fe fbbb 	bl	8000214 <__aeabi_uldivmod>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0f1b      	lsrs	r3, r3, #28
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ac6:	e003      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ace:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	37b8      	adds	r7, #184	; 0xb8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400

08001ae8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e28d      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8083 	beq.w	8001c0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b08:	4b94      	ldr	r3, [pc, #592]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d019      	beq.n	8001b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b14:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b20:	4b8e      	ldr	r3, [pc, #568]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2c:	d00c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4b8b      	ldr	r3, [pc, #556]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b84      	ldr	r3, [pc, #528]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x124>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e25a      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x90>
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xcc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xb4>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xcc>
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6b      	ldr	r2, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f88a 	bl	8000cd4 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f886 	bl	8000cd4 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e21f      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xdc>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f876 	bl	8000cd4 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f872 	bl	8000cd4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e20b      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x104>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d06f      	beq.n	8001cfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d017      	beq.n	8001c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x186>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1d3      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x278>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f81f 	bl	8000cd4 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f81b 	bl	8000cd4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1b4      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4925      	ldr	r1, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_OscConfig+0x278>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fffe 	bl	8000cd4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7fe fffa 	bl	8000cd4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e193      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d036      	beq.n	8001d74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe ffde 	bl	8000cd4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7fe ffda 	bl	8000cd4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e173      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x234>
 8001d3a:	e01b      	b.n	8001d74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7fe ffc7 	bl	8000cd4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e00e      	b.n	8001d68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7fe ffc3 	bl	8000cd4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d907      	bls.n	8001d68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e15c      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	42470000 	.word	0x42470000
 8001d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b8a      	ldr	r3, [pc, #552]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ea      	bne.n	8001d4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a7e      	ldr	r2, [pc, #504]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7fe ff83 	bl	8000cd4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7fe ff7f 	bl	8000cd4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e118      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x31e>
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x358>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x340>
 8001e0e:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x358>
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7fe ff44 	bl	8000cd4 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe ff40 	bl	8000cd4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0d7      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RCC_OscConfig+0x368>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7fe ff2e 	bl	8000cd4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe ff2a 	bl	8000cd4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0c1      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80ad 	beq.w	8002014 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d060      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d145      	bne.n	8001f5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fefe 	bl	8000cd4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fefa 	bl	8000cd4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e093      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	071b      	lsls	r3, r3, #28
 8001f26:	491b      	ldr	r1, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fecf 	bl	8000cd4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe fecb 	bl	8000cd4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e064      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x452>
 8001f58:	e05c      	b.n	8002014 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe feb8 	bl	8000cd4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe feb4 	bl	8000cd4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04d      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x480>
 8001f86:	e045      	b.n	8002014 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e040      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x538>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d129      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d122      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d119      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10f      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e03f      	b.n	80020b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fcfe 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fe1d 	bl	8002ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	; 0x28
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d17c      	bne.n	80021d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_UART_Transmit+0x2c>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e075      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Transmit+0x3e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e06e      	b.n	80021da <HAL_UART_Transmit+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	; 0x21
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002112:	f7fe fddf 	bl	8000cd4 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212c:	d108      	bne.n	8002140 <HAL_UART_Transmit+0x82>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e003      	b.n	8002148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002150:	e02a      	b.n	80021a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fb9b 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e036      	b.n	80021da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3302      	adds	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e007      	b.n	800219a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1cf      	bne.n	8002152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fb6b 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	f040 808c 	bne.w	800231c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_UART_Receive+0x2e>
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e084      	b.n	800231e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_UART_Receive+0x40>
 800221e:	2302      	movs	r3, #2
 8002220:	e07d      	b.n	800231e <HAL_UART_Receive+0x13c>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2222      	movs	r2, #34	; 0x22
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800223e:	f7fe fd49 	bl	8000cd4 <HAL_GetTick>
 8002242:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002258:	d108      	bne.n	800226c <HAL_UART_Receive+0x8a>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e003      	b.n	8002274 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800227c:	e043      	b.n	8002306 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	2120      	movs	r1, #32
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fb05 	bl	8002898 <UART_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e042      	b.n	800231e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3302      	adds	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e01f      	b.n	80022f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d007      	beq.n	80022d2 <HAL_UART_Receive+0xf0>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_UART_Receive+0xfe>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e008      	b.n	80022f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1b6      	bne.n	800227e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ba      	sub	sp, #232	; 0xe8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10f      	bne.n	800238e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800236e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_UART_IRQHandler+0x66>
 800237a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fbd3 	bl	8002b32 <UART_Receive_IT>
      return;
 800238c:	e256      	b.n	800283c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800238e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80de 	beq.w	8002554 <HAL_UART_IRQHandler+0x22c>
 8002398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80d1 	beq.w	8002554 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_UART_IRQHandler+0xae>
 80023be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_UART_IRQHandler+0xd2>
 80023e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_UART_IRQHandler+0xf6>
 8002406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 0204 	orr.w	r2, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d011      	beq.n	800244e <HAL_UART_IRQHandler+0x126>
 800242a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f043 0208 	orr.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 81ed 	beq.w	8002832 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_UART_IRQHandler+0x14e>
 8002464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fb5e 	bl	8002b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <HAL_UART_IRQHandler+0x17a>
 800249a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04f      	beq.n	8002542 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa66 	bl	8002974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d141      	bne.n	800253a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3314      	adds	r3, #20
 80024de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1d9      	bne.n	80024b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	2b00      	cmp	r3, #0
 8002508:	d013      	beq.n	8002532 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	4a7d      	ldr	r2, [pc, #500]	; (8002704 <HAL_UART_IRQHandler+0x3dc>)
 8002510:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fd8d 	bl	8001036 <HAL_DMA_Abort_IT>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800252c:	4610      	mov	r0, r2
 800252e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	e00e      	b.n	8002550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f99a 	bl	800286c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002538:	e00a      	b.n	8002550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f996 	bl	800286c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002540:	e006      	b.n	8002550 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f992 	bl	800286c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800254e:	e170      	b.n	8002832 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	bf00      	nop
    return;
 8002552:	e16e      	b.n	8002832 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	2b01      	cmp	r3, #1
 800255a:	f040 814a 	bne.w	80027f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8143 	beq.w	80027f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 813c 	beq.w	80027f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	f040 80b4 	bne.w	8002708 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8140 	beq.w	8002836 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025be:	429a      	cmp	r2, r3
 80025c0:	f080 8139 	bcs.w	8002836 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	f000 8088 	beq.w	80026ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002616:	e841 2300 	strex	r3, r2, [r1]
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1d9      	bne.n	80025da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3314      	adds	r3, #20
 800262c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3314      	adds	r3, #20
 8002646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800264a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800264e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800265c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e1      	bne.n	8002626 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3314      	adds	r3, #20
 8002668:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800268c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e3      	bne.n	8002662 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	f023 0310 	bic.w	r3, r3, #16
 80026be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80026ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d4:	e841 2300 	strex	r3, r2, [r1]
 80026d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e3      	bne.n	80026a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc36 	bl	8000f56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8c0 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002700:	e099      	b.n	8002836 <HAL_UART_IRQHandler+0x50e>
 8002702:	bf00      	nop
 8002704:	08002a3b 	.word	0x08002a3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002710:	b29b      	uxth	r3, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808b 	beq.w	800283a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8086 	beq.w	800283a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002752:	647a      	str	r2, [r7, #68]	; 0x44
 8002754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e3      	bne.n	800272e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3314      	adds	r3, #20
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	623b      	str	r3, [r7, #32]
   return(result);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3314      	adds	r3, #20
 8002786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800278a:	633a      	str	r2, [r7, #48]	; 0x30
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e3      	bne.n	8002766 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0310 	bic.w	r3, r3, #16
 80027c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d0:	61fa      	str	r2, [r7, #28]
 80027d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	617b      	str	r3, [r7, #20]
   return(result);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e3      	bne.n	80027ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f848 	bl	8002880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f0:	e023      	b.n	800283a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_UART_IRQHandler+0x4ea>
 80027fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f929 	bl	8002a62 <UART_Transmit_IT>
    return;
 8002810:	e014      	b.n	800283c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <HAL_UART_IRQHandler+0x514>
 800281e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f969 	bl	8002b02 <UART_EndTransmit_IT>
    return;
 8002830:	e004      	b.n	800283c <HAL_UART_IRQHandler+0x514>
    return;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <HAL_UART_IRQHandler+0x514>
      return;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <HAL_UART_IRQHandler+0x514>
      return;
 800283a:	bf00      	nop
  }
}
 800283c:	37e8      	adds	r7, #232	; 0xe8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop

08002844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a8:	e050      	b.n	800294c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d04c      	beq.n	800294c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028b8:	f7fe fa0c 	bl	8000cd4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d241      	bcs.n	800294c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028e8:	637a      	str	r2, [r7, #52]	; 0x34
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e5      	bne.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3314      	adds	r3, #20
 8002902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	613b      	str	r3, [r7, #16]
   return(result);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291c:	623a      	str	r2, [r7, #32]
 800291e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	6a3a      	ldr	r2, [r7, #32]
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	61bb      	str	r3, [r7, #24]
   return(result);
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e5      	bne.n	80028fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e00f      	b.n	800296c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d09f      	beq.n	80028aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3740      	adds	r7, #64	; 0x40
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002974:	b480      	push	{r7}
 8002976:	b095      	sub	sp, #84	; 0x54
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299c:	643a      	str	r2, [r7, #64]	; 0x40
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e5      	bne.n	800297c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3314      	adds	r3, #20
 80029b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	61fb      	str	r3, [r7, #28]
   return(result);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e5      	bne.n	80029b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d119      	bne.n	8002a20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f023 0310 	bic.w	r3, r3, #16
 8002a02:	647b      	str	r3, [r7, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a0c:	61ba      	str	r2, [r7, #24]
 8002a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6979      	ldr	r1, [r7, #20]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	613b      	str	r3, [r7, #16]
   return(result);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e5      	bne.n	80029ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a2e:	bf00      	nop
 8002a30:	3754      	adds	r7, #84	; 0x54
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff09 	bl	800286c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b21      	cmp	r3, #33	; 0x21
 8002a74:	d13e      	bne.n	8002af4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d114      	bne.n	8002aaa <UART_Transmit_IT+0x48>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d110      	bne.n	8002aaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	1c9a      	adds	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	621a      	str	r2, [r3, #32]
 8002aa8:	e008      	b.n	8002abc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6211      	str	r1, [r2, #32]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10f      	bne.n	8002af0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ade:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fe8e 	bl	8002844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b08c      	sub	sp, #48	; 0x30
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b22      	cmp	r3, #34	; 0x22
 8002b44:	f040 80ab 	bne.w	8002c9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d117      	bne.n	8002b82 <UART_Receive_IT+0x50>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d113      	bne.n	8002b82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	1c9a      	adds	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b80:	e026      	b.n	8002bd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b94:	d007      	beq.n	8002ba6 <UART_Receive_IT+0x74>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <UART_Receive_IT+0x82>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e008      	b.n	8002bc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d15a      	bne.n	8002c9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0220 	bic.w	r2, r2, #32
 8002bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d135      	bne.n	8002c90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f023 0310 	bic.w	r3, r3, #16
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	623a      	str	r2, [r7, #32]
 8002c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	69f9      	ldr	r1, [r7, #28]
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e5      	bne.n	8002c2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d10a      	bne.n	8002c82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fdf9 	bl	8002880 <HAL_UARTEx_RxEventCallback>
 8002c8e:	e002      	b.n	8002c96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fde1 	bl	8002858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e002      	b.n	8002ca0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3730      	adds	r7, #48	; 0x30
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b0c0      	sub	sp, #256	; 0x100
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	ea40 0301 	orr.w	r3, r0, r1
 8002cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d00:	f021 010c 	bic.w	r1, r1, #12
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	6999      	ldr	r1, [r3, #24]
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	ea40 0301 	orr.w	r3, r0, r1
 8002d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <UART_SetConfig+0xa0>
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <UART_SetConfig+0x2d0>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d104      	bne.n	8002d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d48:	f7fe fc8a 	bl	8001660 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d50:	e003      	b.n	8002d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d52:	f7fe fc71 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
 8002d56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d64:	f040 810c 	bne.w	8002f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d82:	415b      	adcs	r3, r3
 8002d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	eb12 0801 	adds.w	r8, r2, r1
 8002d90:	4629      	mov	r1, r5
 8002d92:	eb43 0901 	adc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002db8:	462b      	mov	r3, r5
 8002dba:	eb49 0303 	adc.w	r3, r9, r3
 8002dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	18db      	adds	r3, r3, r3
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
 8002ddc:	4613      	mov	r3, r2
 8002dde:	eb42 0303 	adc.w	r3, r2, r3
 8002de2:	657b      	str	r3, [r7, #84]	; 0x54
 8002de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002dec:	f7fd fa12 	bl	8000214 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002df6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	011c      	lsls	r4, r3, #4
 8002dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	1891      	adds	r1, r2, r2
 8002e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e18:	415b      	adcs	r3, r3
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e20:	4641      	mov	r1, r8
 8002e22:	eb12 0a01 	adds.w	sl, r2, r1
 8002e26:	4649      	mov	r1, r9
 8002e28:	eb43 0b01 	adc.w	fp, r3, r1
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e40:	4692      	mov	sl, r2
 8002e42:	469b      	mov	fp, r3
 8002e44:	4643      	mov	r3, r8
 8002e46:	eb1a 0303 	adds.w	r3, sl, r3
 8002e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	eb4b 0303 	adc.w	r3, fp, r3
 8002e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	18db      	adds	r3, r3, r3
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
 8002e72:	4613      	mov	r3, r2
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e82:	f7fd f9c7 	bl	8000214 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2264      	movs	r2, #100	; 0x64
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	1acb      	subs	r3, r1, r3
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb0:	441c      	add	r4, r3
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	1851      	adds	r1, r2, r1
 8002ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8002eda:	4649      	mov	r1, r9
 8002edc:	414b      	adcs	r3, r1
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002eec:	4659      	mov	r1, fp
 8002eee:	00cb      	lsls	r3, r1, #3
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	00ca      	lsls	r2, r1, #3
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	4642      	mov	r2, r8
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f08:	464b      	mov	r3, r9
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f28:	460b      	mov	r3, r1
 8002f2a:	18db      	adds	r3, r3, r3
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2e:	4613      	mov	r3, r2
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f3e:	f7fd f969 	bl	8000214 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002f48:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	2164      	movs	r1, #100	; 0x64
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3332      	adds	r3, #50	; 0x32
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	f003 0207 	and.w	r2, r3, #7
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4422      	add	r2, r4
 8002f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f70:	e105      	b.n	800317e <UART_SetConfig+0x4d6>
 8002f72:	bf00      	nop
 8002f74:	40011000 	.word	0x40011000
 8002f78:	40011400 	.word	0x40011400
 8002f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f92:	4642      	mov	r2, r8
 8002f94:	464b      	mov	r3, r9
 8002f96:	1891      	adds	r1, r2, r2
 8002f98:	6239      	str	r1, [r7, #32]
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	1854      	adds	r4, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0501 	adc.w	r5, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	00eb      	lsls	r3, r5, #3
 8002fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fba:	00e2      	lsls	r2, r4, #3
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	4643      	mov	r3, r8
 8002fc2:	18e3      	adds	r3, r4, r3
 8002fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fc8:	464b      	mov	r3, r9
 8002fca:	eb45 0303 	adc.w	r3, r5, r3
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fee:	4629      	mov	r1, r5
 8002ff0:	008b      	lsls	r3, r1, #2
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	008a      	lsls	r2, r1, #2
 8002ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003000:	f7fd f908 	bl	8000214 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4b60      	ldr	r3, [pc, #384]	; (800318c <UART_SetConfig+0x4e4>)
 800300a:	fba3 2302 	umull	r2, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	011c      	lsls	r4, r3, #4
 8003012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800301c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003024:	4642      	mov	r2, r8
 8003026:	464b      	mov	r3, r9
 8003028:	1891      	adds	r1, r2, r2
 800302a:	61b9      	str	r1, [r7, #24]
 800302c:	415b      	adcs	r3, r3
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	4641      	mov	r1, r8
 8003036:	1851      	adds	r1, r2, r1
 8003038:	6139      	str	r1, [r7, #16]
 800303a:	4649      	mov	r1, r9
 800303c:	414b      	adcs	r3, r1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800304c:	4659      	mov	r1, fp
 800304e:	00cb      	lsls	r3, r1, #3
 8003050:	4651      	mov	r1, sl
 8003052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003056:	4651      	mov	r1, sl
 8003058:	00ca      	lsls	r2, r1, #3
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	4603      	mov	r3, r0
 8003060:	4642      	mov	r2, r8
 8003062:	189b      	adds	r3, r3, r2
 8003064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003068:	464b      	mov	r3, r9
 800306a:	460a      	mov	r2, r1
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	67bb      	str	r3, [r7, #120]	; 0x78
 800307e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800308c:	4649      	mov	r1, r9
 800308e:	008b      	lsls	r3, r1, #2
 8003090:	4641      	mov	r1, r8
 8003092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003096:	4641      	mov	r1, r8
 8003098:	008a      	lsls	r2, r1, #2
 800309a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800309e:	f7fd f8b9 	bl	8000214 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <UART_SetConfig+0x4e4>)
 80030a8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2164      	movs	r1, #100	; 0x64
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a34      	ldr	r2, [pc, #208]	; (800318c <UART_SetConfig+0x4e4>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c6:	441c      	add	r4, r3
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030cc:	2200      	movs	r2, #0
 80030ce:	673b      	str	r3, [r7, #112]	; 0x70
 80030d0:	677a      	str	r2, [r7, #116]	; 0x74
 80030d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030d6:	4642      	mov	r2, r8
 80030d8:	464b      	mov	r3, r9
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	415b      	adcs	r3, r3
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030e6:	4641      	mov	r1, r8
 80030e8:	1851      	adds	r1, r2, r1
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	4649      	mov	r1, r9
 80030ee:	414b      	adcs	r3, r1
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030fe:	4659      	mov	r1, fp
 8003100:	00cb      	lsls	r3, r1, #3
 8003102:	4651      	mov	r1, sl
 8003104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003108:	4651      	mov	r1, sl
 800310a:	00ca      	lsls	r2, r1, #3
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	4603      	mov	r3, r0
 8003112:	4642      	mov	r2, r8
 8003114:	189b      	adds	r3, r3, r2
 8003116:	66bb      	str	r3, [r7, #104]	; 0x68
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	663b      	str	r3, [r7, #96]	; 0x60
 800312c:	667a      	str	r2, [r7, #100]	; 0x64
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800313a:	4649      	mov	r1, r9
 800313c:	008b      	lsls	r3, r1, #2
 800313e:	4641      	mov	r1, r8
 8003140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003144:	4641      	mov	r1, r8
 8003146:	008a      	lsls	r2, r1, #2
 8003148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800314c:	f7fd f862 	bl	8000214 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <UART_SetConfig+0x4e4>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <UART_SetConfig+0x4e4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4422      	add	r2, r4
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	bf00      	nop
 8003180:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	51eb851f 	.word	0x51eb851f

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	; (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	; (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	; (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 f820 	bl	80031e8 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003268 	.word	0x08003268
 80031cc:	08003268 	.word	0x08003268
 80031d0:	08003268 	.word	0x08003268
 80031d4:	0800326c 	.word	0x0800326c

080031d8 <memset>:
 80031d8:	4402      	add	r2, r0
 80031da:	4603      	mov	r3, r0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	f803 1b01 	strb.w	r1, [r3], #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
