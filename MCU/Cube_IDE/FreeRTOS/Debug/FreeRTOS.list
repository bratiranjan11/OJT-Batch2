
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008edc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  080090b0  080090b0  000190b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ec  080095ec  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f4  080095f4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080095fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dfc  200001e8  080097e4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fe4  080097e4  00022fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb04  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002861  00000000  00000000  0002ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b29  00000000  00000000  00033118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a79  00000000  00000000  00056c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6db8  00000000  00000000  000676ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  0013e4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009094 	.word	0x08009094

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009094 	.word	0x08009094

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Set_Pin_Output>:


#include"main.h"

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 ff88 	bl	8001f7c <HAL_GPIO_Init>
}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 ff6a 	bl	8001f7c <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <dht11_start>:
void dht11_start()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	Set_Pin_Output (GPIOC, GPIO_PIN_10);
 80010b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <dht11_start+0x44>)
 80010ba:	f7ff ffbd 	bl	8001038 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);  //Get The Pin Low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <dht11_start+0x44>)
 80010c6:	f001 f905 	bl	80022d4 <HAL_GPIO_WritePin>
	Delay(18000);
 80010ca:	f244 6050 	movw	r0, #18000	; 0x4650
 80010ce:	f000 f997 	bl	8001400 <Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);  //Get The Pin High
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <dht11_start+0x44>)
 80010da:	f001 f8fb 	bl	80022d4 <HAL_GPIO_WritePin>
	Delay(20);
 80010de:	2014      	movs	r0, #20
 80010e0:	f000 f98e 	bl	8001400 <Delay>
	Set_Pin_Input(GPIOC, GPIO_PIN_10);
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <dht11_start+0x44>)
 80010ea:	f7ff ffc3 	bl	8001074 <Set_Pin_Input>

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020800 	.word	0x40020800

080010f8 <check_response>:
uint8_t check_response()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	uint8_t response=0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
	Delay(40);
 8001102:	2028      	movs	r0, #40	; 0x28
 8001104:	f000 f97c 	bl	8001400 <Delay>
	if (!(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10)))
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <check_response+0x5c>)
 800110e:	f001 f8c9 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <check_response+0x40>
	{
		Delay(80);
 8001118:	2050      	movs	r0, #80	; 0x50
 800111a:	f000 f971 	bl	8001400 <Delay>
		if ((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10)))
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <check_response+0x5c>)
 8001124:	f001 f8be 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <check_response+0x3c>
			response = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	e001      	b.n	8001138 <check_response+0x40>
		else
			response = -1;
 8001134:	23ff      	movs	r3, #255	; 0xff
 8001136:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (GPIOC,GPIO_PIN_10))); // Wait for pin to go low
 8001138:	bf00      	nop
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <check_response+0x5c>)
 8001140:	f001 f8b0 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f7      	bne.n	800113a <check_response+0x42>
	return response;
 800114a:	79fb      	ldrb	r3, [r7, #7]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020800 	.word	0x40020800

08001158 <data_read>:

uint8_t data_read()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800115e:	2300      	movs	r3, #0
 8001160:	71bb      	strb	r3, [r7, #6]
 8001162:	e03a      	b.n	80011da <data_read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (GPIOC,GPIO_PIN_10)));   // wait for the pin to go high
 8001164:	bf00      	nop
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4820      	ldr	r0, [pc, #128]	; (80011ec <data_read+0x94>)
 800116c:	f001 f89a 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f7      	beq.n	8001166 <data_read+0xe>
			Delay(40);
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f000 f942 	bl	8001400 <Delay>
			if (!(HAL_GPIO_ReadPin (GPIOC,GPIO_PIN_10)))   // if the pin is low
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <data_read+0x94>)
 8001182:	f001 f88f 	bl	80022a4 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10e      	bne.n	80011aa <data_read+0x52>
			{
				i&= ~(1<<(7-j));   // write 0
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	b25b      	sxtb	r3, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	b25a      	sxtb	r2, r3
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	4013      	ands	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	e00b      	b.n	80011c2 <data_read+0x6a>
			}
			else i|= (1<<(7-j));  // if the pin is high, write 1
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	f1c3 0307 	rsb	r3, r3, #7
 80011b0:	2201      	movs	r2, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4313      	orrs	r3, r2
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	71fb      	strb	r3, [r7, #7]
			while ((HAL_GPIO_ReadPin (GPIOC,GPIO_PIN_10)));  // wait for the pin to go low
 80011c2:	bf00      	nop
 80011c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <data_read+0x94>)
 80011ca:	f001 f86b 	bl	80022a4 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f7      	bne.n	80011c4 <data_read+0x6c>
	for (j=0;j<8;j++)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	3301      	adds	r3, #1
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d9c1      	bls.n	8001164 <data_read+0xc>
		}
		return i;
 80011e0:	79fb      	ldrb	r3, [r7, #7]

}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020800 	.word	0x40020800

080011f0 <LCD_string>:
//R/W CONNECT TO PA6
#define EN 0x80							//PA7 mask for register select


void LCD_string(char str[])
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e009      	b.n	8001212 <LCD_string+0x22>
	{
		LCD_data(str[i]);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8c2 	bl	8001390 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ef      	bne.n	80011fe <LCD_string+0xe>
	}

}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	PORTS_init();
 800122c:	f000 f82e 	bl	800128c <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 8001230:	2014      	movs	r0, #20
 8001232:	f000 f8c8 	bl	80013c6 <delay>
	LCD_nibble_write(0x30, 0);
 8001236:	2100      	movs	r1, #0
 8001238:	2030      	movs	r0, #48	; 0x30
 800123a:	f000 f857 	bl	80012ec <LCD_nibble_write>
	delay(5);
 800123e:	2005      	movs	r0, #5
 8001240:	f000 f8c1 	bl	80013c6 <delay>
	LCD_nibble_write(0x30, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	2030      	movs	r0, #48	; 0x30
 8001248:	f000 f850 	bl	80012ec <LCD_nibble_write>
	delay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f000 f8ba 	bl	80013c6 <delay>
	LCD_nibble_write(0x30, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2030      	movs	r0, #48	; 0x30
 8001256:	f000 f849 	bl	80012ec <LCD_nibble_write>
	delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f8b3 	bl	80013c6 <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 8001260:	2100      	movs	r1, #0
 8001262:	2020      	movs	r0, #32
 8001264:	f000 f842 	bl	80012ec <LCD_nibble_write>
	delay(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f000 f8ac 	bl	80013c6 <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 800126e:	2028      	movs	r0, #40	; 0x28
 8001270:	f000 f86c 	bl	800134c <LCD_command>
	LCD_command(0x06); /* move cursor right */
 8001274:	2006      	movs	r0, #6
 8001276:	f000 f869 	bl	800134c <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 800127a:	2001      	movs	r0, #1
 800127c:	f000 f866 	bl	800134c <LCD_command>
	LCD_command(0x0F); /* turn on display, cursor blinking */
 8001280:	200f      	movs	r0, #15
 8001282:	f000 f863 	bl	800134c <LCD_command>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <PORTS_init>:

void PORTS_init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <PORTS_init+0x54>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <PORTS_init+0x54>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <PORTS_init+0x54>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <PORTS_init+0x54>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		//GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <PORTS_init+0x58>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <PORTS_init+0x58>)
 80012ae:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80012b2:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <PORTS_init+0x58>)
 80012b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80012ba:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <PORTS_init+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <PORTS_init+0x5c>)
 80012c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012c6:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <PORTS_init+0x5c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <PORTS_init+0x5c>)
 80012ce:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80012d2:	6013      	str	r3, [r2, #0]


}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020800 	.word	0x40020800

080012ec <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <LCD_nibble_write+0x58>)
 80012fe:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8001302:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <LCD_nibble_write+0x58>)
 8001308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800130c:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LCD_nibble_write+0x5c>)
 800131a:	2220      	movs	r2, #32
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	e003      	b.n	8001328 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <LCD_nibble_write+0x5c>)
 8001322:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001326:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <LCD_nibble_write+0x5c>)
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	619a      	str	r2, [r3, #24]
	delay(0);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f849 	bl	80013c6 <delay>
	GPIOA->BSRR = EN << 16;
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <LCD_nibble_write+0x5c>)
 8001336:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800133a:	619a      	str	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020800 	.word	0x40020800
 8001348:	40020000 	.word	0x40020000

0800134c <LCD_command>:
void LCD_command(unsigned char command)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f023 030f 	bic.w	r3, r3, #15
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ffc3 	bl	80012ec <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffbc 	bl	80012ec <LCD_nibble_write>
	if (command < 4)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d803      	bhi.n	8001382 <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 800137a:	2002      	movs	r0, #2
 800137c:	f000 f823 	bl	80013c6 <delay>
	else
		delay(1); 									/* all others 40 us */

}
 8001380:	e002      	b.n	8001388 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f81f 	bl	80013c6 <delay>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LCD_data>:
void LCD_data(char data)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f023 030f 	bic.w	r3, r3, #15
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2120      	movs	r1, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffa1 	bl	80012ec <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2120      	movs	r1, #32
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff9a 	bl	80012ec <LCD_nibble_write>
	delay(100);
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f000 f804 	bl	80013c6 <delay>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <delay>:
//
void delay(int seconds)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 80013ce:	e00d      	b.n	80013ec <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e002      	b.n	80013dc <delay+0x16>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80013e2:	4293      	cmp	r3, r2
 80013e4:	ddf7      	ble.n	80013d6 <delay+0x10>
	for(;seconds>0;seconds--)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dcee      	bgt.n	80013d0 <delay+0xa>
		{

		}
	}
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <Delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay (uint16_t time)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <Delay+0x30>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8001412:	bf00      	nop
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <Delay+0x30>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3f9      	bcc.n	8001414 <Delay+0x14>
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000204 	.word	0x20000204

08001434 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
	//LCD_command(0x01);
	//delay(11);


	sprintf (str, "TEMP:- %.0f", Temp);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f899 	bl	8000588 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	f107 000c 	add.w	r0, r7, #12
 800145e:	490c      	ldr	r1, [pc, #48]	; (8001490 <Display_Temp+0x5c>)
 8001460:	f004 f838 	bl	80054d4 <siprintf>
	LCD_string(str);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fec1 	bl	80011f0 <LCD_string>
	LCD_command(0x89);
 800146e:	2089      	movs	r0, #137	; 0x89
 8001470:	f7ff ff6c 	bl	800134c <LCD_command>
	delay(11);
 8001474:	200b      	movs	r0, #11
 8001476:	f7ff ffa6 	bl	80013c6 <delay>
	LCD_data(0xdf);
 800147a:	20df      	movs	r0, #223	; 0xdf
 800147c:	f7ff ff88 	bl	8001390 <LCD_data>
	LCD_data('C');
 8001480:	2043      	movs	r0, #67	; 0x43
 8001482:	f7ff ff85 	bl	8001390 <LCD_data>
}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	080090b0 	.word	0x080090b0

08001494 <Display_Rh>:

void Display_Rh (float Rh)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
	LCD_command(0xc0);
 80014b0:	20c0      	movs	r0, #192	; 0xc0
 80014b2:	f7ff ff4b 	bl	800134c <LCD_command>
	delay(11);
 80014b6:	200b      	movs	r0, #11
 80014b8:	f7ff ff85 	bl	80013c6 <delay>

	sprintf (str, "RH:- %.0f", Rh);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff f863 	bl	8000588 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	f107 000c 	add.w	r0, r7, #12
 80014ca:	490c      	ldr	r1, [pc, #48]	; (80014fc <Display_Rh+0x68>)
 80014cc:	f004 f802 	bl	80054d4 <siprintf>
	LCD_string(str);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe8b 	bl	80011f0 <LCD_string>
	LCD_data('%');
 80014da:	2025      	movs	r0, #37	; 0x25
 80014dc:	f7ff ff58 	bl	8001390 <LCD_data>
	LCD_command(0xc9);
 80014e0:	20c9      	movs	r0, #201	; 0xc9
 80014e2:	f7ff ff33 	bl	800134c <LCD_command>
	delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f7ff ff6d 	bl	80013c6 <delay>
	LCD_string("        ");
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <Display_Rh+0x6c>)
 80014ee:	f7ff fe7f 	bl	80011f0 <LCD_string>
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	080090bc 	.word	0x080090bc
 8001500:	080090c8 	.word	0x080090c8

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fbef 	bl	8001cec <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_init();
 800150e:	f7ff fe8b 	bl	8001228 <LCD_init>
  delay(10);
 8001512:	200a      	movs	r0, #10
 8001514:	f7ff ff57 	bl	80013c6 <delay>
  BaseType_t status;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f838 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 f8da 	bl	80016d4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001520:	f000 f8a2 	bl	8001668 <MX_TIM6_Init>
//  status=xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);  //Create task1
//  configASSERTASSERT(status == pdPASS);



  LCD_command(0x83);
 8001524:	2083      	movs	r0, #131	; 0x83
 8001526:	f7ff ff11 	bl	800134c <LCD_command>
  delay(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f7ff ff4b 	bl	80013c6 <delay>
  LCD_string("STAY SAFE");
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <main+0x74>)
 8001532:	f7ff fe5d 	bl	80011f0 <LCD_string>
   delay(1000);
 8001536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153a:	f7ff ff44 	bl	80013c6 <delay>
  LCD_command(0x01);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff ff04 	bl	800134c <LCD_command>
  delay(10);
 8001544:	200a      	movs	r0, #10
 8001546:	f7ff ff3e 	bl	80013c6 <delay>
  xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2302      	movs	r3, #2
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	22c8      	movs	r2, #200	; 0xc8
 8001556:	4909      	ldr	r1, [pc, #36]	; (800157c <main+0x78>)
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <main+0x7c>)
 800155a:	f002 f876 	bl	800364a <xTaskCreate>
  xTaskCreate(task2_handler, "Task-2", 200, NULL, 2, &task2_handle);
 800155e:	463b      	mov	r3, r7
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2302      	movs	r3, #2
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2300      	movs	r3, #0
 8001568:	22c8      	movs	r2, #200	; 0xc8
 800156a:	4906      	ldr	r1, [pc, #24]	; (8001584 <main+0x80>)
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <main+0x84>)
 800156e:	f002 f86c 	bl	800364a <xTaskCreate>

  vTaskStartScheduler();
 8001572:	f002 f9af 	bl	80038d4 <vTaskStartScheduler>
//  configASSERT(status == pdPASS);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001576:	e7fe      	b.n	8001576 <main+0x72>
 8001578:	080090d4 	.word	0x080090d4
 800157c:	080090e0 	.word	0x080090e0
 8001580:	080017d1 	.word	0x080017d1
 8001584:	080090e8 	.word	0x080090e8
 8001588:	08001815 	.word	0x08001815

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2234      	movs	r2, #52	; 0x34
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f89c 	bl	80046d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <SystemClock_Config+0xd4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <SystemClock_Config+0xd4>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <SystemClock_Config+0xd4>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <SystemClock_Config+0xd8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <SystemClock_Config+0xd8>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <SystemClock_Config+0xd8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2310      	movs	r3, #16
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001600:	2310      	movs	r3, #16
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800160a:	2304      	movs	r3, #4
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800160e:	2302      	movs	r3, #2
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001612:	2302      	movs	r3, #2
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4618      	mov	r0, r3
 800161c:	f001 f9dc 	bl	80029d8 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001626:	f000 f963 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2302      	movs	r3, #2
 8001630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2102      	movs	r1, #2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fe5e 	bl	8002308 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001652:	f000 f94d 	bl	80018f0 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3750      	adds	r7, #80	; 0x50
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_TIM6_Init+0x64>)
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <MX_TIM6_Init+0x68>)
 800167a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_TIM6_Init+0x64>)
 800167e:	2253      	movs	r2, #83	; 0x53
 8001680:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_TIM6_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_TIM6_Init+0x64>)
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_TIM6_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_TIM6_Init+0x64>)
 8001698:	f001 fc3c 	bl	8002f14 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80016a2:	f000 f925 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_TIM6_Init+0x64>)
 80016b4:	f001 febe 	bl	8003434 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80016be:	f000 f917 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000204 	.word	0x20000204
 80016d0:	40001000 	.word	0x40001000

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <MX_GPIO_Init+0xf0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a34      	ldr	r2, [pc, #208]	; (80017c4 <MX_GPIO_Init+0xf0>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <MX_GPIO_Init+0xf0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MX_GPIO_Init+0xf0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <MX_GPIO_Init+0xf0>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_GPIO_Init+0xf0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <MX_GPIO_Init+0xf4>)
 8001760:	f000 fdb8 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4814      	ldr	r0, [pc, #80]	; (80017cc <MX_GPIO_Init+0xf8>)
 800177c:	f000 fbfe 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001780:	230c      	movs	r3, #12
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001790:	2307      	movs	r3, #7
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0xf4>)
 800179c:	f000 fbee 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017a0:	2320      	movs	r3, #32
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_GPIO_Init+0xf4>)
 80017b8:	f000 fbe0 	bl	8001f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020800 	.word	0x40020800

080017d0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 80017d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <task1_handler+0x34>)
 80017de:	f000 fd61 	bl	80022a4 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <task1_handler+0x20>
		{
			printf("Task 2 completed\n");
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <task1_handler+0x38>)
 80017ea:	f003 fe65 	bl	80054b8 <puts>
 80017ee:	e7f3      	b.n	80017d8 <task1_handler+0x8>
			//taskYIELD();

		}
		else
		{
			printf("Task 2 not completed\n");
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <task1_handler+0x3c>)
 80017f2:	f003 fe61 	bl	80054b8 <puts>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <task1_handler+0x40>)
 80017fc:	f000 fd6a 	bl	80022d4 <HAL_GPIO_WritePin>
		if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))
 8001800:	e7ea      	b.n	80017d8 <task1_handler+0x8>
 8001802:	bf00      	nop
 8001804:	40020800 	.word	0x40020800
 8001808:	080090f0 	.word	0x080090f0
 800180c:	08009104 	.word	0x08009104
 8001810:	40020000 	.word	0x40020000

08001814 <task2_handler>:
	}

}

static void task2_handler(void * parameters)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	while (1)
	{

		  dht11_start();
 800181c:	f7ff fc48 	bl	80010b0 <dht11_start>
		  Presence = check_response();
 8001820:	f7ff fc6a 	bl	80010f8 <check_response>
 8001824:	4603      	mov	r3, r0
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <task2_handler+0x9c>)
 800182a:	701a      	strb	r2, [r3, #0]
		  Rh_byte1 = data_read();
 800182c:	f7ff fc94 	bl	8001158 <data_read>
 8001830:	4603      	mov	r3, r0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <task2_handler+0xa0>)
 8001836:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = data_read();
 8001838:	f7ff fc8e 	bl	8001158 <data_read>
 800183c:	4603      	mov	r3, r0
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <task2_handler+0xa4>)
 8001842:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = data_read();
 8001844:	f7ff fc88 	bl	8001158 <data_read>
 8001848:	4603      	mov	r3, r0
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <task2_handler+0xa8>)
 800184e:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = data_read();
 8001850:	f7ff fc82 	bl	8001158 <data_read>
 8001854:	4603      	mov	r3, r0
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <task2_handler+0xac>)
 800185a:	701a      	strb	r2, [r3, #0]

		  TEMP = Temp_byte1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <task2_handler+0xa8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <task2_handler+0xb0>)
 8001864:	801a      	strh	r2, [r3, #0]
		  RH = Rh_byte1;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <task2_handler+0xa0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <task2_handler+0xb4>)
 800186e:	801a      	strh	r2, [r3, #0]

		  Display_Temp(TEMP);
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <task2_handler+0xb0>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	eeb0 0a67 	vmov.f32	s0, s15
 8001880:	f7ff fdd8 	bl	8001434 <Display_Temp>
		  Display_Rh(RH);
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <task2_handler+0xb4>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	f7ff fdfe 	bl	8001494 <Display_Rh>

		  HAL_Delay(3000);
 8001898:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800189c:	f000 fa68 	bl	8001d70 <HAL_Delay>
		  LCD_command(0x01);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff fd53 	bl	800134c <LCD_command>
		  delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f7ff fd8d 	bl	80013c6 <delay>
	{
 80018ac:	e7b6      	b.n	800181c <task2_handler+0x8>
 80018ae:	bf00      	nop
 80018b0:	20000254 	.word	0x20000254
 80018b4:	2000024c 	.word	0x2000024c
 80018b8:	2000024d 	.word	0x2000024d
 80018bc:	2000024e 	.word	0x2000024e
 80018c0:	2000024f 	.word	0x2000024f
 80018c4:	20000252 	.word	0x20000252
 80018c8:	20000250 	.word	0x20000250

080018cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018de:	f000 fa27 	bl	8001d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40000c00 	.word	0x40000c00

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_TIM_Base_MspInit+0x48>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d115      	bne.n	800198a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_Base_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0x4c>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_TIM_Base_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2036      	movs	r0, #54	; 0x36
 8001980:	f000 fad2 	bl	8001f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001984:	2036      	movs	r0, #54	; 0x36
 8001986:	f000 faeb 	bl	8001f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40001000 	.word	0x40001000
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_InitTick+0xe4>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_InitTick+0xe4>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_InitTick+0xe4>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c8:	f107 0210 	add.w	r2, r7, #16
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fd9e 	bl	8002514 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019e2:	f000 fd83 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80019e6:	6378      	str	r0, [r7, #52]	; 0x34
 80019e8:	e004      	b.n	80019f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ea:	f000 fd7f 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80019ee:	4603      	mov	r3, r0
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_InitTick+0xe8>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	3b01      	subs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_InitTick+0xec>)
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_InitTick+0xf0>)
 8001a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_InitTick+0xec>)
 8001a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a0e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_InitTick+0xec>)
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_InitTick+0xec>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_InitTick+0xec>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_InitTick+0xec>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <HAL_InitTick+0xec>)
 8001a2a:	f001 fa73 	bl	8002f14 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11b      	bne.n	8001a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <HAL_InitTick+0xec>)
 8001a3e:	f001 fab9 	bl	8002fb4 <HAL_TIM_Base_Start_IT>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d111      	bne.n	8001a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a50:	2032      	movs	r0, #50	; 0x32
 8001a52:	f000 fa85 	bl	8001f60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d808      	bhi.n	8001a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	2032      	movs	r0, #50	; 0x32
 8001a62:	f000 fa61 	bl	8001f28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <HAL_InitTick+0xf4>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e002      	b.n	8001a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	20000258 	.word	0x20000258
 8001a8c:	40000c00 	.word	0x40000c00
 8001a90:	20000004 	.word	0x20000004

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM5_IRQHandler+0x10>)
 8001ac6:	f001 fae5 	bl	8003094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000258 	.word	0x20000258

08001ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <TIM6_DAC_IRQHandler+0x10>)
 8001ada:	f001 fadb 	bl	8003094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000204 	.word	0x20000204

08001ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_kill>:

int _kill(int pid, int sig)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b02:	f002 fdb1 	bl	8004668 <__errno>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2216      	movs	r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_exit>:

void _exit (int status)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffe7 	bl	8001af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2a:	e7fe      	b.n	8001b2a <_exit+0x12>

08001b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
  }

  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e009      	b.n	8001b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf1      	blt.n	8001b78 <_write+0x12>
  }
  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 fd16 	bl	8004668 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	200002a0 	.word	0x200002a0
 8001c70:	20012fe8 	.word	0x20012fe8

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 fcd5 	bl	8004674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fc1b 	bl	8001504 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001cdc:	080095fc 	.word	0x080095fc
  ldr r2, =_sbss
 8001ce0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ce4:	20012fe4 	.word	0x20012fe4

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f8fc 	bl	8001f12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f7ff fe3e 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fdec 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	200002a4 	.word	0x200002a4

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200002a4 	.word	0x200002a4

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff4c 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3a:	f7ff ff61 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f7ff ffb1 	bl	8001eac <NVIC_EncodePriority>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff80 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff54 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e165      	b.n	8002264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8154 	bne.w	800225e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80ae 	beq.w	800225e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_GPIO_Init+0x300>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_GPIO_Init+0x300>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_GPIO_Init+0x300>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_GPIO_Init+0x304>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4f      	ldr	r2, [pc, #316]	; (8002284 <HAL_GPIO_Init+0x308>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x21a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4e      	ldr	r2, [pc, #312]	; (8002288 <HAL_GPIO_Init+0x30c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x216>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4d      	ldr	r2, [pc, #308]	; (800228c <HAL_GPIO_Init+0x310>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x212>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_GPIO_Init+0x314>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x20e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_GPIO_Init+0x318>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x20a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_GPIO_Init+0x31c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x206>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_GPIO_Init+0x320>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x202>
 800217a:	2306      	movs	r3, #6
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800217e:	2307      	movs	r3, #7
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x21c>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4935      	ldr	r1, [pc, #212]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_GPIO_Init+0x324>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021da:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <HAL_GPIO_Init+0x324>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x324>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_GPIO_Init+0x324>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_GPIO_Init+0x324>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_GPIO_Init+0x324>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_GPIO_Init+0x324>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_GPIO_Init+0x324>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae96 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021400 	.word	0x40021400
 800229c:	40021800 	.word	0x40021800
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e001      	b.n	80022c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0cc      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b68      	ldr	r3, [pc, #416]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d90c      	bls.n	8002344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d044      	beq.n	8002428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e067      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4934      	ldr	r1, [pc, #208]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f8:	f7ff fcae 	bl	8001d58 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7ff fcaa 	bl	8001d58 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d20c      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f873 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fa74 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08009124 	.word	0x08009124
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	08009134 	.word	0x08009134

08002514 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	220f      	movs	r2, #15
 8002522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_GetClockConfig+0x5c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_GetClockConfig+0x5c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_RCC_GetClockConfig+0x5c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_RCC_GetClockConfig+0x60>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	601a      	str	r2, [r3, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b0ae      	sub	sp, #184	; 0xb8
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259e:	4bcb      	ldr	r3, [pc, #812]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	f200 8206 	bhi.w	80029b8 <HAL_RCC_GetSysClockFreq+0x440>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	080029b9 	.word	0x080029b9
 80025bc:	080029b9 	.word	0x080029b9
 80025c0:	080029b9 	.word	0x080029b9
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	080029b9 	.word	0x080029b9
 80025cc:	080029b9 	.word	0x080029b9
 80025d0:	080029b9 	.word	0x080029b9
 80025d4:	080025f9 	.word	0x080025f9
 80025d8:	080029b9 	.word	0x080029b9
 80025dc:	080029b9 	.word	0x080029b9
 80025e0:	080029b9 	.word	0x080029b9
 80025e4:	080027e9 	.word	0x080027e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4bb9      	ldr	r3, [pc, #740]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025ee:	e1e7      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4bb8      	ldr	r3, [pc, #736]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025f6:	e1e3      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4bb4      	ldr	r3, [pc, #720]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002604:	4bb1      	ldr	r3, [pc, #708]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d071      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4bae      	ldr	r3, [pc, #696]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800261c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002628:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002636:	4622      	mov	r2, r4
 8002638:	462b      	mov	r3, r5
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	0159      	lsls	r1, r3, #5
 8002644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002648:	0150      	lsls	r0, r2, #5
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4621      	mov	r1, r4
 8002650:	1a51      	subs	r1, r2, r1
 8002652:	6439      	str	r1, [r7, #64]	; 0x40
 8002654:	4629      	mov	r1, r5
 8002656:	eb63 0301 	sbc.w	r3, r3, r1
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002668:	4649      	mov	r1, r9
 800266a:	018b      	lsls	r3, r1, #6
 800266c:	4641      	mov	r1, r8
 800266e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002672:	4641      	mov	r1, r8
 8002674:	018a      	lsls	r2, r1, #6
 8002676:	4641      	mov	r1, r8
 8002678:	1a51      	subs	r1, r2, r1
 800267a:	63b9      	str	r1, [r7, #56]	; 0x38
 800267c:	4649      	mov	r1, r9
 800267e:	eb63 0301 	sbc.w	r3, r3, r1
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002690:	4649      	mov	r1, r9
 8002692:	00cb      	lsls	r3, r1, #3
 8002694:	4641      	mov	r1, r8
 8002696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269a:	4641      	mov	r1, r8
 800269c:	00ca      	lsls	r2, r1, #3
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	4622      	mov	r2, r4
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
 80026aa:	462b      	mov	r3, r5
 80026ac:	460a      	mov	r2, r1
 80026ae:	eb42 0303 	adc.w	r3, r2, r3
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026c0:	4629      	mov	r1, r5
 80026c2:	024b      	lsls	r3, r1, #9
 80026c4:	4621      	mov	r1, r4
 80026c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ca:	4621      	mov	r1, r4
 80026cc:	024a      	lsls	r2, r1, #9
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026e4:	f7fe faf0 	bl	8000cc8 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026f2:	e067      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002700:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270c:	67bb      	str	r3, [r7, #120]	; 0x78
 800270e:	2300      	movs	r3, #0
 8002710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002712:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002716:	4622      	mov	r2, r4
 8002718:	462b      	mov	r3, r5
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	0159      	lsls	r1, r3, #5
 8002724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002728:	0150      	lsls	r0, r2, #5
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4621      	mov	r1, r4
 8002730:	1a51      	subs	r1, r2, r1
 8002732:	62b9      	str	r1, [r7, #40]	; 0x28
 8002734:	4629      	mov	r1, r5
 8002736:	eb63 0301 	sbc.w	r3, r3, r1
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002748:	4649      	mov	r1, r9
 800274a:	018b      	lsls	r3, r1, #6
 800274c:	4641      	mov	r1, r8
 800274e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002752:	4641      	mov	r1, r8
 8002754:	018a      	lsls	r2, r1, #6
 8002756:	4641      	mov	r1, r8
 8002758:	ebb2 0a01 	subs.w	sl, r2, r1
 800275c:	4649      	mov	r1, r9
 800275e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800276e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002776:	4692      	mov	sl, r2
 8002778:	469b      	mov	fp, r3
 800277a:	4623      	mov	r3, r4
 800277c:	eb1a 0303 	adds.w	r3, sl, r3
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	462b      	mov	r3, r5
 8002784:	eb4b 0303 	adc.w	r3, fp, r3
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002796:	4629      	mov	r1, r5
 8002798:	028b      	lsls	r3, r1, #10
 800279a:	4621      	mov	r1, r4
 800279c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a0:	4621      	mov	r1, r4
 80027a2:	028a      	lsls	r2, r1, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ac:	2200      	movs	r2, #0
 80027ae:	673b      	str	r3, [r7, #112]	; 0x70
 80027b0:	677a      	str	r2, [r7, #116]	; 0x74
 80027b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027b6:	f7fe fa87 	bl	8000cc8 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4613      	mov	r3, r2
 80027c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80027d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027e6:	e0eb      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d06b      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2200      	movs	r2, #0
 8002808:	66bb      	str	r3, [r7, #104]	; 0x68
 800280a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800280c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	663b      	str	r3, [r7, #96]	; 0x60
 8002814:	2300      	movs	r3, #0
 8002816:	667b      	str	r3, [r7, #100]	; 0x64
 8002818:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800281c:	4622      	mov	r2, r4
 800281e:	462b      	mov	r3, r5
 8002820:	f04f 0000 	mov.w	r0, #0
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	0159      	lsls	r1, r3, #5
 800282a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282e:	0150      	lsls	r0, r2, #5
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4621      	mov	r1, r4
 8002836:	1a51      	subs	r1, r2, r1
 8002838:	61b9      	str	r1, [r7, #24]
 800283a:	4629      	mov	r1, r5
 800283c:	eb63 0301 	sbc.w	r3, r3, r1
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800284e:	4659      	mov	r1, fp
 8002850:	018b      	lsls	r3, r1, #6
 8002852:	4651      	mov	r1, sl
 8002854:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002858:	4651      	mov	r1, sl
 800285a:	018a      	lsls	r2, r1, #6
 800285c:	4651      	mov	r1, sl
 800285e:	ebb2 0801 	subs.w	r8, r2, r1
 8002862:	4659      	mov	r1, fp
 8002864:	eb63 0901 	sbc.w	r9, r3, r1
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002874:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002878:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800287c:	4690      	mov	r8, r2
 800287e:	4699      	mov	r9, r3
 8002880:	4623      	mov	r3, r4
 8002882:	eb18 0303 	adds.w	r3, r8, r3
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	462b      	mov	r3, r5
 800288a:	eb49 0303 	adc.w	r3, r9, r3
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800289c:	4629      	mov	r1, r5
 800289e:	024b      	lsls	r3, r1, #9
 80028a0:	4621      	mov	r1, r4
 80028a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a6:	4621      	mov	r1, r4
 80028a8:	024a      	lsls	r2, r1, #9
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028b2:	2200      	movs	r2, #0
 80028b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028bc:	f7fe fa04 	bl	8000cc8 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ca:	e065      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x420>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	2200      	movs	r2, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	4611      	mov	r1, r2
 80028e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028e8:	653b      	str	r3, [r7, #80]	; 0x50
 80028ea:	2300      	movs	r3, #0
 80028ec:	657b      	str	r3, [r7, #84]	; 0x54
 80028ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028f2:	4642      	mov	r2, r8
 80028f4:	464b      	mov	r3, r9
 80028f6:	f04f 0000 	mov.w	r0, #0
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	0159      	lsls	r1, r3, #5
 8002900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002904:	0150      	lsls	r0, r2, #5
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4641      	mov	r1, r8
 800290c:	1a51      	subs	r1, r2, r1
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	4649      	mov	r1, r9
 8002912:	eb63 0301 	sbc.w	r3, r3, r1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002924:	4659      	mov	r1, fp
 8002926:	018b      	lsls	r3, r1, #6
 8002928:	4651      	mov	r1, sl
 800292a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800292e:	4651      	mov	r1, sl
 8002930:	018a      	lsls	r2, r1, #6
 8002932:	4651      	mov	r1, sl
 8002934:	1a54      	subs	r4, r2, r1
 8002936:	4659      	mov	r1, fp
 8002938:	eb63 0501 	sbc.w	r5, r3, r1
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
 8002950:	4643      	mov	r3, r8
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	464b      	mov	r3, r9
 8002958:	eb45 0303 	adc.w	r3, r5, r3
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002980:	2200      	movs	r2, #0
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
 8002984:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002986:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800298a:	f7fe f99d 	bl	8000cc8 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4613      	mov	r3, r2
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0f1b      	lsrs	r3, r3, #28
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029b6:	e003      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	37b8      	adds	r7, #184	; 0xb8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00f42400 	.word	0x00f42400

080029d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e28d      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8083 	beq.w	8002afe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029f8:	4b94      	ldr	r3, [pc, #592]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d019      	beq.n	8002a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a04:	4b91      	ldr	r3, [pc, #580]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a10:	4b8e      	ldr	r3, [pc, #568]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b84      	ldr	r3, [pc, #528]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x124>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e25a      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x90>
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7b      	ldr	r2, [pc, #492]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xcc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0xb4>
 8002a72:	4b76      	ldr	r3, [pc, #472]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a72      	ldr	r2, [pc, #456]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xcc>
 8002a8c:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6e      	ldr	r2, [pc, #440]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6b      	ldr	r2, [pc, #428]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f954 	bl	8001d58 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff f950 	bl	8001d58 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e21f      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xdc>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f940 	bl	8001d58 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff f93c 	bl	8001d58 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e20b      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x104>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06f      	beq.n	8002bea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b0a:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b16:	4b4d      	ldr	r3, [pc, #308]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b22:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b41      	ldr	r3, [pc, #260]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x186>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1d3      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4937      	ldr	r1, [pc, #220]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7ff f8e9 	bl	8001d58 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7ff f8e5 	bl	8001d58 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1b4      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4925      	ldr	r1, [pc, #148]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f8c8 	bl	8001d58 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f8c4 	bl	8001d58 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e193      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7ff f8a8 	bl	8001d58 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7ff f8a4 	bl	8001d58 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e173      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x234>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7ff f891 	bl	8001d58 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7ff f88d 	bl	8001d58 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e15c      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b7f      	ldr	r3, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7ff f84d 	bl	8001d58 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7ff f849 	bl	8001d58 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e118      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x31e>
 8002ce8:	4b66      	ldr	r3, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x358>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x340>
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a5d      	ldr	r2, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x358>
 8002d18:	4b5a      	ldr	r3, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a59      	ldr	r2, [pc, #356]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a56      	ldr	r2, [pc, #344]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7ff f80e 	bl	8001d58 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7ff f80a 	bl	8001d58 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0d7      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ee      	beq.n	8002d40 <HAL_RCC_OscConfig+0x368>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fff8 	bl	8001d58 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fff4 	bl	8001d58 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0c1      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80ad 	beq.w	8002f04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d060      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d145      	bne.n	8002e4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe ffc8 	bl	8001d58 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe ffc4 	bl	8001d58 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e093      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	491b      	ldr	r1, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe ff99 	bl	8001d58 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe ff95 	bl	8001d58 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e064      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x452>
 8002e48:	e05c      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe ff82 	bl	8001d58 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe ff7e 	bl	8001d58 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e04d      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
 8002e76:	e045      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e040      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_RCC_OscConfig+0x538>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d030      	beq.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d129      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d122      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d119      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10f      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e041      	b.n	8002faa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fd06 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 f9ce 	bl	80032f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e04e      	b.n	800306a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a23      	ldr	r2, [pc, #140]	; (8003078 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d022      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff6:	d01d      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_Base_Start_IT+0xcc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_TIM_Base_Start_IT+0xd0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_TIM_Base_Start_IT+0xd4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_TIM_Base_Start_IT+0xd8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x80>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_TIM_Base_Start_IT+0xdc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d111      	bne.n	8003058 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d010      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	e007      	b.n	8003068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40010400 	.word	0x40010400
 800308c:	40014000 	.word	0x40014000
 8003090:	40001800 	.word	0x40001800

08003094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0202 	mvn.w	r2, #2
 80030c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8ee 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8e0 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8f1 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0204 	mvn.w	r2, #4
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8c4 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8b6 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8c7 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b08      	cmp	r3, #8
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0208 	mvn.w	r2, #8
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2204      	movs	r2, #4
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f89a 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f88c 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f89d 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2208      	movs	r2, #8
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f870 	bl	80032b8 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f862 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f873 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0201 	mvn.w	r2, #1
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe fb5a 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f97e 	bl	8003540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f838 	bl	80032e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b20      	cmp	r3, #32
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0220 	mvn.w	r2, #32
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f948 	bl	800352c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <TIM_Base_SetConfig+0x114>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d00f      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3d      	ldr	r2, [pc, #244]	; (800340c <TIM_Base_SetConfig+0x118>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00b      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3c      	ldr	r2, [pc, #240]	; (8003410 <TIM_Base_SetConfig+0x11c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <TIM_Base_SetConfig+0x120>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <TIM_Base_SetConfig+0x124>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d108      	bne.n	8003346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <TIM_Base_SetConfig+0x114>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d027      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <TIM_Base_SetConfig+0x118>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d023      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <TIM_Base_SetConfig+0x11c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01f      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <TIM_Base_SetConfig+0x120>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <TIM_Base_SetConfig+0x124>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d017      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a28      	ldr	r2, [pc, #160]	; (800341c <TIM_Base_SetConfig+0x128>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <TIM_Base_SetConfig+0x12c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00f      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <TIM_Base_SetConfig+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_Base_SetConfig+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <TIM_Base_SetConfig+0x138>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a23      	ldr	r2, [pc, #140]	; (8003430 <TIM_Base_SetConfig+0x13c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <TIM_Base_SetConfig+0x114>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_Base_SetConfig+0xf8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <TIM_Base_SetConfig+0x124>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	615a      	str	r2, [r3, #20]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40010400 	.word	0x40010400
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	40001800 	.word	0x40001800
 800342c:	40001c00 	.word	0x40001c00
 8003430:	40002000 	.word	0x40002000

08003434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003448:	2302      	movs	r3, #2
 800344a:	e05a      	b.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d01d      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10c      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40010400 	.word	0x40010400
 8003524:	40014000 	.word	0x40014000
 8003528:	40001800 	.word	0x40001800

0800352c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f103 0208 	add.w	r2, r3, #8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800356c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f103 0208 	add.w	r2, r3, #8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f103 0208 	add.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6852      	ldr	r2, [r2, #4]
 8003616:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d103      	bne.n	800362a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	1e5a      	subs	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800364a:	b580      	push	{r7, lr}
 800364c:	b08c      	sub	sp, #48	; 0x30
 800364e:	af04      	add	r7, sp, #16
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fe04 	bl	800426c <pvPortMalloc>
 8003664:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800366c:	2058      	movs	r0, #88	; 0x58
 800366e:	f000 fdfd 	bl	800426c <pvPortMalloc>
 8003672:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
 8003680:	e005      	b.n	800368e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f000 fed2 	bl	800442c <vPortFree>
 8003688:	e001      	b.n	800368e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	2300      	movs	r3, #0
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f80e 	bl	80036cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80036b0:	69f8      	ldr	r0, [r7, #28]
 80036b2:	f000 f8a1 	bl	80037f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e002      	b.n	80036c2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80036c2:	69bb      	ldr	r3, [r7, #24]
    }
 80036c4:	4618      	mov	r0, r3
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	21a5      	movs	r1, #165	; 0xa5
 80036e6:	f000 fff7 	bl	80046d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036f4:	3b01      	subs	r3, #1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f023 0307 	bic.w	r3, r3, #7
 8003702:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01f      	beq.n	800376a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e012      	b.n	8003756 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	7819      	ldrb	r1, [r3, #0]
 8003738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	3334      	adds	r3, #52	; 0x34
 8003740:	460a      	mov	r2, r1
 8003742:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d9e9      	bls.n	8003730 <prvInitialiseNewTask+0x64>
 800375c:	e000      	b.n	8003760 <prvInitialiseNewTask+0x94>
            {
                break;
 800375e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003768:	e003      	b.n	8003772 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	2b04      	cmp	r3, #4
 8003776:	d901      	bls.n	800377c <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003778:	2304      	movs	r3, #4
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003786:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	2200      	movs	r2, #0
 800378c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	3304      	adds	r3, #4
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fefe 	bl	8003594 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	3318      	adds	r3, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fef9 	bl	8003594 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	f1c3 0205 	rsb	r2, r3, #5
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	3350      	adds	r3, #80	; 0x50
 80037bc:	2204      	movs	r2, #4
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ff89 	bl	80046d8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	3354      	adds	r3, #84	; 0x54
 80037ca:	2201      	movs	r2, #1
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 ff82 	bl	80046d8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	69b8      	ldr	r0, [r7, #24]
 80037da:	f000 fb37 	bl	8003e4c <pxPortInitialiseStack>
 80037de:	4602      	mov	r2, r0
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003800:	f000 fc52 	bl	80040a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <prvAddNewTaskToReadyList+0xc0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a2b      	ldr	r2, [pc, #172]	; (80038b8 <prvAddNewTaskToReadyList+0xc0>)
 800380c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800380e:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800381c:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <prvAddNewTaskToReadyList+0xc0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d110      	bne.n	8003846 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003824:	f000 fa78 	bl	8003d18 <prvInitialiseTaskLists>
 8003828:	e00d      	b.n	8003846 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <prvAddNewTaskToReadyList+0xc8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d802      	bhi.n	8003846 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003840:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <prvAddNewTaskToReadyList+0xcc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <prvAddNewTaskToReadyList+0xcc>)
 800384e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003850:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <prvAddNewTaskToReadyList+0xcc>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <prvAddNewTaskToReadyList+0xd0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <prvAddNewTaskToReadyList+0xd0>)
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <prvAddNewTaskToReadyList+0xd4>)
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7ff fe94 	bl	80035ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003886:	f000 fc3f 	bl	8004108 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <prvAddNewTaskToReadyList+0xc8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <prvAddNewTaskToReadyList+0xd8>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000380 	.word	0x20000380
 80038bc:	200002a8 	.word	0x200002a8
 80038c0:	2000038c 	.word	0x2000038c
 80038c4:	2000039c 	.word	0x2000039c
 80038c8:	20000388 	.word	0x20000388
 80038cc:	200002ac 	.word	0x200002ac
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <vTaskStartScheduler+0x7c>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	2282      	movs	r2, #130	; 0x82
 80038e6:	491b      	ldr	r1, [pc, #108]	; (8003954 <vTaskStartScheduler+0x80>)
 80038e8:	481b      	ldr	r0, [pc, #108]	; (8003958 <vTaskStartScheduler+0x84>)
 80038ea:	f7ff feae 	bl	800364a <xTaskCreate>
 80038ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d116      	bne.n	8003924 <vTaskStartScheduler+0x50>
        __asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60bb      	str	r3, [r7, #8]
    }
 8003908:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800390a:	4b14      	ldr	r3, [pc, #80]	; (800395c <vTaskStartScheduler+0x88>)
 800390c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003910:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <vTaskStartScheduler+0x8c>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <vTaskStartScheduler+0x90>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800391e:	f000 fb21 	bl	8003f64 <xPortStartScheduler>
 8003922:	e00e      	b.n	8003942 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392a:	d10a      	bne.n	8003942 <vTaskStartScheduler+0x6e>
        __asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	607b      	str	r3, [r7, #4]
    }
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <vTaskStartScheduler+0x94>)
 8003944:	681b      	ldr	r3, [r3, #0]
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200003a4 	.word	0x200003a4
 8003954:	0800911c 	.word	0x0800911c
 8003958:	08003ce9 	.word	0x08003ce9
 800395c:	200003a0 	.word	0x200003a0
 8003960:	2000038c 	.word	0x2000038c
 8003964:	20000384 	.word	0x20000384
 8003968:	2000000c 	.word	0x2000000c

0800396c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <vTaskSuspendAll+0x18>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	4a03      	ldr	r2, [pc, #12]	; (8003984 <vTaskSuspendAll+0x18>)
 8003978:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	200003a8 	.word	0x200003a8

08003988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <xTaskResumeAll+0x114>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	603b      	str	r3, [r7, #0]
    }
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80039b4:	f000 fb78 	bl	80040a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <xTaskResumeAll+0x114>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	4a37      	ldr	r2, [pc, #220]	; (8003a9c <xTaskResumeAll+0x114>)
 80039c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <xTaskResumeAll+0x114>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d161      	bne.n	8003a8e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ca:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <xTaskResumeAll+0x118>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d05d      	beq.n	8003a8e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d2:	e02e      	b.n	8003a32 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d4:	4b33      	ldr	r3, [pc, #204]	; (8003aa4 <xTaskResumeAll+0x11c>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3318      	adds	r3, #24
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fe08 	bl	80035f6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fe03 	bl	80035f6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <xTaskResumeAll+0x120>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <xTaskResumeAll+0x120>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a27      	ldr	r2, [pc, #156]	; (8003aac <xTaskResumeAll+0x124>)
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7ff fdc8 	bl	80035ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <xTaskResumeAll+0x128>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <xTaskResumeAll+0x12c>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a32:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <xTaskResumeAll+0x11c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cc      	bne.n	80039d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a40:	f000 f9e8 	bl	8003e14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <xTaskResumeAll+0x130>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a50:	f000 f836 	bl	8003ac0 <xTaskIncrementTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <xTaskResumeAll+0x12c>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f1      	bne.n	8003a50 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <xTaskResumeAll+0x130>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <xTaskResumeAll+0x12c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <xTaskResumeAll+0x134>)
 8003a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a8e:	f000 fb3b 	bl	8004108 <vPortExitCritical>

    return xAlreadyYielded;
 8003a92:	68bb      	ldr	r3, [r7, #8]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200003a8 	.word	0x200003a8
 8003aa0:	20000380 	.word	0x20000380
 8003aa4:	20000340 	.word	0x20000340
 8003aa8:	20000388 	.word	0x20000388
 8003aac:	200002ac 	.word	0x200002ac
 8003ab0:	200002a8 	.word	0x200002a8
 8003ab4:	20000394 	.word	0x20000394
 8003ab8:	20000390 	.word	0x20000390
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	4b4e      	ldr	r3, [pc, #312]	; (8003c04 <xTaskIncrementTick+0x144>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 808e 	bne.w	8003bf0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <xTaskIncrementTick+0x148>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003adc:	4a4a      	ldr	r2, [pc, #296]	; (8003c08 <xTaskIncrementTick+0x148>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d120      	bne.n	8003b2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <xTaskIncrementTick+0x14c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <xTaskIncrementTick+0x48>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	603b      	str	r3, [r7, #0]
    }
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <xTaskIncrementTick+0x46>
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <xTaskIncrementTick+0x14c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <xTaskIncrementTick+0x150>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a3e      	ldr	r2, [pc, #248]	; (8003c0c <xTaskIncrementTick+0x14c>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <xTaskIncrementTick+0x150>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <xTaskIncrementTick+0x154>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <xTaskIncrementTick+0x154>)
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	f000 f975 	bl	8003e14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <xTaskIncrementTick+0x158>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d348      	bcc.n	8003bc6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <xTaskIncrementTick+0x14c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <xTaskIncrementTick+0x158>)
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b44:	601a      	str	r2, [r3, #0]
                    break;
 8003b46:	e03e      	b.n	8003bc6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <xTaskIncrementTick+0x14c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d203      	bcs.n	8003b68 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b60:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <xTaskIncrementTick+0x158>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b66:	e02e      	b.n	8003bc6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fd42 	bl	80035f6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd39 	bl	80035f6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <xTaskIncrementTick+0x15c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <xTaskIncrementTick+0x15c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <xTaskIncrementTick+0x160>)
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f7ff fcfe 	bl	80035ae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <xTaskIncrementTick+0x164>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d3b9      	bcc.n	8003b34 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc4:	e7b6      	b.n	8003b34 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <xTaskIncrementTick+0x164>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4914      	ldr	r1, [pc, #80]	; (8003c20 <xTaskIncrementTick+0x160>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d901      	bls.n	8003be2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003bde:	2301      	movs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <xTaskIncrementTick+0x168>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e004      	b.n	8003bfa <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <xTaskIncrementTick+0x16c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <xTaskIncrementTick+0x16c>)
 8003bf8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003bfa:	697b      	ldr	r3, [r7, #20]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200003a8 	.word	0x200003a8
 8003c08:	20000384 	.word	0x20000384
 8003c0c:	20000338 	.word	0x20000338
 8003c10:	2000033c 	.word	0x2000033c
 8003c14:	20000398 	.word	0x20000398
 8003c18:	200003a0 	.word	0x200003a0
 8003c1c:	20000388 	.word	0x20000388
 8003c20:	200002ac 	.word	0x200002ac
 8003c24:	200002a8 	.word	0x200002a8
 8003c28:	20000394 	.word	0x20000394
 8003c2c:	20000390 	.word	0x20000390

08003c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c36:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <vTaskSwitchContext+0xa4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <vTaskSwitchContext+0xa8>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003c44:	e03f      	b.n	8003cc6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <vTaskSwitchContext+0xa8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <vTaskSwitchContext+0xac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f1c3 031f 	rsb	r3, r3, #31
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <vTaskSwitchContext+0xb0>)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	607b      	str	r3, [r7, #4]
    }
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <vTaskSwitchContext+0x5a>
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <vTaskSwitchContext+0xb0>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3308      	adds	r3, #8
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d104      	bne.n	8003cbc <vTaskSwitchContext+0x8c>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <vTaskSwitchContext+0xb4>)
 8003cc4:	6013      	str	r3, [r2, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200003a8 	.word	0x200003a8
 8003cd8:	20000394 	.word	0x20000394
 8003cdc:	20000388 	.word	0x20000388
 8003ce0:	200002ac 	.word	0x200002ac
 8003ce4:	200002a8 	.word	0x200002a8

08003ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003cf0:	f000 f852 	bl	8003d98 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <prvIdleTask+0x28>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d9f9      	bls.n	8003cf0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <prvIdleTask+0x2c>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d0c:	e7f0      	b.n	8003cf0 <prvIdleTask+0x8>
 8003d0e:	bf00      	nop
 8003d10:	200002ac 	.word	0x200002ac
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e00c      	b.n	8003d3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <prvInitialiseTaskLists+0x60>)
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fc0e 	bl	8003554 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d9ef      	bls.n	8003d24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d44:	480d      	ldr	r0, [pc, #52]	; (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d46:	f7ff fc05 	bl	8003554 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d4a:	480d      	ldr	r0, [pc, #52]	; (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d4c:	f7ff fc02 	bl	8003554 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d50:	480c      	ldr	r0, [pc, #48]	; (8003d84 <prvInitialiseTaskLists+0x6c>)
 8003d52:	f7ff fbff 	bl	8003554 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003d56:	480c      	ldr	r0, [pc, #48]	; (8003d88 <prvInitialiseTaskLists+0x70>)
 8003d58:	f7ff fbfc 	bl	8003554 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003d5c:	480b      	ldr	r0, [pc, #44]	; (8003d8c <prvInitialiseTaskLists+0x74>)
 8003d5e:	f7ff fbf9 	bl	8003554 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <prvInitialiseTaskLists+0x78>)
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <prvInitialiseTaskLists+0x7c>)
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200002ac 	.word	0x200002ac
 8003d7c:	20000310 	.word	0x20000310
 8003d80:	20000324 	.word	0x20000324
 8003d84:	20000340 	.word	0x20000340
 8003d88:	20000354 	.word	0x20000354
 8003d8c:	2000036c 	.word	0x2000036c
 8003d90:	20000338 	.word	0x20000338
 8003d94:	2000033c 	.word	0x2000033c

08003d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d9e:	e019      	b.n	8003dd4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003da0:	f000 f982 	bl	80040a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <prvCheckTasksWaitingTermination+0x50>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fc20 	bl	80035f6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003dbe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003dca:	f000 f99d 	bl	8004108 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f810 	bl	8003df4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000354 	.word	0x20000354
 8003dec:	20000380 	.word	0x20000380
 8003df0:	20000368 	.word	0x20000368

08003df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fb13 	bl	800442c <vPortFree>
                vPortFree( pxTCB );
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fb10 	bl	800442c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <prvResetNextTaskUnblockTime+0x30>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <prvResetNextTaskUnblockTime+0x34>)
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e2a:	e005      	b.n	8003e38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <prvResetNextTaskUnblockTime+0x30>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <prvResetNextTaskUnblockTime+0x34>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000338 	.word	0x20000338
 8003e48:	200003a0 	.word	0x200003a0

08003e4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b04      	subs	r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <pxPortInitialiseStack+0x64>)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b14      	subs	r3, #20
 8003e86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b04      	subs	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f06f 0202 	mvn.w	r2, #2
 8003e9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b20      	subs	r3, #32
 8003ea0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	08003eb5 	.word	0x08003eb5

08003eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <prvTaskExitError+0x54>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec6:	d00a      	beq.n	8003ede <prvTaskExitError+0x2a>
        __asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	60fb      	str	r3, [r7, #12]
    }
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <prvTaskExitError+0x28>
        __asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60bb      	str	r3, [r7, #8]
    }
 8003ef0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ef2:	bf00      	nop
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0fc      	beq.n	8003ef4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000010 	.word	0x20000010
 8003f0c:	00000000 	.word	0x00000000

08003f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <pxCurrentTCBConst2>)
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	f380 8809 	msr	PSP, r0
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	4770      	bx	lr
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst2>:
 8003f30:	200002a8 	.word	0x200002a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f38:	4808      	ldr	r0, [pc, #32]	; (8003f5c <prvPortStartFirstTask+0x24>)
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	6800      	ldr	r0, [r0, #0]
 8003f3e:	f380 8808 	msr	MSP, r0
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8814 	msr	CONTROL, r0
 8003f4a:	b662      	cpsie	i
 8003f4c:	b661      	cpsie	f
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	df00      	svc	0
 8003f58:	bf00      	nop
 8003f5a:	0000      	.short	0x0000
 8003f5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop

08003f64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f6a:	4b46      	ldr	r3, [pc, #280]	; (8004084 <xPortStartScheduler+0x120>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a46      	ldr	r2, [pc, #280]	; (8004088 <xPortStartScheduler+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10a      	bne.n	8003f8a <xPortStartScheduler+0x26>
        __asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	613b      	str	r3, [r7, #16]
    }
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <xPortStartScheduler+0x120>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <xPortStartScheduler+0x128>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10a      	bne.n	8003faa <xPortStartScheduler+0x46>
        __asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
    }
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <xPortStartScheduler+0x12c>)
 8003fac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <xPortStartScheduler+0x130>)
 8003fd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <xPortStartScheduler+0x134>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fd8:	e009      	b.n	8003fee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fda:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <xPortStartScheduler+0x134>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <xPortStartScheduler+0x134>)
 8003fe2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d0ef      	beq.n	8003fda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <xPortStartScheduler+0x134>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1c3 0307 	rsb	r3, r3, #7
 8004002:	2b04      	cmp	r3, #4
 8004004:	d00a      	beq.n	800401c <xPortStartScheduler+0xb8>
        __asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60bb      	str	r3, [r7, #8]
    }
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800401c:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <xPortStartScheduler+0x134>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <xPortStartScheduler+0x134>)
 8004024:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <xPortStartScheduler+0x134>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <xPortStartScheduler+0x134>)
 8004030:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <xPortStartScheduler+0x138>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a17      	ldr	r2, [pc, #92]	; (800409c <xPortStartScheduler+0x138>)
 8004040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004044:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <xPortStartScheduler+0x138>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a14      	ldr	r2, [pc, #80]	; (800409c <xPortStartScheduler+0x138>)
 800404c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004050:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004052:	f000 f8db 	bl	800420c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <xPortStartScheduler+0x13c>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800405c:	f000 f8fa 	bl	8004254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <xPortStartScheduler+0x140>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <xPortStartScheduler+0x140>)
 8004066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800406c:	f7ff ff64 	bl	8003f38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004070:	f7ff fdde 	bl	8003c30 <vTaskSwitchContext>
    prvTaskExitError();
 8004074:	f7ff ff1e 	bl	8003eb4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000ed00 	.word	0xe000ed00
 8004088:	410fc271 	.word	0x410fc271
 800408c:	410fc270 	.word	0x410fc270
 8004090:	e000e400 	.word	0xe000e400
 8004094:	200003ac 	.word	0x200003ac
 8004098:	200003b0 	.word	0x200003b0
 800409c:	e000ed20 	.word	0xe000ed20
 80040a0:	20000010 	.word	0x20000010
 80040a4:	e000ef34 	.word	0xe000ef34

080040a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
        __asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
    }
 80040c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <vPortEnterCritical+0x58>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <vPortEnterCritical+0x58>)
 80040ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <vPortEnterCritical+0x58>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10f      	bne.n	80040f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <vPortEnterCritical+0x5c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	603b      	str	r3, [r7, #0]
    }
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <vPortEnterCritical+0x4a>
    }
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000010 	.word	0x20000010
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <vPortExitCritical+0x50>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <vPortExitCritical+0x24>
        __asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	607b      	str	r3, [r7, #4]
    }
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <vPortExitCritical+0x50>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3b01      	subs	r3, #1
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <vPortExitCritical+0x50>)
 8004134:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <vPortExitCritical+0x50>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <vPortExitCritical+0x42>
 800413e:	2300      	movs	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004148:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000010 	.word	0x20000010
 800415c:	00000000 	.word	0x00000000

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7ff fd4e 	bl	8003c30 <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	200002a8 	.word	0x200002a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
    }
 80041e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041e2:	f7ff fc6d 	bl	8003ac0 <xTaskIncrementTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <SysTick_Handler+0x40>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f383 8811 	msr	BASEPRI, r3
    }
 80041fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <vPortSetupTimerInterrupt+0x38>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x3c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <vPortSetupTimerInterrupt+0x40>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <vPortSetupTimerInterrupt+0x44>)
 800422a:	3b01      	subs	r3, #1
 800422c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010
 8004244:	e000e018 	.word	0xe000e018
 8004248:	20000000 	.word	0x20000000
 800424c:	10624dd3 	.word	0x10624dd3
 8004250:	e000e014 	.word	0xe000e014

08004254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004264 <vPortEnableVFP+0x10>
 8004258:	6801      	ldr	r1, [r0, #0]
 800425a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425e:	6001      	str	r1, [r0, #0]
 8004260:	4770      	bx	lr
 8004262:	0000      	.short	0x0000
 8004264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop

0800426c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004278:	f7ff fb78 	bl	800396c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800427c:	4b65      	ldr	r3, [pc, #404]	; (8004414 <pvPortMalloc+0x1a8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004284:	f000 f934 	bl	80044f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004288:	4b63      	ldr	r3, [pc, #396]	; (8004418 <pvPortMalloc+0x1ac>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 80a7 	bne.w	80043e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02d      	beq.n	80042f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800429c:	2208      	movs	r2, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d227      	bcs.n	80042f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80042a8:	2208      	movs	r2, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f023 0307 	bic.w	r3, r3, #7
 80042c0:	3308      	adds	r3, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d214      	bcs.n	80042f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	3308      	adds	r3, #8
 80042d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <pvPortMalloc+0x92>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	617b      	str	r3, [r7, #20]
    }
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042f6:	e002      	b.n	80042fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e000      	b.n	8004300 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06e      	beq.n	80043e4 <pvPortMalloc+0x178>
 8004306:	4b45      	ldr	r3, [pc, #276]	; (800441c <pvPortMalloc+0x1b0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d869      	bhi.n	80043e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004310:	4b43      	ldr	r3, [pc, #268]	; (8004420 <pvPortMalloc+0x1b4>)
 8004312:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <pvPortMalloc+0x1b4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800431a:	e004      	b.n	8004326 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d903      	bls.n	8004338 <pvPortMalloc+0xcc>
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f1      	bne.n	800431c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <pvPortMalloc+0x1a8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	429a      	cmp	r2, r3
 8004340:	d050      	beq.n	80043e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2208      	movs	r2, #8
 8004348:	4413      	add	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	2308      	movs	r3, #8
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	429a      	cmp	r2, r3
 8004362:	d91f      	bls.n	80043a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <pvPortMalloc+0x120>
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	613b      	str	r3, [r7, #16]
    }
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f000 f908 	bl	80045b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <pvPortMalloc+0x1b0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a1b      	ldr	r2, [pc, #108]	; (800441c <pvPortMalloc+0x1b0>)
 80043b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <pvPortMalloc+0x1b0>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <pvPortMalloc+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d203      	bcs.n	80043c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <pvPortMalloc+0x1b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <pvPortMalloc+0x1b8>)
 80043c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <pvPortMalloc+0x1ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <pvPortMalloc+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a11      	ldr	r2, [pc, #68]	; (8004428 <pvPortMalloc+0x1bc>)
 80043e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043e4:	f7ff fad0 	bl	8003988 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <pvPortMalloc+0x19c>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60fb      	str	r3, [r7, #12]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <pvPortMalloc+0x19a>
    return pvReturn;
 8004408:	69fb      	ldr	r3, [r7, #28]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3728      	adds	r7, #40	; 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20012fbc 	.word	0x20012fbc
 8004418:	20012fd0 	.word	0x20012fd0
 800441c:	20012fc0 	.word	0x20012fc0
 8004420:	20012fb4 	.word	0x20012fb4
 8004424:	20012fc4 	.word	0x20012fc4
 8004428:	20012fc8 	.word	0x20012fc8

0800442c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04d      	beq.n	80044da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800443e:	2308      	movs	r3, #8
 8004440:	425b      	negs	r3, r3
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <vPortFree+0xb8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <vPortFree+0x44>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <vPortFree+0x62>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <vPortFree+0xb8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01e      	beq.n	80044da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11a      	bne.n	80044da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <vPortFree+0xb8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80044b4:	f7ff fa5a 	bl	800396c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <vPortFree+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <vPortFree+0xbc>)
 80044c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044c6:	6938      	ldr	r0, [r7, #16]
 80044c8:	f000 f874 	bl	80045b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <vPortFree+0xc0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3301      	adds	r3, #1
 80044d2:	4a06      	ldr	r2, [pc, #24]	; (80044ec <vPortFree+0xc0>)
 80044d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044d6:	f7ff fa57 	bl	8003988 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20012fd0 	.word	0x20012fd0
 80044e8:	20012fc0 	.word	0x20012fc0
 80044ec:	20012fcc 	.word	0x20012fcc

080044f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <prvHeapInit+0xac>)
 80044fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3307      	adds	r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <prvHeapInit+0xac>)
 8004520:	4413      	add	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <prvHeapInit+0xb0>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <prvHeapInit+0xb0>)
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4413      	add	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800453c:	2208      	movs	r2, #8
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0307 	bic.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <prvHeapInit+0xb4>)
 8004550:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <prvHeapInit+0xb4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvHeapInit+0xb4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvHeapInit+0xb4>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <prvHeapInit+0xb8>)
 800457e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <prvHeapInit+0xbc>)
 8004586:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <prvHeapInit+0xc0>)
 800458a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	200003b4 	.word	0x200003b4
 80045a0:	20012fb4 	.word	0x20012fb4
 80045a4:	20012fbc 	.word	0x20012fbc
 80045a8:	20012fc4 	.word	0x20012fc4
 80045ac:	20012fc0 	.word	0x20012fc0
 80045b0:	20012fd0 	.word	0x20012fd0

080045b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <prvInsertBlockIntoFreeList+0xac>)
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e002      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x14>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d8f7      	bhi.n	80045c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d108      	bne.n	80045f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d118      	bne.n	800463c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <prvInsertBlockIntoFreeList+0xb0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d00d      	beq.n	8004632 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e008      	b.n	8004644 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <prvInsertBlockIntoFreeList+0xb0>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e003      	b.n	8004644 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d002      	beq.n	8004652 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20012fb4 	.word	0x20012fb4
 8004664:	20012fbc 	.word	0x20012fbc

08004668 <__errno>:
 8004668:	4b01      	ldr	r3, [pc, #4]	; (8004670 <__errno+0x8>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000014 	.word	0x20000014

08004674 <__libc_init_array>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4d0d      	ldr	r5, [pc, #52]	; (80046ac <__libc_init_array+0x38>)
 8004678:	4c0d      	ldr	r4, [pc, #52]	; (80046b0 <__libc_init_array+0x3c>)
 800467a:	1b64      	subs	r4, r4, r5
 800467c:	10a4      	asrs	r4, r4, #2
 800467e:	2600      	movs	r6, #0
 8004680:	42a6      	cmp	r6, r4
 8004682:	d109      	bne.n	8004698 <__libc_init_array+0x24>
 8004684:	4d0b      	ldr	r5, [pc, #44]	; (80046b4 <__libc_init_array+0x40>)
 8004686:	4c0c      	ldr	r4, [pc, #48]	; (80046b8 <__libc_init_array+0x44>)
 8004688:	f004 fd04 	bl	8009094 <_init>
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	2600      	movs	r6, #0
 8004692:	42a6      	cmp	r6, r4
 8004694:	d105      	bne.n	80046a2 <__libc_init_array+0x2e>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	f855 3b04 	ldr.w	r3, [r5], #4
 800469c:	4798      	blx	r3
 800469e:	3601      	adds	r6, #1
 80046a0:	e7ee      	b.n	8004680 <__libc_init_array+0xc>
 80046a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a6:	4798      	blx	r3
 80046a8:	3601      	adds	r6, #1
 80046aa:	e7f2      	b.n	8004692 <__libc_init_array+0x1e>
 80046ac:	080095f4 	.word	0x080095f4
 80046b0:	080095f4 	.word	0x080095f4
 80046b4:	080095f4 	.word	0x080095f4
 80046b8:	080095f8 	.word	0x080095f8

080046bc <memcpy>:
 80046bc:	440a      	add	r2, r1
 80046be:	4291      	cmp	r1, r2
 80046c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046c4:	d100      	bne.n	80046c8 <memcpy+0xc>
 80046c6:	4770      	bx	lr
 80046c8:	b510      	push	{r4, lr}
 80046ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046d2:	4291      	cmp	r1, r2
 80046d4:	d1f9      	bne.n	80046ca <memcpy+0xe>
 80046d6:	bd10      	pop	{r4, pc}

080046d8 <memset>:
 80046d8:	4402      	add	r2, r0
 80046da:	4603      	mov	r3, r0
 80046dc:	4293      	cmp	r3, r2
 80046de:	d100      	bne.n	80046e2 <memset+0xa>
 80046e0:	4770      	bx	lr
 80046e2:	f803 1b01 	strb.w	r1, [r3], #1
 80046e6:	e7f9      	b.n	80046dc <memset+0x4>

080046e8 <__cvt>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	ec55 4b10 	vmov	r4, r5, d0
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	460e      	mov	r6, r1
 80046f4:	4619      	mov	r1, r3
 80046f6:	462b      	mov	r3, r5
 80046f8:	bfbb      	ittet	lt
 80046fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046fe:	461d      	movlt	r5, r3
 8004700:	2300      	movge	r3, #0
 8004702:	232d      	movlt	r3, #45	; 0x2d
 8004704:	700b      	strb	r3, [r1, #0]
 8004706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004708:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800470c:	4691      	mov	r9, r2
 800470e:	f023 0820 	bic.w	r8, r3, #32
 8004712:	bfbc      	itt	lt
 8004714:	4622      	movlt	r2, r4
 8004716:	4614      	movlt	r4, r2
 8004718:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800471c:	d005      	beq.n	800472a <__cvt+0x42>
 800471e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004722:	d100      	bne.n	8004726 <__cvt+0x3e>
 8004724:	3601      	adds	r6, #1
 8004726:	2102      	movs	r1, #2
 8004728:	e000      	b.n	800472c <__cvt+0x44>
 800472a:	2103      	movs	r1, #3
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	ab02      	add	r3, sp, #8
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	ec45 4b10 	vmov	d0, r4, r5
 8004738:	4653      	mov	r3, sl
 800473a:	4632      	mov	r2, r6
 800473c:	f001 fee4 	bl	8006508 <_dtoa_r>
 8004740:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004744:	4607      	mov	r7, r0
 8004746:	d102      	bne.n	800474e <__cvt+0x66>
 8004748:	f019 0f01 	tst.w	r9, #1
 800474c:	d022      	beq.n	8004794 <__cvt+0xac>
 800474e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004752:	eb07 0906 	add.w	r9, r7, r6
 8004756:	d110      	bne.n	800477a <__cvt+0x92>
 8004758:	783b      	ldrb	r3, [r7, #0]
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d10a      	bne.n	8004774 <__cvt+0x8c>
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	f7fc f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800476a:	b918      	cbnz	r0, 8004774 <__cvt+0x8c>
 800476c:	f1c6 0601 	rsb	r6, r6, #1
 8004770:	f8ca 6000 	str.w	r6, [sl]
 8004774:	f8da 3000 	ldr.w	r3, [sl]
 8004778:	4499      	add	r9, r3
 800477a:	2200      	movs	r2, #0
 800477c:	2300      	movs	r3, #0
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fc f9c1 	bl	8000b08 <__aeabi_dcmpeq>
 8004786:	b108      	cbz	r0, 800478c <__cvt+0xa4>
 8004788:	f8cd 900c 	str.w	r9, [sp, #12]
 800478c:	2230      	movs	r2, #48	; 0x30
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	454b      	cmp	r3, r9
 8004792:	d307      	bcc.n	80047a4 <__cvt+0xbc>
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004798:	1bdb      	subs	r3, r3, r7
 800479a:	4638      	mov	r0, r7
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	b004      	add	sp, #16
 80047a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a4:	1c59      	adds	r1, r3, #1
 80047a6:	9103      	str	r1, [sp, #12]
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e7f0      	b.n	800478e <__cvt+0xa6>

080047ac <__exponent>:
 80047ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ae:	4603      	mov	r3, r0
 80047b0:	2900      	cmp	r1, #0
 80047b2:	bfb8      	it	lt
 80047b4:	4249      	neglt	r1, r1
 80047b6:	f803 2b02 	strb.w	r2, [r3], #2
 80047ba:	bfb4      	ite	lt
 80047bc:	222d      	movlt	r2, #45	; 0x2d
 80047be:	222b      	movge	r2, #43	; 0x2b
 80047c0:	2909      	cmp	r1, #9
 80047c2:	7042      	strb	r2, [r0, #1]
 80047c4:	dd2a      	ble.n	800481c <__exponent+0x70>
 80047c6:	f10d 0407 	add.w	r4, sp, #7
 80047ca:	46a4      	mov	ip, r4
 80047cc:	270a      	movs	r7, #10
 80047ce:	46a6      	mov	lr, r4
 80047d0:	460a      	mov	r2, r1
 80047d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80047d6:	fb07 1516 	mls	r5, r7, r6, r1
 80047da:	3530      	adds	r5, #48	; 0x30
 80047dc:	2a63      	cmp	r2, #99	; 0x63
 80047de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047e6:	4631      	mov	r1, r6
 80047e8:	dcf1      	bgt.n	80047ce <__exponent+0x22>
 80047ea:	3130      	adds	r1, #48	; 0x30
 80047ec:	f1ae 0502 	sub.w	r5, lr, #2
 80047f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047f4:	1c44      	adds	r4, r0, #1
 80047f6:	4629      	mov	r1, r5
 80047f8:	4561      	cmp	r1, ip
 80047fa:	d30a      	bcc.n	8004812 <__exponent+0x66>
 80047fc:	f10d 0209 	add.w	r2, sp, #9
 8004800:	eba2 020e 	sub.w	r2, r2, lr
 8004804:	4565      	cmp	r5, ip
 8004806:	bf88      	it	hi
 8004808:	2200      	movhi	r2, #0
 800480a:	4413      	add	r3, r2
 800480c:	1a18      	subs	r0, r3, r0
 800480e:	b003      	add	sp, #12
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004816:	f804 2f01 	strb.w	r2, [r4, #1]!
 800481a:	e7ed      	b.n	80047f8 <__exponent+0x4c>
 800481c:	2330      	movs	r3, #48	; 0x30
 800481e:	3130      	adds	r1, #48	; 0x30
 8004820:	7083      	strb	r3, [r0, #2]
 8004822:	70c1      	strb	r1, [r0, #3]
 8004824:	1d03      	adds	r3, r0, #4
 8004826:	e7f1      	b.n	800480c <__exponent+0x60>

08004828 <_printf_float>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	ed2d 8b02 	vpush	{d8}
 8004830:	b08d      	sub	sp, #52	; 0x34
 8004832:	460c      	mov	r4, r1
 8004834:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004838:	4616      	mov	r6, r2
 800483a:	461f      	mov	r7, r3
 800483c:	4605      	mov	r5, r0
 800483e:	f003 f977 	bl	8007b30 <_localeconv_r>
 8004842:	f8d0 a000 	ldr.w	sl, [r0]
 8004846:	4650      	mov	r0, sl
 8004848:	f7fb fce2 	bl	8000210 <strlen>
 800484c:	2300      	movs	r3, #0
 800484e:	930a      	str	r3, [sp, #40]	; 0x28
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	f8d8 3000 	ldr.w	r3, [r8]
 8004858:	f894 b018 	ldrb.w	fp, [r4, #24]
 800485c:	3307      	adds	r3, #7
 800485e:	f023 0307 	bic.w	r3, r3, #7
 8004862:	f103 0208 	add.w	r2, r3, #8
 8004866:	f8c8 2000 	str.w	r2, [r8]
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004872:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800487a:	9307      	str	r3, [sp, #28]
 800487c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004880:	ee08 0a10 	vmov	s16, r0
 8004884:	4b9f      	ldr	r3, [pc, #636]	; (8004b04 <_printf_float+0x2dc>)
 8004886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800488a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800488e:	f7fc f96d 	bl	8000b6c <__aeabi_dcmpun>
 8004892:	bb88      	cbnz	r0, 80048f8 <_printf_float+0xd0>
 8004894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004898:	4b9a      	ldr	r3, [pc, #616]	; (8004b04 <_printf_float+0x2dc>)
 800489a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800489e:	f7fc f947 	bl	8000b30 <__aeabi_dcmple>
 80048a2:	bb48      	cbnz	r0, 80048f8 <_printf_float+0xd0>
 80048a4:	2200      	movs	r2, #0
 80048a6:	2300      	movs	r3, #0
 80048a8:	4640      	mov	r0, r8
 80048aa:	4649      	mov	r1, r9
 80048ac:	f7fc f936 	bl	8000b1c <__aeabi_dcmplt>
 80048b0:	b110      	cbz	r0, 80048b8 <_printf_float+0x90>
 80048b2:	232d      	movs	r3, #45	; 0x2d
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	4b93      	ldr	r3, [pc, #588]	; (8004b08 <_printf_float+0x2e0>)
 80048ba:	4894      	ldr	r0, [pc, #592]	; (8004b0c <_printf_float+0x2e4>)
 80048bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048c0:	bf94      	ite	ls
 80048c2:	4698      	movls	r8, r3
 80048c4:	4680      	movhi	r8, r0
 80048c6:	2303      	movs	r3, #3
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	f023 0204 	bic.w	r2, r3, #4
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	f04f 0900 	mov.w	r9, #0
 80048d6:	9700      	str	r7, [sp, #0]
 80048d8:	4633      	mov	r3, r6
 80048da:	aa0b      	add	r2, sp, #44	; 0x2c
 80048dc:	4621      	mov	r1, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f9d8 	bl	8004c94 <_printf_common>
 80048e4:	3001      	adds	r0, #1
 80048e6:	f040 8090 	bne.w	8004a0a <_printf_float+0x1e2>
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ee:	b00d      	add	sp, #52	; 0x34
 80048f0:	ecbd 8b02 	vpop	{d8}
 80048f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	4649      	mov	r1, r9
 8004900:	f7fc f934 	bl	8000b6c <__aeabi_dcmpun>
 8004904:	b140      	cbz	r0, 8004918 <_printf_float+0xf0>
 8004906:	464b      	mov	r3, r9
 8004908:	2b00      	cmp	r3, #0
 800490a:	bfbc      	itt	lt
 800490c:	232d      	movlt	r3, #45	; 0x2d
 800490e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004912:	487f      	ldr	r0, [pc, #508]	; (8004b10 <_printf_float+0x2e8>)
 8004914:	4b7f      	ldr	r3, [pc, #508]	; (8004b14 <_printf_float+0x2ec>)
 8004916:	e7d1      	b.n	80048bc <_printf_float+0x94>
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800491e:	9206      	str	r2, [sp, #24]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	d13f      	bne.n	80049a4 <_printf_float+0x17c>
 8004924:	2306      	movs	r3, #6
 8004926:	6063      	str	r3, [r4, #4]
 8004928:	9b05      	ldr	r3, [sp, #20]
 800492a:	6861      	ldr	r1, [r4, #4]
 800492c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004930:	2300      	movs	r3, #0
 8004932:	9303      	str	r3, [sp, #12]
 8004934:	ab0a      	add	r3, sp, #40	; 0x28
 8004936:	e9cd b301 	strd	fp, r3, [sp, #4]
 800493a:	ab09      	add	r3, sp, #36	; 0x24
 800493c:	ec49 8b10 	vmov	d0, r8, r9
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004948:	4628      	mov	r0, r5
 800494a:	f7ff fecd 	bl	80046e8 <__cvt>
 800494e:	9b06      	ldr	r3, [sp, #24]
 8004950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004952:	2b47      	cmp	r3, #71	; 0x47
 8004954:	4680      	mov	r8, r0
 8004956:	d108      	bne.n	800496a <_printf_float+0x142>
 8004958:	1cc8      	adds	r0, r1, #3
 800495a:	db02      	blt.n	8004962 <_printf_float+0x13a>
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	4299      	cmp	r1, r3
 8004960:	dd41      	ble.n	80049e6 <_printf_float+0x1be>
 8004962:	f1ab 0b02 	sub.w	fp, fp, #2
 8004966:	fa5f fb8b 	uxtb.w	fp, fp
 800496a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800496e:	d820      	bhi.n	80049b2 <_printf_float+0x18a>
 8004970:	3901      	subs	r1, #1
 8004972:	465a      	mov	r2, fp
 8004974:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004978:	9109      	str	r1, [sp, #36]	; 0x24
 800497a:	f7ff ff17 	bl	80047ac <__exponent>
 800497e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004980:	1813      	adds	r3, r2, r0
 8004982:	2a01      	cmp	r2, #1
 8004984:	4681      	mov	r9, r0
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	dc02      	bgt.n	8004990 <_printf_float+0x168>
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	07d2      	lsls	r2, r2, #31
 800498e:	d501      	bpl.n	8004994 <_printf_float+0x16c>
 8004990:	3301      	adds	r3, #1
 8004992:	6123      	str	r3, [r4, #16]
 8004994:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004998:	2b00      	cmp	r3, #0
 800499a:	d09c      	beq.n	80048d6 <_printf_float+0xae>
 800499c:	232d      	movs	r3, #45	; 0x2d
 800499e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a2:	e798      	b.n	80048d6 <_printf_float+0xae>
 80049a4:	9a06      	ldr	r2, [sp, #24]
 80049a6:	2a47      	cmp	r2, #71	; 0x47
 80049a8:	d1be      	bne.n	8004928 <_printf_float+0x100>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1bc      	bne.n	8004928 <_printf_float+0x100>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7b9      	b.n	8004926 <_printf_float+0xfe>
 80049b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049b6:	d118      	bne.n	80049ea <_printf_float+0x1c2>
 80049b8:	2900      	cmp	r1, #0
 80049ba:	6863      	ldr	r3, [r4, #4]
 80049bc:	dd0b      	ble.n	80049d6 <_printf_float+0x1ae>
 80049be:	6121      	str	r1, [r4, #16]
 80049c0:	b913      	cbnz	r3, 80049c8 <_printf_float+0x1a0>
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	07d0      	lsls	r0, r2, #31
 80049c6:	d502      	bpl.n	80049ce <_printf_float+0x1a6>
 80049c8:	3301      	adds	r3, #1
 80049ca:	440b      	add	r3, r1
 80049cc:	6123      	str	r3, [r4, #16]
 80049ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80049d0:	f04f 0900 	mov.w	r9, #0
 80049d4:	e7de      	b.n	8004994 <_printf_float+0x16c>
 80049d6:	b913      	cbnz	r3, 80049de <_printf_float+0x1b6>
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	07d2      	lsls	r2, r2, #31
 80049dc:	d501      	bpl.n	80049e2 <_printf_float+0x1ba>
 80049de:	3302      	adds	r3, #2
 80049e0:	e7f4      	b.n	80049cc <_printf_float+0x1a4>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e7f2      	b.n	80049cc <_printf_float+0x1a4>
 80049e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ec:	4299      	cmp	r1, r3
 80049ee:	db05      	blt.n	80049fc <_printf_float+0x1d4>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	6121      	str	r1, [r4, #16]
 80049f4:	07d8      	lsls	r0, r3, #31
 80049f6:	d5ea      	bpl.n	80049ce <_printf_float+0x1a6>
 80049f8:	1c4b      	adds	r3, r1, #1
 80049fa:	e7e7      	b.n	80049cc <_printf_float+0x1a4>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	bfd4      	ite	le
 8004a00:	f1c1 0202 	rsble	r2, r1, #2
 8004a04:	2201      	movgt	r2, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	e7e0      	b.n	80049cc <_printf_float+0x1a4>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	055a      	lsls	r2, r3, #21
 8004a0e:	d407      	bmi.n	8004a20 <_printf_float+0x1f8>
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	4642      	mov	r2, r8
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d12c      	bne.n	8004a78 <_printf_float+0x250>
 8004a1e:	e764      	b.n	80048ea <_printf_float+0xc2>
 8004a20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a24:	f240 80e0 	bls.w	8004be8 <_printf_float+0x3c0>
 8004a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f7fc f86a 	bl	8000b08 <__aeabi_dcmpeq>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d034      	beq.n	8004aa2 <_printf_float+0x27a>
 8004a38:	4a37      	ldr	r2, [pc, #220]	; (8004b18 <_printf_float+0x2f0>)
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	f43f af51 	beq.w	80048ea <_printf_float+0xc2>
 8004a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	db02      	blt.n	8004a56 <_printf_float+0x22e>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07d8      	lsls	r0, r3, #31
 8004a54:	d510      	bpl.n	8004a78 <_printf_float+0x250>
 8004a56:	ee18 3a10 	vmov	r3, s16
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	f43f af41 	beq.w	80048ea <_printf_float+0xc2>
 8004a68:	f04f 0800 	mov.w	r8, #0
 8004a6c:	f104 091a 	add.w	r9, r4, #26
 8004a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	4543      	cmp	r3, r8
 8004a76:	dc09      	bgt.n	8004a8c <_printf_float+0x264>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	079b      	lsls	r3, r3, #30
 8004a7c:	f100 8105 	bmi.w	8004c8a <_printf_float+0x462>
 8004a80:	68e0      	ldr	r0, [r4, #12]
 8004a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a84:	4298      	cmp	r0, r3
 8004a86:	bfb8      	it	lt
 8004a88:	4618      	movlt	r0, r3
 8004a8a:	e730      	b.n	80048ee <_printf_float+0xc6>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	464a      	mov	r2, r9
 8004a90:	4631      	mov	r1, r6
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	f43f af27 	beq.w	80048ea <_printf_float+0xc2>
 8004a9c:	f108 0801 	add.w	r8, r8, #1
 8004aa0:	e7e6      	b.n	8004a70 <_printf_float+0x248>
 8004aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	dc39      	bgt.n	8004b1c <_printf_float+0x2f4>
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <_printf_float+0x2f0>)
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af19 	beq.w	80048ea <_printf_float+0xc2>
 8004ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d102      	bne.n	8004ac6 <_printf_float+0x29e>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	07d9      	lsls	r1, r3, #31
 8004ac4:	d5d8      	bpl.n	8004a78 <_printf_float+0x250>
 8004ac6:	ee18 3a10 	vmov	r3, s16
 8004aca:	4652      	mov	r2, sl
 8004acc:	4631      	mov	r1, r6
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f af09 	beq.w	80048ea <_printf_float+0xc2>
 8004ad8:	f04f 0900 	mov.w	r9, #0
 8004adc:	f104 0a1a 	add.w	sl, r4, #26
 8004ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae2:	425b      	negs	r3, r3
 8004ae4:	454b      	cmp	r3, r9
 8004ae6:	dc01      	bgt.n	8004aec <_printf_float+0x2c4>
 8004ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aea:	e792      	b.n	8004a12 <_printf_float+0x1ea>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4652      	mov	r2, sl
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f aef7 	beq.w	80048ea <_printf_float+0xc2>
 8004afc:	f109 0901 	add.w	r9, r9, #1
 8004b00:	e7ee      	b.n	8004ae0 <_printf_float+0x2b8>
 8004b02:	bf00      	nop
 8004b04:	7fefffff 	.word	0x7fefffff
 8004b08:	08009140 	.word	0x08009140
 8004b0c:	08009144 	.word	0x08009144
 8004b10:	0800914c 	.word	0x0800914c
 8004b14:	08009148 	.word	0x08009148
 8004b18:	08009150 	.word	0x08009150
 8004b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b20:	429a      	cmp	r2, r3
 8004b22:	bfa8      	it	ge
 8004b24:	461a      	movge	r2, r3
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	4691      	mov	r9, r2
 8004b2a:	dc37      	bgt.n	8004b9c <_printf_float+0x374>
 8004b2c:	f04f 0b00 	mov.w	fp, #0
 8004b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b34:	f104 021a 	add.w	r2, r4, #26
 8004b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b3a:	9305      	str	r3, [sp, #20]
 8004b3c:	eba3 0309 	sub.w	r3, r3, r9
 8004b40:	455b      	cmp	r3, fp
 8004b42:	dc33      	bgt.n	8004bac <_printf_float+0x384>
 8004b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	db3b      	blt.n	8004bc4 <_printf_float+0x39c>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	07da      	lsls	r2, r3, #31
 8004b50:	d438      	bmi.n	8004bc4 <_printf_float+0x39c>
 8004b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b54:	9a05      	ldr	r2, [sp, #20]
 8004b56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b58:	1a9a      	subs	r2, r3, r2
 8004b5a:	eba3 0901 	sub.w	r9, r3, r1
 8004b5e:	4591      	cmp	r9, r2
 8004b60:	bfa8      	it	ge
 8004b62:	4691      	movge	r9, r2
 8004b64:	f1b9 0f00 	cmp.w	r9, #0
 8004b68:	dc35      	bgt.n	8004bd6 <_printf_float+0x3ae>
 8004b6a:	f04f 0800 	mov.w	r8, #0
 8004b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b72:	f104 0a1a 	add.w	sl, r4, #26
 8004b76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	eba3 0309 	sub.w	r3, r3, r9
 8004b80:	4543      	cmp	r3, r8
 8004b82:	f77f af79 	ble.w	8004a78 <_printf_float+0x250>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4652      	mov	r2, sl
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	f43f aeaa 	beq.w	80048ea <_printf_float+0xc2>
 8004b96:	f108 0801 	add.w	r8, r8, #1
 8004b9a:	e7ec      	b.n	8004b76 <_printf_float+0x34e>
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d1c0      	bne.n	8004b2c <_printf_float+0x304>
 8004baa:	e69e      	b.n	80048ea <_printf_float+0xc2>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	9205      	str	r2, [sp, #20]
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f ae97 	beq.w	80048ea <_printf_float+0xc2>
 8004bbc:	9a05      	ldr	r2, [sp, #20]
 8004bbe:	f10b 0b01 	add.w	fp, fp, #1
 8004bc2:	e7b9      	b.n	8004b38 <_printf_float+0x310>
 8004bc4:	ee18 3a10 	vmov	r3, s16
 8004bc8:	4652      	mov	r2, sl
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b8      	blx	r7
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d1be      	bne.n	8004b52 <_printf_float+0x32a>
 8004bd4:	e689      	b.n	80048ea <_printf_float+0xc2>
 8004bd6:	9a05      	ldr	r2, [sp, #20]
 8004bd8:	464b      	mov	r3, r9
 8004bda:	4442      	add	r2, r8
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	d1c1      	bne.n	8004b6a <_printf_float+0x342>
 8004be6:	e680      	b.n	80048ea <_printf_float+0xc2>
 8004be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bea:	2a01      	cmp	r2, #1
 8004bec:	dc01      	bgt.n	8004bf2 <_printf_float+0x3ca>
 8004bee:	07db      	lsls	r3, r3, #31
 8004bf0:	d538      	bpl.n	8004c64 <_printf_float+0x43c>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	f43f ae74 	beq.w	80048ea <_printf_float+0xc2>
 8004c02:	ee18 3a10 	vmov	r3, s16
 8004c06:	4652      	mov	r2, sl
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f ae6b 	beq.w	80048ea <_printf_float+0xc2>
 8004c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f7fb ff74 	bl	8000b08 <__aeabi_dcmpeq>
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_printf_float+0x432>
 8004c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c24:	f108 0201 	add.w	r2, r8, #1
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	d10e      	bne.n	8004c52 <_printf_float+0x42a>
 8004c34:	e659      	b.n	80048ea <_printf_float+0xc2>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4652      	mov	r2, sl
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f ae52 	beq.w	80048ea <_printf_float+0xc2>
 8004c46:	f108 0801 	add.w	r8, r8, #1
 8004c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	4543      	cmp	r3, r8
 8004c50:	dcf1      	bgt.n	8004c36 <_printf_float+0x40e>
 8004c52:	464b      	mov	r3, r9
 8004c54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c58:	e6dc      	b.n	8004a14 <_printf_float+0x1ec>
 8004c5a:	f04f 0800 	mov.w	r8, #0
 8004c5e:	f104 0a1a 	add.w	sl, r4, #26
 8004c62:	e7f2      	b.n	8004c4a <_printf_float+0x422>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4642      	mov	r2, r8
 8004c68:	e7df      	b.n	8004c2a <_printf_float+0x402>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae38 	beq.w	80048ea <_printf_float+0xc2>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	68e3      	ldr	r3, [r4, #12]
 8004c80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c82:	1a5b      	subs	r3, r3, r1
 8004c84:	4543      	cmp	r3, r8
 8004c86:	dcf0      	bgt.n	8004c6a <_printf_float+0x442>
 8004c88:	e6fa      	b.n	8004a80 <_printf_float+0x258>
 8004c8a:	f04f 0800 	mov.w	r8, #0
 8004c8e:	f104 0919 	add.w	r9, r4, #25
 8004c92:	e7f4      	b.n	8004c7e <_printf_float+0x456>

08004c94 <_printf_common>:
 8004c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	4616      	mov	r6, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	688a      	ldr	r2, [r1, #8]
 8004c9e:	690b      	ldr	r3, [r1, #16]
 8004ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfb8      	it	lt
 8004ca8:	4613      	movlt	r3, r2
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	b10a      	cbz	r2, 8004cba <_printf_common+0x26>
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	0699      	lsls	r1, r3, #26
 8004cbe:	bf42      	ittt	mi
 8004cc0:	6833      	ldrmi	r3, [r6, #0]
 8004cc2:	3302      	addmi	r3, #2
 8004cc4:	6033      	strmi	r3, [r6, #0]
 8004cc6:	6825      	ldr	r5, [r4, #0]
 8004cc8:	f015 0506 	ands.w	r5, r5, #6
 8004ccc:	d106      	bne.n	8004cdc <_printf_common+0x48>
 8004cce:	f104 0a19 	add.w	sl, r4, #25
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	6832      	ldr	r2, [r6, #0]
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dc26      	bgt.n	8004d2a <_printf_common+0x96>
 8004cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ce0:	1e13      	subs	r3, r2, #0
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	bf18      	it	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	0692      	lsls	r2, r2, #26
 8004cea:	d42b      	bmi.n	8004d44 <_printf_common+0xb0>
 8004cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	47c0      	blx	r8
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d01e      	beq.n	8004d38 <_printf_common+0xa4>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	68e5      	ldr	r5, [r4, #12]
 8004cfe:	6832      	ldr	r2, [r6, #0]
 8004d00:	f003 0306 	and.w	r3, r3, #6
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	bf08      	it	eq
 8004d08:	1aad      	subeq	r5, r5, r2
 8004d0a:	68a3      	ldr	r3, [r4, #8]
 8004d0c:	6922      	ldr	r2, [r4, #16]
 8004d0e:	bf0c      	ite	eq
 8004d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d14:	2500      	movne	r5, #0
 8004d16:	4293      	cmp	r3, r2
 8004d18:	bfc4      	itt	gt
 8004d1a:	1a9b      	subgt	r3, r3, r2
 8004d1c:	18ed      	addgt	r5, r5, r3
 8004d1e:	2600      	movs	r6, #0
 8004d20:	341a      	adds	r4, #26
 8004d22:	42b5      	cmp	r5, r6
 8004d24:	d11a      	bne.n	8004d5c <_printf_common+0xc8>
 8004d26:	2000      	movs	r0, #0
 8004d28:	e008      	b.n	8004d3c <_printf_common+0xa8>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4638      	mov	r0, r7
 8004d32:	47c0      	blx	r8
 8004d34:	3001      	adds	r0, #1
 8004d36:	d103      	bne.n	8004d40 <_printf_common+0xac>
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d40:	3501      	adds	r5, #1
 8004d42:	e7c6      	b.n	8004cd2 <_printf_common+0x3e>
 8004d44:	18e1      	adds	r1, r4, r3
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	2030      	movs	r0, #48	; 0x30
 8004d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d4e:	4422      	add	r2, r4
 8004d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d58:	3302      	adds	r3, #2
 8004d5a:	e7c7      	b.n	8004cec <_printf_common+0x58>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4622      	mov	r2, r4
 8004d60:	4649      	mov	r1, r9
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0e6      	beq.n	8004d38 <_printf_common+0xa4>
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	e7d9      	b.n	8004d22 <_printf_common+0x8e>
	...

08004d70 <_printf_i>:
 8004d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	7e0f      	ldrb	r7, [r1, #24]
 8004d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d78:	2f78      	cmp	r7, #120	; 0x78
 8004d7a:	4691      	mov	r9, r2
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	469a      	mov	sl, r3
 8004d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d86:	d807      	bhi.n	8004d98 <_printf_i+0x28>
 8004d88:	2f62      	cmp	r7, #98	; 0x62
 8004d8a:	d80a      	bhi.n	8004da2 <_printf_i+0x32>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	f000 80d8 	beq.w	8004f42 <_printf_i+0x1d2>
 8004d92:	2f58      	cmp	r7, #88	; 0x58
 8004d94:	f000 80a3 	beq.w	8004ede <_printf_i+0x16e>
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da0:	e03a      	b.n	8004e18 <_printf_i+0xa8>
 8004da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004da6:	2b15      	cmp	r3, #21
 8004da8:	d8f6      	bhi.n	8004d98 <_printf_i+0x28>
 8004daa:	a101      	add	r1, pc, #4	; (adr r1, 8004db0 <_printf_i+0x40>)
 8004dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004d99 	.word	0x08004d99
 8004dbc:	08004d99 	.word	0x08004d99
 8004dc0:	08004d99 	.word	0x08004d99
 8004dc4:	08004d99 	.word	0x08004d99
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d99 	.word	0x08004d99
 8004dd0:	08004d99 	.word	0x08004d99
 8004dd4:	08004d99 	.word	0x08004d99
 8004dd8:	08004d99 	.word	0x08004d99
 8004ddc:	08004f29 	.word	0x08004f29
 8004de0:	08004e4d 	.word	0x08004e4d
 8004de4:	08004f0b 	.word	0x08004f0b
 8004de8:	08004d99 	.word	0x08004d99
 8004dec:	08004d99 	.word	0x08004d99
 8004df0:	08004f4b 	.word	0x08004f4b
 8004df4:	08004d99 	.word	0x08004d99
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004d99 	.word	0x08004d99
 8004e00:	08004d99 	.word	0x08004d99
 8004e04:	08004f13 	.word	0x08004f13
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0a3      	b.n	8004f64 <_printf_i+0x1f4>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	6829      	ldr	r1, [r5, #0]
 8004e20:	0606      	lsls	r6, r0, #24
 8004e22:	f101 0304 	add.w	r3, r1, #4
 8004e26:	d50a      	bpl.n	8004e3e <_printf_i+0xce>
 8004e28:	680e      	ldr	r6, [r1, #0]
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	da03      	bge.n	8004e38 <_printf_i+0xc8>
 8004e30:	232d      	movs	r3, #45	; 0x2d
 8004e32:	4276      	negs	r6, r6
 8004e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e38:	485e      	ldr	r0, [pc, #376]	; (8004fb4 <_printf_i+0x244>)
 8004e3a:	230a      	movs	r3, #10
 8004e3c:	e019      	b.n	8004e72 <_printf_i+0x102>
 8004e3e:	680e      	ldr	r6, [r1, #0]
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e46:	bf18      	it	ne
 8004e48:	b236      	sxthne	r6, r6
 8004e4a:	e7ef      	b.n	8004e2c <_printf_i+0xbc>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	1d19      	adds	r1, r3, #4
 8004e52:	6029      	str	r1, [r5, #0]
 8004e54:	0601      	lsls	r1, r0, #24
 8004e56:	d501      	bpl.n	8004e5c <_printf_i+0xec>
 8004e58:	681e      	ldr	r6, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <_printf_i+0xf2>
 8004e5c:	0646      	lsls	r6, r0, #25
 8004e5e:	d5fb      	bpl.n	8004e58 <_printf_i+0xe8>
 8004e60:	881e      	ldrh	r6, [r3, #0]
 8004e62:	4854      	ldr	r0, [pc, #336]	; (8004fb4 <_printf_i+0x244>)
 8004e64:	2f6f      	cmp	r7, #111	; 0x6f
 8004e66:	bf0c      	ite	eq
 8004e68:	2308      	moveq	r3, #8
 8004e6a:	230a      	movne	r3, #10
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e72:	6865      	ldr	r5, [r4, #4]
 8004e74:	60a5      	str	r5, [r4, #8]
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	bfa2      	ittt	ge
 8004e7a:	6821      	ldrge	r1, [r4, #0]
 8004e7c:	f021 0104 	bicge.w	r1, r1, #4
 8004e80:	6021      	strge	r1, [r4, #0]
 8004e82:	b90e      	cbnz	r6, 8004e88 <_printf_i+0x118>
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d04d      	beq.n	8004f24 <_printf_i+0x1b4>
 8004e88:	4615      	mov	r5, r2
 8004e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e92:	5dc7      	ldrb	r7, [r0, r7]
 8004e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e98:	4637      	mov	r7, r6
 8004e9a:	42bb      	cmp	r3, r7
 8004e9c:	460e      	mov	r6, r1
 8004e9e:	d9f4      	bls.n	8004e8a <_printf_i+0x11a>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d10b      	bne.n	8004ebc <_printf_i+0x14c>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07de      	lsls	r6, r3, #31
 8004ea8:	d508      	bpl.n	8004ebc <_printf_i+0x14c>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6861      	ldr	r1, [r4, #4]
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	bfde      	ittt	le
 8004eb2:	2330      	movle	r3, #48	; 0x30
 8004eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ebc:	1b52      	subs	r2, r2, r5
 8004ebe:	6122      	str	r2, [r4, #16]
 8004ec0:	f8cd a000 	str.w	sl, [sp]
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	aa03      	add	r2, sp, #12
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff fee2 	bl	8004c94 <_printf_common>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d14c      	bne.n	8004f6e <_printf_i+0x1fe>
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	b004      	add	sp, #16
 8004eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ede:	4835      	ldr	r0, [pc, #212]	; (8004fb4 <_printf_i+0x244>)
 8004ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ee4:	6829      	ldr	r1, [r5, #0]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eec:	6029      	str	r1, [r5, #0]
 8004eee:	061d      	lsls	r5, r3, #24
 8004ef0:	d514      	bpl.n	8004f1c <_printf_i+0x1ac>
 8004ef2:	07df      	lsls	r7, r3, #31
 8004ef4:	bf44      	itt	mi
 8004ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8004efa:	6023      	strmi	r3, [r4, #0]
 8004efc:	b91e      	cbnz	r6, 8004f06 <_printf_i+0x196>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f023 0320 	bic.w	r3, r3, #32
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	2310      	movs	r3, #16
 8004f08:	e7b0      	b.n	8004e6c <_printf_i+0xfc>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f043 0320 	orr.w	r3, r3, #32
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	2378      	movs	r3, #120	; 0x78
 8004f14:	4828      	ldr	r0, [pc, #160]	; (8004fb8 <_printf_i+0x248>)
 8004f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f1a:	e7e3      	b.n	8004ee4 <_printf_i+0x174>
 8004f1c:	0659      	lsls	r1, r3, #25
 8004f1e:	bf48      	it	mi
 8004f20:	b2b6      	uxthmi	r6, r6
 8004f22:	e7e6      	b.n	8004ef2 <_printf_i+0x182>
 8004f24:	4615      	mov	r5, r2
 8004f26:	e7bb      	b.n	8004ea0 <_printf_i+0x130>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	6826      	ldr	r6, [r4, #0]
 8004f2c:	6961      	ldr	r1, [r4, #20]
 8004f2e:	1d18      	adds	r0, r3, #4
 8004f30:	6028      	str	r0, [r5, #0]
 8004f32:	0635      	lsls	r5, r6, #24
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0x1cc>
 8004f38:	6019      	str	r1, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0x1d2>
 8004f3c:	0670      	lsls	r0, r6, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0x1c8>
 8004f40:	8019      	strh	r1, [r3, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	4615      	mov	r5, r2
 8004f48:	e7ba      	b.n	8004ec0 <_printf_i+0x150>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	2100      	movs	r1, #0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f7fb f962 	bl	8000220 <memchr>
 8004f5c:	b108      	cbz	r0, 8004f62 <_printf_i+0x1f2>
 8004f5e:	1b40      	subs	r0, r0, r5
 8004f60:	6060      	str	r0, [r4, #4]
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	2300      	movs	r3, #0
 8004f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6c:	e7a8      	b.n	8004ec0 <_printf_i+0x150>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	462a      	mov	r2, r5
 8004f72:	4649      	mov	r1, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	47d0      	blx	sl
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d0ab      	beq.n	8004ed4 <_printf_i+0x164>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	079b      	lsls	r3, r3, #30
 8004f80:	d413      	bmi.n	8004faa <_printf_i+0x23a>
 8004f82:	68e0      	ldr	r0, [r4, #12]
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	4298      	cmp	r0, r3
 8004f88:	bfb8      	it	lt
 8004f8a:	4618      	movlt	r0, r3
 8004f8c:	e7a4      	b.n	8004ed8 <_printf_i+0x168>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4632      	mov	r2, r6
 8004f92:	4649      	mov	r1, r9
 8004f94:	4640      	mov	r0, r8
 8004f96:	47d0      	blx	sl
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d09b      	beq.n	8004ed4 <_printf_i+0x164>
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	9903      	ldr	r1, [sp, #12]
 8004fa2:	1a5b      	subs	r3, r3, r1
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dcf2      	bgt.n	8004f8e <_printf_i+0x21e>
 8004fa8:	e7eb      	b.n	8004f82 <_printf_i+0x212>
 8004faa:	2500      	movs	r5, #0
 8004fac:	f104 0619 	add.w	r6, r4, #25
 8004fb0:	e7f5      	b.n	8004f9e <_printf_i+0x22e>
 8004fb2:	bf00      	nop
 8004fb4:	08009152 	.word	0x08009152
 8004fb8:	08009163 	.word	0x08009163

08004fbc <_scanf_float>:
 8004fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	4617      	mov	r7, r2
 8004fc4:	9303      	str	r3, [sp, #12]
 8004fc6:	688b      	ldr	r3, [r1, #8]
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fce:	bf83      	ittte	hi
 8004fd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fd4:	195b      	addhi	r3, r3, r5
 8004fd6:	9302      	strhi	r3, [sp, #8]
 8004fd8:	2300      	movls	r3, #0
 8004fda:	bf86      	itte	hi
 8004fdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fe0:	608b      	strhi	r3, [r1, #8]
 8004fe2:	9302      	strls	r3, [sp, #8]
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	468b      	mov	fp, r1
 8004fe8:	2500      	movs	r5, #0
 8004fea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fee:	f84b 3b1c 	str.w	r3, [fp], #28
 8004ff2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	465e      	mov	r6, fp
 8004ffc:	46aa      	mov	sl, r5
 8004ffe:	46a9      	mov	r9, r5
 8005000:	9501      	str	r5, [sp, #4]
 8005002:	68a2      	ldr	r2, [r4, #8]
 8005004:	b152      	cbz	r2, 800501c <_scanf_float+0x60>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b4e      	cmp	r3, #78	; 0x4e
 800500c:	d864      	bhi.n	80050d8 <_scanf_float+0x11c>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d83c      	bhi.n	800508c <_scanf_float+0xd0>
 8005012:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005016:	b2c8      	uxtb	r0, r1
 8005018:	280e      	cmp	r0, #14
 800501a:	d93a      	bls.n	8005092 <_scanf_float+0xd6>
 800501c:	f1b9 0f00 	cmp.w	r9, #0
 8005020:	d003      	beq.n	800502a <_scanf_float+0x6e>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800502e:	f1ba 0f01 	cmp.w	sl, #1
 8005032:	f200 8113 	bhi.w	800525c <_scanf_float+0x2a0>
 8005036:	455e      	cmp	r6, fp
 8005038:	f200 8105 	bhi.w	8005246 <_scanf_float+0x28a>
 800503c:	2501      	movs	r5, #1
 800503e:	4628      	mov	r0, r5
 8005040:	b007      	add	sp, #28
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800504a:	2a0d      	cmp	r2, #13
 800504c:	d8e6      	bhi.n	800501c <_scanf_float+0x60>
 800504e:	a101      	add	r1, pc, #4	; (adr r1, 8005054 <_scanf_float+0x98>)
 8005050:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005054:	08005193 	.word	0x08005193
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	0800501d 	.word	0x0800501d
 8005064:	080051f3 	.word	0x080051f3
 8005068:	080051cb 	.word	0x080051cb
 800506c:	0800501d 	.word	0x0800501d
 8005070:	0800501d 	.word	0x0800501d
 8005074:	080051a1 	.word	0x080051a1
 8005078:	0800501d 	.word	0x0800501d
 800507c:	0800501d 	.word	0x0800501d
 8005080:	0800501d 	.word	0x0800501d
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005159 	.word	0x08005159
 800508c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005090:	e7db      	b.n	800504a <_scanf_float+0x8e>
 8005092:	290e      	cmp	r1, #14
 8005094:	d8c2      	bhi.n	800501c <_scanf_float+0x60>
 8005096:	a001      	add	r0, pc, #4	; (adr r0, 800509c <_scanf_float+0xe0>)
 8005098:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800509c:	0800514b 	.word	0x0800514b
 80050a0:	0800501d 	.word	0x0800501d
 80050a4:	0800514b 	.word	0x0800514b
 80050a8:	080051df 	.word	0x080051df
 80050ac:	0800501d 	.word	0x0800501d
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	08005135 	.word	0x08005135
 80050b8:	08005135 	.word	0x08005135
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	08005135 	.word	0x08005135
 80050c8:	08005135 	.word	0x08005135
 80050cc:	08005135 	.word	0x08005135
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	2b6e      	cmp	r3, #110	; 0x6e
 80050da:	d809      	bhi.n	80050f0 <_scanf_float+0x134>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d8b2      	bhi.n	8005046 <_scanf_float+0x8a>
 80050e0:	2b54      	cmp	r3, #84	; 0x54
 80050e2:	d077      	beq.n	80051d4 <_scanf_float+0x218>
 80050e4:	2b59      	cmp	r3, #89	; 0x59
 80050e6:	d199      	bne.n	800501c <_scanf_float+0x60>
 80050e8:	2d07      	cmp	r5, #7
 80050ea:	d197      	bne.n	800501c <_scanf_float+0x60>
 80050ec:	2508      	movs	r5, #8
 80050ee:	e029      	b.n	8005144 <_scanf_float+0x188>
 80050f0:	2b74      	cmp	r3, #116	; 0x74
 80050f2:	d06f      	beq.n	80051d4 <_scanf_float+0x218>
 80050f4:	2b79      	cmp	r3, #121	; 0x79
 80050f6:	e7f6      	b.n	80050e6 <_scanf_float+0x12a>
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	05c8      	lsls	r0, r1, #23
 80050fc:	d51a      	bpl.n	8005134 <_scanf_float+0x178>
 80050fe:	9b02      	ldr	r3, [sp, #8]
 8005100:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005104:	6021      	str	r1, [r4, #0]
 8005106:	f109 0901 	add.w	r9, r9, #1
 800510a:	b11b      	cbz	r3, 8005114 <_scanf_float+0x158>
 800510c:	3b01      	subs	r3, #1
 800510e:	3201      	adds	r2, #1
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	60a2      	str	r2, [r4, #8]
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	f340 8084 	ble.w	8005234 <_scanf_float+0x278>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	e766      	b.n	8005002 <_scanf_float+0x46>
 8005134:	eb1a 0f05 	cmn.w	sl, r5
 8005138:	f47f af70 	bne.w	800501c <_scanf_float+0x60>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005142:	6022      	str	r2, [r4, #0]
 8005144:	f806 3b01 	strb.w	r3, [r6], #1
 8005148:	e7e4      	b.n	8005114 <_scanf_float+0x158>
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	0610      	lsls	r0, r2, #24
 800514e:	f57f af65 	bpl.w	800501c <_scanf_float+0x60>
 8005152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005156:	e7f4      	b.n	8005142 <_scanf_float+0x186>
 8005158:	f1ba 0f00 	cmp.w	sl, #0
 800515c:	d10e      	bne.n	800517c <_scanf_float+0x1c0>
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	d10e      	bne.n	8005182 <_scanf_float+0x1c6>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800516a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800516e:	d108      	bne.n	8005182 <_scanf_float+0x1c6>
 8005170:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005174:	6022      	str	r2, [r4, #0]
 8005176:	f04f 0a01 	mov.w	sl, #1
 800517a:	e7e3      	b.n	8005144 <_scanf_float+0x188>
 800517c:	f1ba 0f02 	cmp.w	sl, #2
 8005180:	d055      	beq.n	800522e <_scanf_float+0x272>
 8005182:	2d01      	cmp	r5, #1
 8005184:	d002      	beq.n	800518c <_scanf_float+0x1d0>
 8005186:	2d04      	cmp	r5, #4
 8005188:	f47f af48 	bne.w	800501c <_scanf_float+0x60>
 800518c:	3501      	adds	r5, #1
 800518e:	b2ed      	uxtb	r5, r5
 8005190:	e7d8      	b.n	8005144 <_scanf_float+0x188>
 8005192:	f1ba 0f01 	cmp.w	sl, #1
 8005196:	f47f af41 	bne.w	800501c <_scanf_float+0x60>
 800519a:	f04f 0a02 	mov.w	sl, #2
 800519e:	e7d1      	b.n	8005144 <_scanf_float+0x188>
 80051a0:	b97d      	cbnz	r5, 80051c2 <_scanf_float+0x206>
 80051a2:	f1b9 0f00 	cmp.w	r9, #0
 80051a6:	f47f af3c 	bne.w	8005022 <_scanf_float+0x66>
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051b4:	f47f af39 	bne.w	800502a <_scanf_float+0x6e>
 80051b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051bc:	6022      	str	r2, [r4, #0]
 80051be:	2501      	movs	r5, #1
 80051c0:	e7c0      	b.n	8005144 <_scanf_float+0x188>
 80051c2:	2d03      	cmp	r5, #3
 80051c4:	d0e2      	beq.n	800518c <_scanf_float+0x1d0>
 80051c6:	2d05      	cmp	r5, #5
 80051c8:	e7de      	b.n	8005188 <_scanf_float+0x1cc>
 80051ca:	2d02      	cmp	r5, #2
 80051cc:	f47f af26 	bne.w	800501c <_scanf_float+0x60>
 80051d0:	2503      	movs	r5, #3
 80051d2:	e7b7      	b.n	8005144 <_scanf_float+0x188>
 80051d4:	2d06      	cmp	r5, #6
 80051d6:	f47f af21 	bne.w	800501c <_scanf_float+0x60>
 80051da:	2507      	movs	r5, #7
 80051dc:	e7b2      	b.n	8005144 <_scanf_float+0x188>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	0591      	lsls	r1, r2, #22
 80051e2:	f57f af1b 	bpl.w	800501c <_scanf_float+0x60>
 80051e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051ea:	6022      	str	r2, [r4, #0]
 80051ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80051f0:	e7a8      	b.n	8005144 <_scanf_float+0x188>
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051fc:	d006      	beq.n	800520c <_scanf_float+0x250>
 80051fe:	0550      	lsls	r0, r2, #21
 8005200:	f57f af0c 	bpl.w	800501c <_scanf_float+0x60>
 8005204:	f1b9 0f00 	cmp.w	r9, #0
 8005208:	f43f af0f 	beq.w	800502a <_scanf_float+0x6e>
 800520c:	0591      	lsls	r1, r2, #22
 800520e:	bf58      	it	pl
 8005210:	9901      	ldrpl	r1, [sp, #4]
 8005212:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005216:	bf58      	it	pl
 8005218:	eba9 0101 	subpl.w	r1, r9, r1
 800521c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005220:	bf58      	it	pl
 8005222:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005226:	6022      	str	r2, [r4, #0]
 8005228:	f04f 0900 	mov.w	r9, #0
 800522c:	e78a      	b.n	8005144 <_scanf_float+0x188>
 800522e:	f04f 0a03 	mov.w	sl, #3
 8005232:	e787      	b.n	8005144 <_scanf_float+0x188>
 8005234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005238:	4639      	mov	r1, r7
 800523a:	4640      	mov	r0, r8
 800523c:	4798      	blx	r3
 800523e:	2800      	cmp	r0, #0
 8005240:	f43f aedf 	beq.w	8005002 <_scanf_float+0x46>
 8005244:	e6ea      	b.n	800501c <_scanf_float+0x60>
 8005246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800524a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800524e:	463a      	mov	r2, r7
 8005250:	4640      	mov	r0, r8
 8005252:	4798      	blx	r3
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	3b01      	subs	r3, #1
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	e6ec      	b.n	8005036 <_scanf_float+0x7a>
 800525c:	1e6b      	subs	r3, r5, #1
 800525e:	2b06      	cmp	r3, #6
 8005260:	d825      	bhi.n	80052ae <_scanf_float+0x2f2>
 8005262:	2d02      	cmp	r5, #2
 8005264:	d836      	bhi.n	80052d4 <_scanf_float+0x318>
 8005266:	455e      	cmp	r6, fp
 8005268:	f67f aee8 	bls.w	800503c <_scanf_float+0x80>
 800526c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005270:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005274:	463a      	mov	r2, r7
 8005276:	4640      	mov	r0, r8
 8005278:	4798      	blx	r3
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	3b01      	subs	r3, #1
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	e7f1      	b.n	8005266 <_scanf_float+0x2aa>
 8005282:	9802      	ldr	r0, [sp, #8]
 8005284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005288:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800528c:	9002      	str	r0, [sp, #8]
 800528e:	463a      	mov	r2, r7
 8005290:	4640      	mov	r0, r8
 8005292:	4798      	blx	r3
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	3b01      	subs	r3, #1
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800529e:	fa5f fa8a 	uxtb.w	sl, sl
 80052a2:	f1ba 0f02 	cmp.w	sl, #2
 80052a6:	d1ec      	bne.n	8005282 <_scanf_float+0x2c6>
 80052a8:	3d03      	subs	r5, #3
 80052aa:	b2ed      	uxtb	r5, r5
 80052ac:	1b76      	subs	r6, r6, r5
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	05da      	lsls	r2, r3, #23
 80052b2:	d52f      	bpl.n	8005314 <_scanf_float+0x358>
 80052b4:	055b      	lsls	r3, r3, #21
 80052b6:	d510      	bpl.n	80052da <_scanf_float+0x31e>
 80052b8:	455e      	cmp	r6, fp
 80052ba:	f67f aebf 	bls.w	800503c <_scanf_float+0x80>
 80052be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052c6:	463a      	mov	r2, r7
 80052c8:	4640      	mov	r0, r8
 80052ca:	4798      	blx	r3
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	e7f1      	b.n	80052b8 <_scanf_float+0x2fc>
 80052d4:	46aa      	mov	sl, r5
 80052d6:	9602      	str	r6, [sp, #8]
 80052d8:	e7df      	b.n	800529a <_scanf_float+0x2de>
 80052da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	2965      	cmp	r1, #101	; 0x65
 80052e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80052e6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	d00c      	beq.n	8005308 <_scanf_float+0x34c>
 80052ee:	2945      	cmp	r1, #69	; 0x45
 80052f0:	d00a      	beq.n	8005308 <_scanf_float+0x34c>
 80052f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052f6:	463a      	mov	r2, r7
 80052f8:	4640      	mov	r0, r8
 80052fa:	4798      	blx	r3
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005302:	3b01      	subs	r3, #1
 8005304:	1eb5      	subs	r5, r6, #2
 8005306:	6123      	str	r3, [r4, #16]
 8005308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800530c:	463a      	mov	r2, r7
 800530e:	4640      	mov	r0, r8
 8005310:	4798      	blx	r3
 8005312:	462e      	mov	r6, r5
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	f015 0510 	ands.w	r5, r5, #16
 800531a:	d159      	bne.n	80053d0 <_scanf_float+0x414>
 800531c:	7035      	strb	r5, [r6, #0]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005328:	d11b      	bne.n	8005362 <_scanf_float+0x3a6>
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	454b      	cmp	r3, r9
 800532e:	eba3 0209 	sub.w	r2, r3, r9
 8005332:	d123      	bne.n	800537c <_scanf_float+0x3c0>
 8005334:	2200      	movs	r2, #0
 8005336:	4659      	mov	r1, fp
 8005338:	4640      	mov	r0, r8
 800533a:	f000 ff0f 	bl	800615c <_strtod_r>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	f012 0f02 	tst.w	r2, #2
 8005346:	ec57 6b10 	vmov	r6, r7, d0
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	d021      	beq.n	8005392 <_scanf_float+0x3d6>
 800534e:	9903      	ldr	r1, [sp, #12]
 8005350:	1d1a      	adds	r2, r3, #4
 8005352:	600a      	str	r2, [r1, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	e9c3 6700 	strd	r6, r7, [r3]
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60e3      	str	r3, [r4, #12]
 8005360:	e66d      	b.n	800503e <_scanf_float+0x82>
 8005362:	9b04      	ldr	r3, [sp, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0e5      	beq.n	8005334 <_scanf_float+0x378>
 8005368:	9905      	ldr	r1, [sp, #20]
 800536a:	230a      	movs	r3, #10
 800536c:	462a      	mov	r2, r5
 800536e:	3101      	adds	r1, #1
 8005370:	4640      	mov	r0, r8
 8005372:	f000 ff7b 	bl	800626c <_strtol_r>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	9e05      	ldr	r6, [sp, #20]
 800537a:	1ac2      	subs	r2, r0, r3
 800537c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005380:	429e      	cmp	r6, r3
 8005382:	bf28      	it	cs
 8005384:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005388:	4912      	ldr	r1, [pc, #72]	; (80053d4 <_scanf_float+0x418>)
 800538a:	4630      	mov	r0, r6
 800538c:	f000 f8a2 	bl	80054d4 <siprintf>
 8005390:	e7d0      	b.n	8005334 <_scanf_float+0x378>
 8005392:	9903      	ldr	r1, [sp, #12]
 8005394:	f012 0f04 	tst.w	r2, #4
 8005398:	f103 0204 	add.w	r2, r3, #4
 800539c:	600a      	str	r2, [r1, #0]
 800539e:	d1d9      	bne.n	8005354 <_scanf_float+0x398>
 80053a0:	f8d3 8000 	ldr.w	r8, [r3]
 80053a4:	ee10 2a10 	vmov	r2, s0
 80053a8:	ee10 0a10 	vmov	r0, s0
 80053ac:	463b      	mov	r3, r7
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fb fbdc 	bl	8000b6c <__aeabi_dcmpun>
 80053b4:	b128      	cbz	r0, 80053c2 <_scanf_float+0x406>
 80053b6:	4808      	ldr	r0, [pc, #32]	; (80053d8 <_scanf_float+0x41c>)
 80053b8:	f000 f886 	bl	80054c8 <nanf>
 80053bc:	ed88 0a00 	vstr	s0, [r8]
 80053c0:	e7cb      	b.n	800535a <_scanf_float+0x39e>
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fb fc2f 	bl	8000c28 <__aeabi_d2f>
 80053ca:	f8c8 0000 	str.w	r0, [r8]
 80053ce:	e7c4      	b.n	800535a <_scanf_float+0x39e>
 80053d0:	2500      	movs	r5, #0
 80053d2:	e634      	b.n	800503e <_scanf_float+0x82>
 80053d4:	08009174 	.word	0x08009174
 80053d8:	080095e8 	.word	0x080095e8

080053dc <_puts_r>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	460e      	mov	r6, r1
 80053e0:	4605      	mov	r5, r0
 80053e2:	b118      	cbz	r0, 80053ec <_puts_r+0x10>
 80053e4:	6983      	ldr	r3, [r0, #24]
 80053e6:	b90b      	cbnz	r3, 80053ec <_puts_r+0x10>
 80053e8:	f001 ff96 	bl	8007318 <__sinit>
 80053ec:	69ab      	ldr	r3, [r5, #24]
 80053ee:	68ac      	ldr	r4, [r5, #8]
 80053f0:	b913      	cbnz	r3, 80053f8 <_puts_r+0x1c>
 80053f2:	4628      	mov	r0, r5
 80053f4:	f001 ff90 	bl	8007318 <__sinit>
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <_puts_r+0xd0>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d120      	bne.n	8005440 <_puts_r+0x64>
 80053fe:	686c      	ldr	r4, [r5, #4]
 8005400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d405      	bmi.n	8005412 <_puts_r+0x36>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	0598      	lsls	r0, r3, #22
 800540a:	d402      	bmi.n	8005412 <_puts_r+0x36>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f002 fb94 	bl	8007b3a <__retarget_lock_acquire_recursive>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	0719      	lsls	r1, r3, #28
 8005416:	d51d      	bpl.n	8005454 <_puts_r+0x78>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	b1db      	cbz	r3, 8005454 <_puts_r+0x78>
 800541c:	3e01      	subs	r6, #1
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005424:	3b01      	subs	r3, #1
 8005426:	60a3      	str	r3, [r4, #8]
 8005428:	bb39      	cbnz	r1, 800547a <_puts_r+0x9e>
 800542a:	2b00      	cmp	r3, #0
 800542c:	da38      	bge.n	80054a0 <_puts_r+0xc4>
 800542e:	4622      	mov	r2, r4
 8005430:	210a      	movs	r1, #10
 8005432:	4628      	mov	r0, r5
 8005434:	f000 ff1c 	bl	8006270 <__swbuf_r>
 8005438:	3001      	adds	r0, #1
 800543a:	d011      	beq.n	8005460 <_puts_r+0x84>
 800543c:	250a      	movs	r5, #10
 800543e:	e011      	b.n	8005464 <_puts_r+0x88>
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <_puts_r+0xd4>)
 8005442:	429c      	cmp	r4, r3
 8005444:	d101      	bne.n	800544a <_puts_r+0x6e>
 8005446:	68ac      	ldr	r4, [r5, #8]
 8005448:	e7da      	b.n	8005400 <_puts_r+0x24>
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <_puts_r+0xd8>)
 800544c:	429c      	cmp	r4, r3
 800544e:	bf08      	it	eq
 8005450:	68ec      	ldreq	r4, [r5, #12]
 8005452:	e7d5      	b.n	8005400 <_puts_r+0x24>
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	f000 ff5c 	bl	8006314 <__swsetup_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	d0dd      	beq.n	800541c <_puts_r+0x40>
 8005460:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005466:	07da      	lsls	r2, r3, #31
 8005468:	d405      	bmi.n	8005476 <_puts_r+0x9a>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	059b      	lsls	r3, r3, #22
 800546e:	d402      	bmi.n	8005476 <_puts_r+0x9a>
 8005470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005472:	f002 fb63 	bl	8007b3c <__retarget_lock_release_recursive>
 8005476:	4628      	mov	r0, r5
 8005478:	bd70      	pop	{r4, r5, r6, pc}
 800547a:	2b00      	cmp	r3, #0
 800547c:	da04      	bge.n	8005488 <_puts_r+0xac>
 800547e:	69a2      	ldr	r2, [r4, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	dc06      	bgt.n	8005492 <_puts_r+0xb6>
 8005484:	290a      	cmp	r1, #10
 8005486:	d004      	beq.n	8005492 <_puts_r+0xb6>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	7019      	strb	r1, [r3, #0]
 8005490:	e7c5      	b.n	800541e <_puts_r+0x42>
 8005492:	4622      	mov	r2, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 feeb 	bl	8006270 <__swbuf_r>
 800549a:	3001      	adds	r0, #1
 800549c:	d1bf      	bne.n	800541e <_puts_r+0x42>
 800549e:	e7df      	b.n	8005460 <_puts_r+0x84>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	250a      	movs	r5, #10
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	6022      	str	r2, [r4, #0]
 80054a8:	701d      	strb	r5, [r3, #0]
 80054aa:	e7db      	b.n	8005464 <_puts_r+0x88>
 80054ac:	08009384 	.word	0x08009384
 80054b0:	080093a4 	.word	0x080093a4
 80054b4:	08009364 	.word	0x08009364

080054b8 <puts>:
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <puts+0xc>)
 80054ba:	4601      	mov	r1, r0
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	f7ff bf8d 	b.w	80053dc <_puts_r>
 80054c2:	bf00      	nop
 80054c4:	20000014 	.word	0x20000014

080054c8 <nanf>:
 80054c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80054d0 <nanf+0x8>
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	7fc00000 	.word	0x7fc00000

080054d4 <siprintf>:
 80054d4:	b40e      	push	{r1, r2, r3}
 80054d6:	b500      	push	{lr}
 80054d8:	b09c      	sub	sp, #112	; 0x70
 80054da:	ab1d      	add	r3, sp, #116	; 0x74
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054e4:	4809      	ldr	r0, [pc, #36]	; (800550c <siprintf+0x38>)
 80054e6:	9107      	str	r1, [sp, #28]
 80054e8:	9104      	str	r1, [sp, #16]
 80054ea:	4909      	ldr	r1, [pc, #36]	; (8005510 <siprintf+0x3c>)
 80054ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f0:	9105      	str	r1, [sp, #20]
 80054f2:	6800      	ldr	r0, [r0, #0]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	a902      	add	r1, sp, #8
 80054f8:	f003 f9b4 	bl	8008864 <_svfiprintf_r>
 80054fc:	9b02      	ldr	r3, [sp, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	b01c      	add	sp, #112	; 0x70
 8005504:	f85d eb04 	ldr.w	lr, [sp], #4
 8005508:	b003      	add	sp, #12
 800550a:	4770      	bx	lr
 800550c:	20000014 	.word	0x20000014
 8005510:	ffff0208 	.word	0xffff0208

08005514 <sulp>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4604      	mov	r4, r0
 8005518:	460d      	mov	r5, r1
 800551a:	ec45 4b10 	vmov	d0, r4, r5
 800551e:	4616      	mov	r6, r2
 8005520:	f002 fefe 	bl	8008320 <__ulp>
 8005524:	ec51 0b10 	vmov	r0, r1, d0
 8005528:	b17e      	cbz	r6, 800554a <sulp+0x36>
 800552a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800552e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005532:	2b00      	cmp	r3, #0
 8005534:	dd09      	ble.n	800554a <sulp+0x36>
 8005536:	051b      	lsls	r3, r3, #20
 8005538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800553c:	2400      	movs	r4, #0
 800553e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	f7fb f877 	bl	8000638 <__aeabi_dmul>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	0000      	movs	r0, r0
	...

08005550 <_strtod_l>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	ed2d 8b02 	vpush	{d8}
 8005558:	b09d      	sub	sp, #116	; 0x74
 800555a:	461f      	mov	r7, r3
 800555c:	2300      	movs	r3, #0
 800555e:	9318      	str	r3, [sp, #96]	; 0x60
 8005560:	4ba2      	ldr	r3, [pc, #648]	; (80057ec <_strtod_l+0x29c>)
 8005562:	9213      	str	r2, [sp, #76]	; 0x4c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	9305      	str	r3, [sp, #20]
 8005568:	4604      	mov	r4, r0
 800556a:	4618      	mov	r0, r3
 800556c:	4688      	mov	r8, r1
 800556e:	f7fa fe4f 	bl	8000210 <strlen>
 8005572:	f04f 0a00 	mov.w	sl, #0
 8005576:	4605      	mov	r5, r0
 8005578:	f04f 0b00 	mov.w	fp, #0
 800557c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	2a2b      	cmp	r2, #43	; 0x2b
 8005586:	d04e      	beq.n	8005626 <_strtod_l+0xd6>
 8005588:	d83b      	bhi.n	8005602 <_strtod_l+0xb2>
 800558a:	2a0d      	cmp	r2, #13
 800558c:	d834      	bhi.n	80055f8 <_strtod_l+0xa8>
 800558e:	2a08      	cmp	r2, #8
 8005590:	d834      	bhi.n	80055fc <_strtod_l+0xac>
 8005592:	2a00      	cmp	r2, #0
 8005594:	d03e      	beq.n	8005614 <_strtod_l+0xc4>
 8005596:	2300      	movs	r3, #0
 8005598:	930a      	str	r3, [sp, #40]	; 0x28
 800559a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800559c:	7833      	ldrb	r3, [r6, #0]
 800559e:	2b30      	cmp	r3, #48	; 0x30
 80055a0:	f040 80b0 	bne.w	8005704 <_strtod_l+0x1b4>
 80055a4:	7873      	ldrb	r3, [r6, #1]
 80055a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055aa:	2b58      	cmp	r3, #88	; 0x58
 80055ac:	d168      	bne.n	8005680 <_strtod_l+0x130>
 80055ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	ab18      	add	r3, sp, #96	; 0x60
 80055b4:	9702      	str	r7, [sp, #8]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	4a8d      	ldr	r2, [pc, #564]	; (80057f0 <_strtod_l+0x2a0>)
 80055ba:	ab19      	add	r3, sp, #100	; 0x64
 80055bc:	a917      	add	r1, sp, #92	; 0x5c
 80055be:	4620      	mov	r0, r4
 80055c0:	f001 ffae 	bl	8007520 <__gethex>
 80055c4:	f010 0707 	ands.w	r7, r0, #7
 80055c8:	4605      	mov	r5, r0
 80055ca:	d005      	beq.n	80055d8 <_strtod_l+0x88>
 80055cc:	2f06      	cmp	r7, #6
 80055ce:	d12c      	bne.n	800562a <_strtod_l+0xda>
 80055d0:	3601      	adds	r6, #1
 80055d2:	2300      	movs	r3, #0
 80055d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80055d6:	930a      	str	r3, [sp, #40]	; 0x28
 80055d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 8590 	bne.w	8006100 <_strtod_l+0xbb0>
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	b1eb      	cbz	r3, 8005620 <_strtod_l+0xd0>
 80055e4:	4652      	mov	r2, sl
 80055e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055ea:	ec43 2b10 	vmov	d0, r2, r3
 80055ee:	b01d      	add	sp, #116	; 0x74
 80055f0:	ecbd 8b02 	vpop	{d8}
 80055f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f8:	2a20      	cmp	r2, #32
 80055fa:	d1cc      	bne.n	8005596 <_strtod_l+0x46>
 80055fc:	3301      	adds	r3, #1
 80055fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005600:	e7be      	b.n	8005580 <_strtod_l+0x30>
 8005602:	2a2d      	cmp	r2, #45	; 0x2d
 8005604:	d1c7      	bne.n	8005596 <_strtod_l+0x46>
 8005606:	2201      	movs	r2, #1
 8005608:	920a      	str	r2, [sp, #40]	; 0x28
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	9217      	str	r2, [sp, #92]	; 0x5c
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1c2      	bne.n	800559a <_strtod_l+0x4a>
 8005614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005616:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 856e 	bne.w	80060fc <_strtod_l+0xbac>
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	e7e1      	b.n	80055ea <_strtod_l+0x9a>
 8005626:	2200      	movs	r2, #0
 8005628:	e7ee      	b.n	8005608 <_strtod_l+0xb8>
 800562a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800562c:	b13a      	cbz	r2, 800563e <_strtod_l+0xee>
 800562e:	2135      	movs	r1, #53	; 0x35
 8005630:	a81a      	add	r0, sp, #104	; 0x68
 8005632:	f002 ff80 	bl	8008536 <__copybits>
 8005636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005638:	4620      	mov	r0, r4
 800563a:	f002 fb3f 	bl	8007cbc <_Bfree>
 800563e:	3f01      	subs	r7, #1
 8005640:	2f04      	cmp	r7, #4
 8005642:	d806      	bhi.n	8005652 <_strtod_l+0x102>
 8005644:	e8df f007 	tbb	[pc, r7]
 8005648:	1714030a 	.word	0x1714030a
 800564c:	0a          	.byte	0x0a
 800564d:	00          	.byte	0x00
 800564e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005652:	0728      	lsls	r0, r5, #28
 8005654:	d5c0      	bpl.n	80055d8 <_strtod_l+0x88>
 8005656:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800565a:	e7bd      	b.n	80055d8 <_strtod_l+0x88>
 800565c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800566a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800566e:	e7f0      	b.n	8005652 <_strtod_l+0x102>
 8005670:	f8df b180 	ldr.w	fp, [pc, #384]	; 80057f4 <_strtod_l+0x2a4>
 8005674:	e7ed      	b.n	8005652 <_strtod_l+0x102>
 8005676:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800567a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800567e:	e7e8      	b.n	8005652 <_strtod_l+0x102>
 8005680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	9217      	str	r2, [sp, #92]	; 0x5c
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b30      	cmp	r3, #48	; 0x30
 800568a:	d0f9      	beq.n	8005680 <_strtod_l+0x130>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0a3      	beq.n	80055d8 <_strtod_l+0x88>
 8005690:	2301      	movs	r3, #1
 8005692:	f04f 0900 	mov.w	r9, #0
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800569a:	9308      	str	r3, [sp, #32]
 800569c:	f8cd 901c 	str.w	r9, [sp, #28]
 80056a0:	464f      	mov	r7, r9
 80056a2:	220a      	movs	r2, #10
 80056a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056a6:	7806      	ldrb	r6, [r0, #0]
 80056a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80056ac:	b2d9      	uxtb	r1, r3
 80056ae:	2909      	cmp	r1, #9
 80056b0:	d92a      	bls.n	8005708 <_strtod_l+0x1b8>
 80056b2:	9905      	ldr	r1, [sp, #20]
 80056b4:	462a      	mov	r2, r5
 80056b6:	f003 fa32 	bl	8008b1e <strncmp>
 80056ba:	b398      	cbz	r0, 8005724 <_strtod_l+0x1d4>
 80056bc:	2000      	movs	r0, #0
 80056be:	4632      	mov	r2, r6
 80056c0:	463d      	mov	r5, r7
 80056c2:	9005      	str	r0, [sp, #20]
 80056c4:	4603      	mov	r3, r0
 80056c6:	2a65      	cmp	r2, #101	; 0x65
 80056c8:	d001      	beq.n	80056ce <_strtod_l+0x17e>
 80056ca:	2a45      	cmp	r2, #69	; 0x45
 80056cc:	d118      	bne.n	8005700 <_strtod_l+0x1b0>
 80056ce:	b91d      	cbnz	r5, 80056d8 <_strtod_l+0x188>
 80056d0:	9a04      	ldr	r2, [sp, #16]
 80056d2:	4302      	orrs	r2, r0
 80056d4:	d09e      	beq.n	8005614 <_strtod_l+0xc4>
 80056d6:	2500      	movs	r5, #0
 80056d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80056dc:	f108 0201 	add.w	r2, r8, #1
 80056e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80056e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80056e6:	2a2b      	cmp	r2, #43	; 0x2b
 80056e8:	d075      	beq.n	80057d6 <_strtod_l+0x286>
 80056ea:	2a2d      	cmp	r2, #45	; 0x2d
 80056ec:	d07b      	beq.n	80057e6 <_strtod_l+0x296>
 80056ee:	f04f 0c00 	mov.w	ip, #0
 80056f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80056f6:	2909      	cmp	r1, #9
 80056f8:	f240 8082 	bls.w	8005800 <_strtod_l+0x2b0>
 80056fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005700:	2600      	movs	r6, #0
 8005702:	e09d      	b.n	8005840 <_strtod_l+0x2f0>
 8005704:	2300      	movs	r3, #0
 8005706:	e7c4      	b.n	8005692 <_strtod_l+0x142>
 8005708:	2f08      	cmp	r7, #8
 800570a:	bfd8      	it	le
 800570c:	9907      	ldrle	r1, [sp, #28]
 800570e:	f100 0001 	add.w	r0, r0, #1
 8005712:	bfda      	itte	le
 8005714:	fb02 3301 	mlale	r3, r2, r1, r3
 8005718:	9307      	strle	r3, [sp, #28]
 800571a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800571e:	3701      	adds	r7, #1
 8005720:	9017      	str	r0, [sp, #92]	; 0x5c
 8005722:	e7bf      	b.n	80056a4 <_strtod_l+0x154>
 8005724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005726:	195a      	adds	r2, r3, r5
 8005728:	9217      	str	r2, [sp, #92]	; 0x5c
 800572a:	5d5a      	ldrb	r2, [r3, r5]
 800572c:	2f00      	cmp	r7, #0
 800572e:	d037      	beq.n	80057a0 <_strtod_l+0x250>
 8005730:	9005      	str	r0, [sp, #20]
 8005732:	463d      	mov	r5, r7
 8005734:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005738:	2b09      	cmp	r3, #9
 800573a:	d912      	bls.n	8005762 <_strtod_l+0x212>
 800573c:	2301      	movs	r3, #1
 800573e:	e7c2      	b.n	80056c6 <_strtod_l+0x176>
 8005740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	9217      	str	r2, [sp, #92]	; 0x5c
 8005746:	785a      	ldrb	r2, [r3, #1]
 8005748:	3001      	adds	r0, #1
 800574a:	2a30      	cmp	r2, #48	; 0x30
 800574c:	d0f8      	beq.n	8005740 <_strtod_l+0x1f0>
 800574e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005752:	2b08      	cmp	r3, #8
 8005754:	f200 84d9 	bhi.w	800610a <_strtod_l+0xbba>
 8005758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800575a:	9005      	str	r0, [sp, #20]
 800575c:	2000      	movs	r0, #0
 800575e:	9308      	str	r3, [sp, #32]
 8005760:	4605      	mov	r5, r0
 8005762:	3a30      	subs	r2, #48	; 0x30
 8005764:	f100 0301 	add.w	r3, r0, #1
 8005768:	d014      	beq.n	8005794 <_strtod_l+0x244>
 800576a:	9905      	ldr	r1, [sp, #20]
 800576c:	4419      	add	r1, r3
 800576e:	9105      	str	r1, [sp, #20]
 8005770:	462b      	mov	r3, r5
 8005772:	eb00 0e05 	add.w	lr, r0, r5
 8005776:	210a      	movs	r1, #10
 8005778:	4573      	cmp	r3, lr
 800577a:	d113      	bne.n	80057a4 <_strtod_l+0x254>
 800577c:	182b      	adds	r3, r5, r0
 800577e:	2b08      	cmp	r3, #8
 8005780:	f105 0501 	add.w	r5, r5, #1
 8005784:	4405      	add	r5, r0
 8005786:	dc1c      	bgt.n	80057c2 <_strtod_l+0x272>
 8005788:	9907      	ldr	r1, [sp, #28]
 800578a:	230a      	movs	r3, #10
 800578c:	fb03 2301 	mla	r3, r3, r1, r2
 8005790:	9307      	str	r3, [sp, #28]
 8005792:	2300      	movs	r3, #0
 8005794:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005796:	1c51      	adds	r1, r2, #1
 8005798:	9117      	str	r1, [sp, #92]	; 0x5c
 800579a:	7852      	ldrb	r2, [r2, #1]
 800579c:	4618      	mov	r0, r3
 800579e:	e7c9      	b.n	8005734 <_strtod_l+0x1e4>
 80057a0:	4638      	mov	r0, r7
 80057a2:	e7d2      	b.n	800574a <_strtod_l+0x1fa>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	dc04      	bgt.n	80057b2 <_strtod_l+0x262>
 80057a8:	9e07      	ldr	r6, [sp, #28]
 80057aa:	434e      	muls	r6, r1
 80057ac:	9607      	str	r6, [sp, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	e7e2      	b.n	8005778 <_strtod_l+0x228>
 80057b2:	f103 0c01 	add.w	ip, r3, #1
 80057b6:	f1bc 0f10 	cmp.w	ip, #16
 80057ba:	bfd8      	it	le
 80057bc:	fb01 f909 	mulle.w	r9, r1, r9
 80057c0:	e7f5      	b.n	80057ae <_strtod_l+0x25e>
 80057c2:	2d10      	cmp	r5, #16
 80057c4:	bfdc      	itt	le
 80057c6:	230a      	movle	r3, #10
 80057c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80057cc:	e7e1      	b.n	8005792 <_strtod_l+0x242>
 80057ce:	2300      	movs	r3, #0
 80057d0:	9305      	str	r3, [sp, #20]
 80057d2:	2301      	movs	r3, #1
 80057d4:	e77c      	b.n	80056d0 <_strtod_l+0x180>
 80057d6:	f04f 0c00 	mov.w	ip, #0
 80057da:	f108 0202 	add.w	r2, r8, #2
 80057de:	9217      	str	r2, [sp, #92]	; 0x5c
 80057e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80057e4:	e785      	b.n	80056f2 <_strtod_l+0x1a2>
 80057e6:	f04f 0c01 	mov.w	ip, #1
 80057ea:	e7f6      	b.n	80057da <_strtod_l+0x28a>
 80057ec:	0800942c 	.word	0x0800942c
 80057f0:	0800917c 	.word	0x0800917c
 80057f4:	7ff00000 	.word	0x7ff00000
 80057f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057fa:	1c51      	adds	r1, r2, #1
 80057fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80057fe:	7852      	ldrb	r2, [r2, #1]
 8005800:	2a30      	cmp	r2, #48	; 0x30
 8005802:	d0f9      	beq.n	80057f8 <_strtod_l+0x2a8>
 8005804:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005808:	2908      	cmp	r1, #8
 800580a:	f63f af79 	bhi.w	8005700 <_strtod_l+0x1b0>
 800580e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005814:	9206      	str	r2, [sp, #24]
 8005816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005818:	1c51      	adds	r1, r2, #1
 800581a:	9117      	str	r1, [sp, #92]	; 0x5c
 800581c:	7852      	ldrb	r2, [r2, #1]
 800581e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005822:	2e09      	cmp	r6, #9
 8005824:	d937      	bls.n	8005896 <_strtod_l+0x346>
 8005826:	9e06      	ldr	r6, [sp, #24]
 8005828:	1b89      	subs	r1, r1, r6
 800582a:	2908      	cmp	r1, #8
 800582c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005830:	dc02      	bgt.n	8005838 <_strtod_l+0x2e8>
 8005832:	4576      	cmp	r6, lr
 8005834:	bfa8      	it	ge
 8005836:	4676      	movge	r6, lr
 8005838:	f1bc 0f00 	cmp.w	ip, #0
 800583c:	d000      	beq.n	8005840 <_strtod_l+0x2f0>
 800583e:	4276      	negs	r6, r6
 8005840:	2d00      	cmp	r5, #0
 8005842:	d14d      	bne.n	80058e0 <_strtod_l+0x390>
 8005844:	9904      	ldr	r1, [sp, #16]
 8005846:	4301      	orrs	r1, r0
 8005848:	f47f aec6 	bne.w	80055d8 <_strtod_l+0x88>
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f aee1 	bne.w	8005614 <_strtod_l+0xc4>
 8005852:	2a69      	cmp	r2, #105	; 0x69
 8005854:	d027      	beq.n	80058a6 <_strtod_l+0x356>
 8005856:	dc24      	bgt.n	80058a2 <_strtod_l+0x352>
 8005858:	2a49      	cmp	r2, #73	; 0x49
 800585a:	d024      	beq.n	80058a6 <_strtod_l+0x356>
 800585c:	2a4e      	cmp	r2, #78	; 0x4e
 800585e:	f47f aed9 	bne.w	8005614 <_strtod_l+0xc4>
 8005862:	499f      	ldr	r1, [pc, #636]	; (8005ae0 <_strtod_l+0x590>)
 8005864:	a817      	add	r0, sp, #92	; 0x5c
 8005866:	f002 f8b3 	bl	80079d0 <__match>
 800586a:	2800      	cmp	r0, #0
 800586c:	f43f aed2 	beq.w	8005614 <_strtod_l+0xc4>
 8005870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b28      	cmp	r3, #40	; 0x28
 8005876:	d12d      	bne.n	80058d4 <_strtod_l+0x384>
 8005878:	499a      	ldr	r1, [pc, #616]	; (8005ae4 <_strtod_l+0x594>)
 800587a:	aa1a      	add	r2, sp, #104	; 0x68
 800587c:	a817      	add	r0, sp, #92	; 0x5c
 800587e:	f002 f8bb 	bl	80079f8 <__hexnan>
 8005882:	2805      	cmp	r0, #5
 8005884:	d126      	bne.n	80058d4 <_strtod_l+0x384>
 8005886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005888:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800588c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005890:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005894:	e6a0      	b.n	80055d8 <_strtod_l+0x88>
 8005896:	210a      	movs	r1, #10
 8005898:	fb01 2e0e 	mla	lr, r1, lr, r2
 800589c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80058a0:	e7b9      	b.n	8005816 <_strtod_l+0x2c6>
 80058a2:	2a6e      	cmp	r2, #110	; 0x6e
 80058a4:	e7db      	b.n	800585e <_strtod_l+0x30e>
 80058a6:	4990      	ldr	r1, [pc, #576]	; (8005ae8 <_strtod_l+0x598>)
 80058a8:	a817      	add	r0, sp, #92	; 0x5c
 80058aa:	f002 f891 	bl	80079d0 <__match>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f43f aeb0 	beq.w	8005614 <_strtod_l+0xc4>
 80058b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058b6:	498d      	ldr	r1, [pc, #564]	; (8005aec <_strtod_l+0x59c>)
 80058b8:	3b01      	subs	r3, #1
 80058ba:	a817      	add	r0, sp, #92	; 0x5c
 80058bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80058be:	f002 f887 	bl	80079d0 <__match>
 80058c2:	b910      	cbnz	r0, 80058ca <_strtod_l+0x37a>
 80058c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c6:	3301      	adds	r3, #1
 80058c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80058ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005afc <_strtod_l+0x5ac>
 80058ce:	f04f 0a00 	mov.w	sl, #0
 80058d2:	e681      	b.n	80055d8 <_strtod_l+0x88>
 80058d4:	4886      	ldr	r0, [pc, #536]	; (8005af0 <_strtod_l+0x5a0>)
 80058d6:	f003 f8c7 	bl	8008a68 <nan>
 80058da:	ec5b ab10 	vmov	sl, fp, d0
 80058de:	e67b      	b.n	80055d8 <_strtod_l+0x88>
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	9807      	ldr	r0, [sp, #28]
 80058e4:	1af3      	subs	r3, r6, r3
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	bf08      	it	eq
 80058ea:	462f      	moveq	r7, r5
 80058ec:	2d10      	cmp	r5, #16
 80058ee:	9306      	str	r3, [sp, #24]
 80058f0:	46a8      	mov	r8, r5
 80058f2:	bfa8      	it	ge
 80058f4:	f04f 0810 	movge.w	r8, #16
 80058f8:	f7fa fe24 	bl	8000544 <__aeabi_ui2d>
 80058fc:	2d09      	cmp	r5, #9
 80058fe:	4682      	mov	sl, r0
 8005900:	468b      	mov	fp, r1
 8005902:	dd13      	ble.n	800592c <_strtod_l+0x3dc>
 8005904:	4b7b      	ldr	r3, [pc, #492]	; (8005af4 <_strtod_l+0x5a4>)
 8005906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800590a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800590e:	f7fa fe93 	bl	8000638 <__aeabi_dmul>
 8005912:	4682      	mov	sl, r0
 8005914:	4648      	mov	r0, r9
 8005916:	468b      	mov	fp, r1
 8005918:	f7fa fe14 	bl	8000544 <__aeabi_ui2d>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4650      	mov	r0, sl
 8005922:	4659      	mov	r1, fp
 8005924:	f7fa fcd2 	bl	80002cc <__adddf3>
 8005928:	4682      	mov	sl, r0
 800592a:	468b      	mov	fp, r1
 800592c:	2d0f      	cmp	r5, #15
 800592e:	dc38      	bgt.n	80059a2 <_strtod_l+0x452>
 8005930:	9b06      	ldr	r3, [sp, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f43f ae50 	beq.w	80055d8 <_strtod_l+0x88>
 8005938:	dd24      	ble.n	8005984 <_strtod_l+0x434>
 800593a:	2b16      	cmp	r3, #22
 800593c:	dc0b      	bgt.n	8005956 <_strtod_l+0x406>
 800593e:	496d      	ldr	r1, [pc, #436]	; (8005af4 <_strtod_l+0x5a4>)
 8005940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005948:	4652      	mov	r2, sl
 800594a:	465b      	mov	r3, fp
 800594c:	f7fa fe74 	bl	8000638 <__aeabi_dmul>
 8005950:	4682      	mov	sl, r0
 8005952:	468b      	mov	fp, r1
 8005954:	e640      	b.n	80055d8 <_strtod_l+0x88>
 8005956:	9a06      	ldr	r2, [sp, #24]
 8005958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800595c:	4293      	cmp	r3, r2
 800595e:	db20      	blt.n	80059a2 <_strtod_l+0x452>
 8005960:	4c64      	ldr	r4, [pc, #400]	; (8005af4 <_strtod_l+0x5a4>)
 8005962:	f1c5 050f 	rsb	r5, r5, #15
 8005966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800596a:	4652      	mov	r2, sl
 800596c:	465b      	mov	r3, fp
 800596e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005972:	f7fa fe61 	bl	8000638 <__aeabi_dmul>
 8005976:	9b06      	ldr	r3, [sp, #24]
 8005978:	1b5d      	subs	r5, r3, r5
 800597a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800597e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005982:	e7e3      	b.n	800594c <_strtod_l+0x3fc>
 8005984:	9b06      	ldr	r3, [sp, #24]
 8005986:	3316      	adds	r3, #22
 8005988:	db0b      	blt.n	80059a2 <_strtod_l+0x452>
 800598a:	9b05      	ldr	r3, [sp, #20]
 800598c:	1b9e      	subs	r6, r3, r6
 800598e:	4b59      	ldr	r3, [pc, #356]	; (8005af4 <_strtod_l+0x5a4>)
 8005990:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005994:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005998:	4650      	mov	r0, sl
 800599a:	4659      	mov	r1, fp
 800599c:	f7fa ff76 	bl	800088c <__aeabi_ddiv>
 80059a0:	e7d6      	b.n	8005950 <_strtod_l+0x400>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	eba5 0808 	sub.w	r8, r5, r8
 80059a8:	4498      	add	r8, r3
 80059aa:	f1b8 0f00 	cmp.w	r8, #0
 80059ae:	dd74      	ble.n	8005a9a <_strtod_l+0x54a>
 80059b0:	f018 030f 	ands.w	r3, r8, #15
 80059b4:	d00a      	beq.n	80059cc <_strtod_l+0x47c>
 80059b6:	494f      	ldr	r1, [pc, #316]	; (8005af4 <_strtod_l+0x5a4>)
 80059b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059bc:	4652      	mov	r2, sl
 80059be:	465b      	mov	r3, fp
 80059c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059c4:	f7fa fe38 	bl	8000638 <__aeabi_dmul>
 80059c8:	4682      	mov	sl, r0
 80059ca:	468b      	mov	fp, r1
 80059cc:	f038 080f 	bics.w	r8, r8, #15
 80059d0:	d04f      	beq.n	8005a72 <_strtod_l+0x522>
 80059d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80059d6:	dd22      	ble.n	8005a1e <_strtod_l+0x4ce>
 80059d8:	2500      	movs	r5, #0
 80059da:	462e      	mov	r6, r5
 80059dc:	9507      	str	r5, [sp, #28]
 80059de:	9505      	str	r5, [sp, #20]
 80059e0:	2322      	movs	r3, #34	; 0x22
 80059e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005afc <_strtod_l+0x5ac>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	f04f 0a00 	mov.w	sl, #0
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f43f adf2 	beq.w	80055d8 <_strtod_l+0x88>
 80059f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059f6:	4620      	mov	r0, r4
 80059f8:	f002 f960 	bl	8007cbc <_Bfree>
 80059fc:	9905      	ldr	r1, [sp, #20]
 80059fe:	4620      	mov	r0, r4
 8005a00:	f002 f95c 	bl	8007cbc <_Bfree>
 8005a04:	4631      	mov	r1, r6
 8005a06:	4620      	mov	r0, r4
 8005a08:	f002 f958 	bl	8007cbc <_Bfree>
 8005a0c:	9907      	ldr	r1, [sp, #28]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f002 f954 	bl	8007cbc <_Bfree>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4620      	mov	r0, r4
 8005a18:	f002 f950 	bl	8007cbc <_Bfree>
 8005a1c:	e5dc      	b.n	80055d8 <_strtod_l+0x88>
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <_strtod_l+0x5a8>)
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	2300      	movs	r3, #0
 8005a24:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a28:	4650      	mov	r0, sl
 8005a2a:	4659      	mov	r1, fp
 8005a2c:	4699      	mov	r9, r3
 8005a2e:	f1b8 0f01 	cmp.w	r8, #1
 8005a32:	dc21      	bgt.n	8005a78 <_strtod_l+0x528>
 8005a34:	b10b      	cbz	r3, 8005a3a <_strtod_l+0x4ea>
 8005a36:	4682      	mov	sl, r0
 8005a38:	468b      	mov	fp, r1
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <_strtod_l+0x5a8>)
 8005a3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a44:	4652      	mov	r2, sl
 8005a46:	465b      	mov	r3, fp
 8005a48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a4c:	f7fa fdf4 	bl	8000638 <__aeabi_dmul>
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <_strtod_l+0x5ac>)
 8005a52:	460a      	mov	r2, r1
 8005a54:	400b      	ands	r3, r1
 8005a56:	492a      	ldr	r1, [pc, #168]	; (8005b00 <_strtod_l+0x5b0>)
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	4682      	mov	sl, r0
 8005a5c:	d8bc      	bhi.n	80059d8 <_strtod_l+0x488>
 8005a5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a62:	428b      	cmp	r3, r1
 8005a64:	bf86      	itte	hi
 8005a66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005b04 <_strtod_l+0x5b4>
 8005a6a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005a6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005a72:	2300      	movs	r3, #0
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	e084      	b.n	8005b82 <_strtod_l+0x632>
 8005a78:	f018 0f01 	tst.w	r8, #1
 8005a7c:	d005      	beq.n	8005a8a <_strtod_l+0x53a>
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fdd8 	bl	8000638 <__aeabi_dmul>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	9a04      	ldr	r2, [sp, #16]
 8005a8c:	3208      	adds	r2, #8
 8005a8e:	f109 0901 	add.w	r9, r9, #1
 8005a92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a96:	9204      	str	r2, [sp, #16]
 8005a98:	e7c9      	b.n	8005a2e <_strtod_l+0x4de>
 8005a9a:	d0ea      	beq.n	8005a72 <_strtod_l+0x522>
 8005a9c:	f1c8 0800 	rsb	r8, r8, #0
 8005aa0:	f018 020f 	ands.w	r2, r8, #15
 8005aa4:	d00a      	beq.n	8005abc <_strtod_l+0x56c>
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <_strtod_l+0x5a4>)
 8005aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aac:	4650      	mov	r0, sl
 8005aae:	4659      	mov	r1, fp
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa feea 	bl	800088c <__aeabi_ddiv>
 8005ab8:	4682      	mov	sl, r0
 8005aba:	468b      	mov	fp, r1
 8005abc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ac0:	d0d7      	beq.n	8005a72 <_strtod_l+0x522>
 8005ac2:	f1b8 0f1f 	cmp.w	r8, #31
 8005ac6:	dd1f      	ble.n	8005b08 <_strtod_l+0x5b8>
 8005ac8:	2500      	movs	r5, #0
 8005aca:	462e      	mov	r6, r5
 8005acc:	9507      	str	r5, [sp, #28]
 8005ace:	9505      	str	r5, [sp, #20]
 8005ad0:	2322      	movs	r3, #34	; 0x22
 8005ad2:	f04f 0a00 	mov.w	sl, #0
 8005ad6:	f04f 0b00 	mov.w	fp, #0
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	e786      	b.n	80059ec <_strtod_l+0x49c>
 8005ade:	bf00      	nop
 8005ae0:	0800914d 	.word	0x0800914d
 8005ae4:	08009190 	.word	0x08009190
 8005ae8:	08009145 	.word	0x08009145
 8005aec:	080092d4 	.word	0x080092d4
 8005af0:	080095e8 	.word	0x080095e8
 8005af4:	080094c8 	.word	0x080094c8
 8005af8:	080094a0 	.word	0x080094a0
 8005afc:	7ff00000 	.word	0x7ff00000
 8005b00:	7ca00000 	.word	0x7ca00000
 8005b04:	7fefffff 	.word	0x7fefffff
 8005b08:	f018 0310 	ands.w	r3, r8, #16
 8005b0c:	bf18      	it	ne
 8005b0e:	236a      	movne	r3, #106	; 0x6a
 8005b10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005ec0 <_strtod_l+0x970>
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f018 0f01 	tst.w	r8, #1
 8005b20:	d004      	beq.n	8005b2c <_strtod_l+0x5dc>
 8005b22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b26:	f7fa fd87 	bl	8000638 <__aeabi_dmul>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b30:	f109 0908 	add.w	r9, r9, #8
 8005b34:	d1f2      	bne.n	8005b1c <_strtod_l+0x5cc>
 8005b36:	b10b      	cbz	r3, 8005b3c <_strtod_l+0x5ec>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	b1c3      	cbz	r3, 8005b72 <_strtod_l+0x622>
 8005b40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005b44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	dd11      	ble.n	8005b72 <_strtod_l+0x622>
 8005b4e:	2b1f      	cmp	r3, #31
 8005b50:	f340 8124 	ble.w	8005d9c <_strtod_l+0x84c>
 8005b54:	2b34      	cmp	r3, #52	; 0x34
 8005b56:	bfde      	ittt	le
 8005b58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005b5c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005b60:	fa03 f202 	lslle.w	r2, r3, r2
 8005b64:	f04f 0a00 	mov.w	sl, #0
 8005b68:	bfcc      	ite	gt
 8005b6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005b6e:	ea02 0b01 	andle.w	fp, r2, r1
 8005b72:	2200      	movs	r2, #0
 8005b74:	2300      	movs	r3, #0
 8005b76:	4650      	mov	r0, sl
 8005b78:	4659      	mov	r1, fp
 8005b7a:	f7fa ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d1a2      	bne.n	8005ac8 <_strtod_l+0x578>
 8005b82:	9b07      	ldr	r3, [sp, #28]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	9908      	ldr	r1, [sp, #32]
 8005b88:	462b      	mov	r3, r5
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f002 f8fd 	bl	8007d8c <__s2b>
 8005b92:	9007      	str	r0, [sp, #28]
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f43f af1f 	beq.w	80059d8 <_strtod_l+0x488>
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	1b9e      	subs	r6, r3, r6
 8005b9e:	9b06      	ldr	r3, [sp, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bfb4      	ite	lt
 8005ba4:	4633      	movlt	r3, r6
 8005ba6:	2300      	movge	r3, #0
 8005ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	2500      	movs	r5, #0
 8005bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8005bb4:	462e      	mov	r6, r5
 8005bb6:	9b07      	ldr	r3, [sp, #28]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	f002 f83e 	bl	8007c3c <_Balloc>
 8005bc0:	9005      	str	r0, [sp, #20]
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f43f af0c 	beq.w	80059e0 <_strtod_l+0x490>
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	3202      	adds	r2, #2
 8005bce:	f103 010c 	add.w	r1, r3, #12
 8005bd2:	0092      	lsls	r2, r2, #2
 8005bd4:	300c      	adds	r0, #12
 8005bd6:	f7fe fd71 	bl	80046bc <memcpy>
 8005bda:	ec4b ab10 	vmov	d0, sl, fp
 8005bde:	aa1a      	add	r2, sp, #104	; 0x68
 8005be0:	a919      	add	r1, sp, #100	; 0x64
 8005be2:	4620      	mov	r0, r4
 8005be4:	f002 fc18 	bl	8008418 <__d2b>
 8005be8:	ec4b ab18 	vmov	d8, sl, fp
 8005bec:	9018      	str	r0, [sp, #96]	; 0x60
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f aef6 	beq.w	80059e0 <_strtod_l+0x490>
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f002 f962 	bl	8007ec0 <__i2b>
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f aeee 	beq.w	80059e0 <_strtod_l+0x490>
 8005c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c06:	9904      	ldr	r1, [sp, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bfab      	itete	ge
 8005c0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005c0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005c10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005c12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005c16:	bfac      	ite	ge
 8005c18:	eb03 0902 	addge.w	r9, r3, r2
 8005c1c:	1ad7      	sublt	r7, r2, r3
 8005c1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c20:	eba3 0801 	sub.w	r8, r3, r1
 8005c24:	4490      	add	r8, r2
 8005c26:	4ba1      	ldr	r3, [pc, #644]	; (8005eac <_strtod_l+0x95c>)
 8005c28:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005c2c:	4598      	cmp	r8, r3
 8005c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c32:	f280 80c7 	bge.w	8005dc4 <_strtod_l+0x874>
 8005c36:	eba3 0308 	sub.w	r3, r3, r8
 8005c3a:	2b1f      	cmp	r3, #31
 8005c3c:	eba2 0203 	sub.w	r2, r2, r3
 8005c40:	f04f 0101 	mov.w	r1, #1
 8005c44:	f300 80b1 	bgt.w	8005daa <_strtod_l+0x85a>
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9308      	str	r3, [sp, #32]
 8005c52:	eb09 0802 	add.w	r8, r9, r2
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	45c1      	cmp	r9, r8
 8005c5a:	4417      	add	r7, r2
 8005c5c:	441f      	add	r7, r3
 8005c5e:	464b      	mov	r3, r9
 8005c60:	bfa8      	it	ge
 8005c62:	4643      	movge	r3, r8
 8005c64:	42bb      	cmp	r3, r7
 8005c66:	bfa8      	it	ge
 8005c68:	463b      	movge	r3, r7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfc2      	ittt	gt
 8005c6e:	eba8 0803 	subgt.w	r8, r8, r3
 8005c72:	1aff      	subgt	r7, r7, r3
 8005c74:	eba9 0903 	subgt.w	r9, r9, r3
 8005c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd17      	ble.n	8005cae <_strtod_l+0x75e>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	461a      	mov	r2, r3
 8005c82:	4620      	mov	r0, r4
 8005c84:	f002 f9dc 	bl	8008040 <__pow5mult>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f43f aea8 	beq.w	80059e0 <_strtod_l+0x490>
 8005c90:	4601      	mov	r1, r0
 8005c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c94:	4620      	mov	r0, r4
 8005c96:	f002 f929 	bl	8007eec <__multiply>
 8005c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f43f ae9f 	beq.w	80059e0 <_strtod_l+0x490>
 8005ca2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f002 f809 	bl	8007cbc <_Bfree>
 8005caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cac:	9318      	str	r3, [sp, #96]	; 0x60
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	f300 808c 	bgt.w	8005dce <_strtod_l+0x87e>
 8005cb6:	9b06      	ldr	r3, [sp, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dd08      	ble.n	8005cce <_strtod_l+0x77e>
 8005cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cbe:	9905      	ldr	r1, [sp, #20]
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f002 f9bd 	bl	8008040 <__pow5mult>
 8005cc6:	9005      	str	r0, [sp, #20]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f ae89 	beq.w	80059e0 <_strtod_l+0x490>
 8005cce:	2f00      	cmp	r7, #0
 8005cd0:	dd08      	ble.n	8005ce4 <_strtod_l+0x794>
 8005cd2:	9905      	ldr	r1, [sp, #20]
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f002 fa0c 	bl	80080f4 <__lshift>
 8005cdc:	9005      	str	r0, [sp, #20]
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f43f ae7e 	beq.w	80059e0 <_strtod_l+0x490>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dd08      	ble.n	8005cfc <_strtod_l+0x7ac>
 8005cea:	4631      	mov	r1, r6
 8005cec:	464a      	mov	r2, r9
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f002 fa00 	bl	80080f4 <__lshift>
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f43f ae72 	beq.w	80059e0 <_strtod_l+0x490>
 8005cfc:	9a05      	ldr	r2, [sp, #20]
 8005cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d00:	4620      	mov	r0, r4
 8005d02:	f002 fa83 	bl	800820c <__mdiff>
 8005d06:	4605      	mov	r5, r0
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f43f ae69 	beq.w	80059e0 <_strtod_l+0x490>
 8005d0e:	68c3      	ldr	r3, [r0, #12]
 8005d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d12:	2300      	movs	r3, #0
 8005d14:	60c3      	str	r3, [r0, #12]
 8005d16:	4631      	mov	r1, r6
 8005d18:	f002 fa5c 	bl	80081d4 <__mcmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	da60      	bge.n	8005de2 <_strtod_l+0x892>
 8005d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d22:	ea53 030a 	orrs.w	r3, r3, sl
 8005d26:	f040 8082 	bne.w	8005e2e <_strtod_l+0x8de>
 8005d2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d17d      	bne.n	8005e2e <_strtod_l+0x8de>
 8005d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d36:	0d1b      	lsrs	r3, r3, #20
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d3e:	d976      	bls.n	8005e2e <_strtod_l+0x8de>
 8005d40:	696b      	ldr	r3, [r5, #20]
 8005d42:	b913      	cbnz	r3, 8005d4a <_strtod_l+0x7fa>
 8005d44:	692b      	ldr	r3, [r5, #16]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	dd71      	ble.n	8005e2e <_strtod_l+0x8de>
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f002 f9d0 	bl	80080f4 <__lshift>
 8005d54:	4631      	mov	r1, r6
 8005d56:	4605      	mov	r5, r0
 8005d58:	f002 fa3c 	bl	80081d4 <__mcmp>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	dd66      	ble.n	8005e2e <_strtod_l+0x8de>
 8005d60:	9904      	ldr	r1, [sp, #16]
 8005d62:	4a53      	ldr	r2, [pc, #332]	; (8005eb0 <_strtod_l+0x960>)
 8005d64:	465b      	mov	r3, fp
 8005d66:	2900      	cmp	r1, #0
 8005d68:	f000 8081 	beq.w	8005e6e <_strtod_l+0x91e>
 8005d6c:	ea02 010b 	and.w	r1, r2, fp
 8005d70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d74:	dc7b      	bgt.n	8005e6e <_strtod_l+0x91e>
 8005d76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d7a:	f77f aea9 	ble.w	8005ad0 <_strtod_l+0x580>
 8005d7e:	4b4d      	ldr	r3, [pc, #308]	; (8005eb4 <_strtod_l+0x964>)
 8005d80:	4650      	mov	r0, sl
 8005d82:	4659      	mov	r1, fp
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fa fc57 	bl	8000638 <__aeabi_dmul>
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4303      	orrs	r3, r0
 8005d8e:	bf08      	it	eq
 8005d90:	2322      	moveq	r3, #34	; 0x22
 8005d92:	4682      	mov	sl, r0
 8005d94:	468b      	mov	fp, r1
 8005d96:	bf08      	it	eq
 8005d98:	6023      	streq	r3, [r4, #0]
 8005d9a:	e62b      	b.n	80059f4 <_strtod_l+0x4a4>
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	ea03 0a0a 	and.w	sl, r3, sl
 8005da8:	e6e3      	b.n	8005b72 <_strtod_l+0x622>
 8005daa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005dae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005db2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005db6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005dba:	fa01 f308 	lsl.w	r3, r1, r8
 8005dbe:	9308      	str	r3, [sp, #32]
 8005dc0:	910d      	str	r1, [sp, #52]	; 0x34
 8005dc2:	e746      	b.n	8005c52 <_strtod_l+0x702>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9308      	str	r3, [sp, #32]
 8005dc8:	2301      	movs	r3, #1
 8005dca:	930d      	str	r3, [sp, #52]	; 0x34
 8005dcc:	e741      	b.n	8005c52 <_strtod_l+0x702>
 8005dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f002 f98e 	bl	80080f4 <__lshift>
 8005dd8:	9018      	str	r0, [sp, #96]	; 0x60
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f47f af6b 	bne.w	8005cb6 <_strtod_l+0x766>
 8005de0:	e5fe      	b.n	80059e0 <_strtod_l+0x490>
 8005de2:	465f      	mov	r7, fp
 8005de4:	d16e      	bne.n	8005ec4 <_strtod_l+0x974>
 8005de6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005de8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dec:	b342      	cbz	r2, 8005e40 <_strtod_l+0x8f0>
 8005dee:	4a32      	ldr	r2, [pc, #200]	; (8005eb8 <_strtod_l+0x968>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d128      	bne.n	8005e46 <_strtod_l+0x8f6>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	4651      	mov	r1, sl
 8005df8:	b1eb      	cbz	r3, 8005e36 <_strtod_l+0x8e6>
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <_strtod_l+0x960>)
 8005dfc:	403b      	ands	r3, r7
 8005dfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e06:	d819      	bhi.n	8005e3c <_strtod_l+0x8ec>
 8005e08:	0d1b      	lsrs	r3, r3, #20
 8005e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d117      	bne.n	8005e46 <_strtod_l+0x8f6>
 8005e16:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <_strtod_l+0x96c>)
 8005e18:	429f      	cmp	r7, r3
 8005e1a:	d102      	bne.n	8005e22 <_strtod_l+0x8d2>
 8005e1c:	3101      	adds	r1, #1
 8005e1e:	f43f addf 	beq.w	80059e0 <_strtod_l+0x490>
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <_strtod_l+0x960>)
 8005e24:	403b      	ands	r3, r7
 8005e26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e2a:	f04f 0a00 	mov.w	sl, #0
 8005e2e:	9b04      	ldr	r3, [sp, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1a4      	bne.n	8005d7e <_strtod_l+0x82e>
 8005e34:	e5de      	b.n	80059f4 <_strtod_l+0x4a4>
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3a:	e7ea      	b.n	8005e12 <_strtod_l+0x8c2>
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	e7e8      	b.n	8005e12 <_strtod_l+0x8c2>
 8005e40:	ea53 030a 	orrs.w	r3, r3, sl
 8005e44:	d08c      	beq.n	8005d60 <_strtod_l+0x810>
 8005e46:	9b08      	ldr	r3, [sp, #32]
 8005e48:	b1db      	cbz	r3, 8005e82 <_strtod_l+0x932>
 8005e4a:	423b      	tst	r3, r7
 8005e4c:	d0ef      	beq.n	8005e2e <_strtod_l+0x8de>
 8005e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	4650      	mov	r0, sl
 8005e54:	4659      	mov	r1, fp
 8005e56:	b1c3      	cbz	r3, 8005e8a <_strtod_l+0x93a>
 8005e58:	f7ff fb5c 	bl	8005514 <sulp>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	ec51 0b18 	vmov	r0, r1, d8
 8005e64:	f7fa fa32 	bl	80002cc <__adddf3>
 8005e68:	4682      	mov	sl, r0
 8005e6a:	468b      	mov	fp, r1
 8005e6c:	e7df      	b.n	8005e2e <_strtod_l+0x8de>
 8005e6e:	4013      	ands	r3, r2
 8005e70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005e78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005e7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005e80:	e7d5      	b.n	8005e2e <_strtod_l+0x8de>
 8005e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e84:	ea13 0f0a 	tst.w	r3, sl
 8005e88:	e7e0      	b.n	8005e4c <_strtod_l+0x8fc>
 8005e8a:	f7ff fb43 	bl	8005514 <sulp>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	ec51 0b18 	vmov	r0, r1, d8
 8005e96:	f7fa fa17 	bl	80002c8 <__aeabi_dsub>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	f7fa fe31 	bl	8000b08 <__aeabi_dcmpeq>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0c1      	beq.n	8005e2e <_strtod_l+0x8de>
 8005eaa:	e611      	b.n	8005ad0 <_strtod_l+0x580>
 8005eac:	fffffc02 	.word	0xfffffc02
 8005eb0:	7ff00000 	.word	0x7ff00000
 8005eb4:	39500000 	.word	0x39500000
 8005eb8:	000fffff 	.word	0x000fffff
 8005ebc:	7fefffff 	.word	0x7fefffff
 8005ec0:	080091a8 	.word	0x080091a8
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f002 fb02 	bl	80084d0 <__ratio>
 8005ecc:	ec59 8b10 	vmov	r8, r9, d0
 8005ed0:	ee10 0a10 	vmov	r0, s0
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fe28 	bl	8000b30 <__aeabi_dcmple>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d07a      	beq.n	8005fda <_strtod_l+0xa8a>
 8005ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d04a      	beq.n	8005f80 <_strtod_l+0xa30>
 8005eea:	4b95      	ldr	r3, [pc, #596]	; (8006140 <_strtod_l+0xbf0>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006140 <_strtod_l+0xbf0>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	4b92      	ldr	r3, [pc, #584]	; (8006144 <_strtod_l+0xbf4>)
 8005efc:	403b      	ands	r3, r7
 8005efe:	930d      	str	r3, [sp, #52]	; 0x34
 8005f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f02:	4b91      	ldr	r3, [pc, #580]	; (8006148 <_strtod_l+0xbf8>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	f040 80b0 	bne.w	800606a <_strtod_l+0xb1a>
 8005f0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f12:	ec4b ab10 	vmov	d0, sl, fp
 8005f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f1a:	f002 fa01 	bl	8008320 <__ulp>
 8005f1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f22:	ec53 2b10 	vmov	r2, r3, d0
 8005f26:	f7fa fb87 	bl	8000638 <__aeabi_dmul>
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	f7fa f9cd 	bl	80002cc <__adddf3>
 8005f32:	460b      	mov	r3, r1
 8005f34:	4983      	ldr	r1, [pc, #524]	; (8006144 <_strtod_l+0xbf4>)
 8005f36:	4a85      	ldr	r2, [pc, #532]	; (800614c <_strtod_l+0xbfc>)
 8005f38:	4019      	ands	r1, r3
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	d960      	bls.n	8006002 <_strtod_l+0xab2>
 8005f40:	ee18 3a90 	vmov	r3, s17
 8005f44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d104      	bne.n	8005f56 <_strtod_l+0xa06>
 8005f4c:	ee18 3a10 	vmov	r3, s16
 8005f50:	3301      	adds	r3, #1
 8005f52:	f43f ad45 	beq.w	80059e0 <_strtod_l+0x490>
 8005f56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006158 <_strtod_l+0xc08>
 8005f5a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f60:	4620      	mov	r0, r4
 8005f62:	f001 feab 	bl	8007cbc <_Bfree>
 8005f66:	9905      	ldr	r1, [sp, #20]
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 fea7 	bl	8007cbc <_Bfree>
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 fea3 	bl	8007cbc <_Bfree>
 8005f76:	4629      	mov	r1, r5
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f001 fe9f 	bl	8007cbc <_Bfree>
 8005f7e:	e61a      	b.n	8005bb6 <_strtod_l+0x666>
 8005f80:	f1ba 0f00 	cmp.w	sl, #0
 8005f84:	d11b      	bne.n	8005fbe <_strtod_l+0xa6e>
 8005f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f8a:	b9f3      	cbnz	r3, 8005fca <_strtod_l+0xa7a>
 8005f8c:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <_strtod_l+0xbf0>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4640      	mov	r0, r8
 8005f92:	4649      	mov	r1, r9
 8005f94:	f7fa fdc2 	bl	8000b1c <__aeabi_dcmplt>
 8005f98:	b9d0      	cbnz	r0, 8005fd0 <_strtod_l+0xa80>
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <_strtod_l+0xc00>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f7fa fb49 	bl	8000638 <__aeabi_dmul>
 8005fa6:	4680      	mov	r8, r0
 8005fa8:	4689      	mov	r9, r1
 8005faa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005fb2:	9315      	str	r3, [sp, #84]	; 0x54
 8005fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005fbc:	e79d      	b.n	8005efa <_strtod_l+0x9aa>
 8005fbe:	f1ba 0f01 	cmp.w	sl, #1
 8005fc2:	d102      	bne.n	8005fca <_strtod_l+0xa7a>
 8005fc4:	2f00      	cmp	r7, #0
 8005fc6:	f43f ad83 	beq.w	8005ad0 <_strtod_l+0x580>
 8005fca:	4b62      	ldr	r3, [pc, #392]	; (8006154 <_strtod_l+0xc04>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	e78e      	b.n	8005eee <_strtod_l+0x99e>
 8005fd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006150 <_strtod_l+0xc00>
 8005fd4:	f04f 0800 	mov.w	r8, #0
 8005fd8:	e7e7      	b.n	8005faa <_strtod_l+0xa5a>
 8005fda:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <_strtod_l+0xc00>)
 8005fdc:	4640      	mov	r0, r8
 8005fde:	4649      	mov	r1, r9
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f7fa fb29 	bl	8000638 <__aeabi_dmul>
 8005fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe8:	4680      	mov	r8, r0
 8005fea:	4689      	mov	r9, r1
 8005fec:	b933      	cbnz	r3, 8005ffc <_strtod_l+0xaac>
 8005fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8005ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005ffa:	e7dd      	b.n	8005fb8 <_strtod_l+0xa68>
 8005ffc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006000:	e7f9      	b.n	8005ff6 <_strtod_l+0xaa6>
 8006002:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1a8      	bne.n	8005f5e <_strtod_l+0xa0e>
 800600c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006012:	0d1b      	lsrs	r3, r3, #20
 8006014:	051b      	lsls	r3, r3, #20
 8006016:	429a      	cmp	r2, r3
 8006018:	d1a1      	bne.n	8005f5e <_strtod_l+0xa0e>
 800601a:	4640      	mov	r0, r8
 800601c:	4649      	mov	r1, r9
 800601e:	f7fa fe6b 	bl	8000cf8 <__aeabi_d2lz>
 8006022:	f7fa fadb 	bl	80005dc <__aeabi_l2d>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa f94b 	bl	80002c8 <__aeabi_dsub>
 8006032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006038:	ea43 030a 	orr.w	r3, r3, sl
 800603c:	4313      	orrs	r3, r2
 800603e:	4680      	mov	r8, r0
 8006040:	4689      	mov	r9, r1
 8006042:	d055      	beq.n	80060f0 <_strtod_l+0xba0>
 8006044:	a336      	add	r3, pc, #216	; (adr r3, 8006120 <_strtod_l+0xbd0>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa fd67 	bl	8000b1c <__aeabi_dcmplt>
 800604e:	2800      	cmp	r0, #0
 8006050:	f47f acd0 	bne.w	80059f4 <_strtod_l+0x4a4>
 8006054:	a334      	add	r3, pc, #208	; (adr r3, 8006128 <_strtod_l+0xbd8>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	f43f af7b 	beq.w	8005f5e <_strtod_l+0xa0e>
 8006068:	e4c4      	b.n	80059f4 <_strtod_l+0x4a4>
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	b333      	cbz	r3, 80060bc <_strtod_l+0xb6c>
 800606e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006070:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006074:	d822      	bhi.n	80060bc <_strtod_l+0xb6c>
 8006076:	a32e      	add	r3, pc, #184	; (adr r3, 8006130 <_strtod_l+0xbe0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	4640      	mov	r0, r8
 800607e:	4649      	mov	r1, r9
 8006080:	f7fa fd56 	bl	8000b30 <__aeabi_dcmple>
 8006084:	b1a0      	cbz	r0, 80060b0 <_strtod_l+0xb60>
 8006086:	4649      	mov	r1, r9
 8006088:	4640      	mov	r0, r8
 800608a:	f7fa fdad 	bl	8000be8 <__aeabi_d2uiz>
 800608e:	2801      	cmp	r0, #1
 8006090:	bf38      	it	cc
 8006092:	2001      	movcc	r0, #1
 8006094:	f7fa fa56 	bl	8000544 <__aeabi_ui2d>
 8006098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609a:	4680      	mov	r8, r0
 800609c:	4689      	mov	r9, r1
 800609e:	bb23      	cbnz	r3, 80060ea <_strtod_l+0xb9a>
 80060a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060a4:	9010      	str	r0, [sp, #64]	; 0x40
 80060a6:	9311      	str	r3, [sp, #68]	; 0x44
 80060a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060c0:	eeb0 0a48 	vmov.f32	s0, s16
 80060c4:	eef0 0a68 	vmov.f32	s1, s17
 80060c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060cc:	f002 f928 	bl	8008320 <__ulp>
 80060d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060d4:	ec53 2b10 	vmov	r2, r3, d0
 80060d8:	f7fa faae 	bl	8000638 <__aeabi_dmul>
 80060dc:	ec53 2b18 	vmov	r2, r3, d8
 80060e0:	f7fa f8f4 	bl	80002cc <__adddf3>
 80060e4:	4682      	mov	sl, r0
 80060e6:	468b      	mov	fp, r1
 80060e8:	e78d      	b.n	8006006 <_strtod_l+0xab6>
 80060ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80060ee:	e7db      	b.n	80060a8 <_strtod_l+0xb58>
 80060f0:	a311      	add	r3, pc, #68	; (adr r3, 8006138 <_strtod_l+0xbe8>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fd11 	bl	8000b1c <__aeabi_dcmplt>
 80060fa:	e7b2      	b.n	8006062 <_strtod_l+0xb12>
 80060fc:	2300      	movs	r3, #0
 80060fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	f7ff ba6b 	b.w	80055e0 <_strtod_l+0x90>
 800610a:	2a65      	cmp	r2, #101	; 0x65
 800610c:	f43f ab5f 	beq.w	80057ce <_strtod_l+0x27e>
 8006110:	2a45      	cmp	r2, #69	; 0x45
 8006112:	f43f ab5c 	beq.w	80057ce <_strtod_l+0x27e>
 8006116:	2301      	movs	r3, #1
 8006118:	f7ff bb94 	b.w	8005844 <_strtod_l+0x2f4>
 800611c:	f3af 8000 	nop.w
 8006120:	94a03595 	.word	0x94a03595
 8006124:	3fdfffff 	.word	0x3fdfffff
 8006128:	35afe535 	.word	0x35afe535
 800612c:	3fe00000 	.word	0x3fe00000
 8006130:	ffc00000 	.word	0xffc00000
 8006134:	41dfffff 	.word	0x41dfffff
 8006138:	94a03595 	.word	0x94a03595
 800613c:	3fcfffff 	.word	0x3fcfffff
 8006140:	3ff00000 	.word	0x3ff00000
 8006144:	7ff00000 	.word	0x7ff00000
 8006148:	7fe00000 	.word	0x7fe00000
 800614c:	7c9fffff 	.word	0x7c9fffff
 8006150:	3fe00000 	.word	0x3fe00000
 8006154:	bff00000 	.word	0xbff00000
 8006158:	7fefffff 	.word	0x7fefffff

0800615c <_strtod_r>:
 800615c:	4b01      	ldr	r3, [pc, #4]	; (8006164 <_strtod_r+0x8>)
 800615e:	f7ff b9f7 	b.w	8005550 <_strtod_l>
 8006162:	bf00      	nop
 8006164:	2000007c 	.word	0x2000007c

08006168 <_strtol_l.constprop.0>:
 8006168:	2b01      	cmp	r3, #1
 800616a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616e:	d001      	beq.n	8006174 <_strtol_l.constprop.0+0xc>
 8006170:	2b24      	cmp	r3, #36	; 0x24
 8006172:	d906      	bls.n	8006182 <_strtol_l.constprop.0+0x1a>
 8006174:	f7fe fa78 	bl	8004668 <__errno>
 8006178:	2316      	movs	r3, #22
 800617a:	6003      	str	r3, [r0, #0]
 800617c:	2000      	movs	r0, #0
 800617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006182:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006268 <_strtol_l.constprop.0+0x100>
 8006186:	460d      	mov	r5, r1
 8006188:	462e      	mov	r6, r5
 800618a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800618e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006192:	f017 0708 	ands.w	r7, r7, #8
 8006196:	d1f7      	bne.n	8006188 <_strtol_l.constprop.0+0x20>
 8006198:	2c2d      	cmp	r4, #45	; 0x2d
 800619a:	d132      	bne.n	8006202 <_strtol_l.constprop.0+0x9a>
 800619c:	782c      	ldrb	r4, [r5, #0]
 800619e:	2701      	movs	r7, #1
 80061a0:	1cb5      	adds	r5, r6, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d05b      	beq.n	800625e <_strtol_l.constprop.0+0xf6>
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d109      	bne.n	80061be <_strtol_l.constprop.0+0x56>
 80061aa:	2c30      	cmp	r4, #48	; 0x30
 80061ac:	d107      	bne.n	80061be <_strtol_l.constprop.0+0x56>
 80061ae:	782c      	ldrb	r4, [r5, #0]
 80061b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061b4:	2c58      	cmp	r4, #88	; 0x58
 80061b6:	d14d      	bne.n	8006254 <_strtol_l.constprop.0+0xec>
 80061b8:	786c      	ldrb	r4, [r5, #1]
 80061ba:	2310      	movs	r3, #16
 80061bc:	3502      	adds	r5, #2
 80061be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80061c6:	f04f 0c00 	mov.w	ip, #0
 80061ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80061ce:	4666      	mov	r6, ip
 80061d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80061d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061d8:	f1be 0f09 	cmp.w	lr, #9
 80061dc:	d816      	bhi.n	800620c <_strtol_l.constprop.0+0xa4>
 80061de:	4674      	mov	r4, lr
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	dd24      	ble.n	800622e <_strtol_l.constprop.0+0xc6>
 80061e4:	f1bc 0f00 	cmp.w	ip, #0
 80061e8:	db1e      	blt.n	8006228 <_strtol_l.constprop.0+0xc0>
 80061ea:	45b1      	cmp	r9, r6
 80061ec:	d31c      	bcc.n	8006228 <_strtol_l.constprop.0+0xc0>
 80061ee:	d101      	bne.n	80061f4 <_strtol_l.constprop.0+0x8c>
 80061f0:	45a2      	cmp	sl, r4
 80061f2:	db19      	blt.n	8006228 <_strtol_l.constprop.0+0xc0>
 80061f4:	fb06 4603 	mla	r6, r6, r3, r4
 80061f8:	f04f 0c01 	mov.w	ip, #1
 80061fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006200:	e7e8      	b.n	80061d4 <_strtol_l.constprop.0+0x6c>
 8006202:	2c2b      	cmp	r4, #43	; 0x2b
 8006204:	bf04      	itt	eq
 8006206:	782c      	ldrbeq	r4, [r5, #0]
 8006208:	1cb5      	addeq	r5, r6, #2
 800620a:	e7ca      	b.n	80061a2 <_strtol_l.constprop.0+0x3a>
 800620c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006210:	f1be 0f19 	cmp.w	lr, #25
 8006214:	d801      	bhi.n	800621a <_strtol_l.constprop.0+0xb2>
 8006216:	3c37      	subs	r4, #55	; 0x37
 8006218:	e7e2      	b.n	80061e0 <_strtol_l.constprop.0+0x78>
 800621a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800621e:	f1be 0f19 	cmp.w	lr, #25
 8006222:	d804      	bhi.n	800622e <_strtol_l.constprop.0+0xc6>
 8006224:	3c57      	subs	r4, #87	; 0x57
 8006226:	e7db      	b.n	80061e0 <_strtol_l.constprop.0+0x78>
 8006228:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800622c:	e7e6      	b.n	80061fc <_strtol_l.constprop.0+0x94>
 800622e:	f1bc 0f00 	cmp.w	ip, #0
 8006232:	da05      	bge.n	8006240 <_strtol_l.constprop.0+0xd8>
 8006234:	2322      	movs	r3, #34	; 0x22
 8006236:	6003      	str	r3, [r0, #0]
 8006238:	4646      	mov	r6, r8
 800623a:	b942      	cbnz	r2, 800624e <_strtol_l.constprop.0+0xe6>
 800623c:	4630      	mov	r0, r6
 800623e:	e79e      	b.n	800617e <_strtol_l.constprop.0+0x16>
 8006240:	b107      	cbz	r7, 8006244 <_strtol_l.constprop.0+0xdc>
 8006242:	4276      	negs	r6, r6
 8006244:	2a00      	cmp	r2, #0
 8006246:	d0f9      	beq.n	800623c <_strtol_l.constprop.0+0xd4>
 8006248:	f1bc 0f00 	cmp.w	ip, #0
 800624c:	d000      	beq.n	8006250 <_strtol_l.constprop.0+0xe8>
 800624e:	1e69      	subs	r1, r5, #1
 8006250:	6011      	str	r1, [r2, #0]
 8006252:	e7f3      	b.n	800623c <_strtol_l.constprop.0+0xd4>
 8006254:	2430      	movs	r4, #48	; 0x30
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1b1      	bne.n	80061be <_strtol_l.constprop.0+0x56>
 800625a:	2308      	movs	r3, #8
 800625c:	e7af      	b.n	80061be <_strtol_l.constprop.0+0x56>
 800625e:	2c30      	cmp	r4, #48	; 0x30
 8006260:	d0a5      	beq.n	80061ae <_strtol_l.constprop.0+0x46>
 8006262:	230a      	movs	r3, #10
 8006264:	e7ab      	b.n	80061be <_strtol_l.constprop.0+0x56>
 8006266:	bf00      	nop
 8006268:	080091d1 	.word	0x080091d1

0800626c <_strtol_r>:
 800626c:	f7ff bf7c 	b.w	8006168 <_strtol_l.constprop.0>

08006270 <__swbuf_r>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	460e      	mov	r6, r1
 8006274:	4614      	mov	r4, r2
 8006276:	4605      	mov	r5, r0
 8006278:	b118      	cbz	r0, 8006282 <__swbuf_r+0x12>
 800627a:	6983      	ldr	r3, [r0, #24]
 800627c:	b90b      	cbnz	r3, 8006282 <__swbuf_r+0x12>
 800627e:	f001 f84b 	bl	8007318 <__sinit>
 8006282:	4b21      	ldr	r3, [pc, #132]	; (8006308 <__swbuf_r+0x98>)
 8006284:	429c      	cmp	r4, r3
 8006286:	d12b      	bne.n	80062e0 <__swbuf_r+0x70>
 8006288:	686c      	ldr	r4, [r5, #4]
 800628a:	69a3      	ldr	r3, [r4, #24]
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	d52f      	bpl.n	80062f4 <__swbuf_r+0x84>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	b36b      	cbz	r3, 80062f4 <__swbuf_r+0x84>
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	1ac0      	subs	r0, r0, r3
 800629e:	6963      	ldr	r3, [r4, #20]
 80062a0:	b2f6      	uxtb	r6, r6
 80062a2:	4283      	cmp	r3, r0
 80062a4:	4637      	mov	r7, r6
 80062a6:	dc04      	bgt.n	80062b2 <__swbuf_r+0x42>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 ffa0 	bl	80071f0 <_fflush_r>
 80062b0:	bb30      	cbnz	r0, 8006300 <__swbuf_r+0x90>
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	60a3      	str	r3, [r4, #8]
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	701e      	strb	r6, [r3, #0]
 80062c0:	6963      	ldr	r3, [r4, #20]
 80062c2:	3001      	adds	r0, #1
 80062c4:	4283      	cmp	r3, r0
 80062c6:	d004      	beq.n	80062d2 <__swbuf_r+0x62>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	07db      	lsls	r3, r3, #31
 80062cc:	d506      	bpl.n	80062dc <__swbuf_r+0x6c>
 80062ce:	2e0a      	cmp	r6, #10
 80062d0:	d104      	bne.n	80062dc <__swbuf_r+0x6c>
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 ff8b 	bl	80071f0 <_fflush_r>
 80062da:	b988      	cbnz	r0, 8006300 <__swbuf_r+0x90>
 80062dc:	4638      	mov	r0, r7
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <__swbuf_r+0x9c>)
 80062e2:	429c      	cmp	r4, r3
 80062e4:	d101      	bne.n	80062ea <__swbuf_r+0x7a>
 80062e6:	68ac      	ldr	r4, [r5, #8]
 80062e8:	e7cf      	b.n	800628a <__swbuf_r+0x1a>
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <__swbuf_r+0xa0>)
 80062ec:	429c      	cmp	r4, r3
 80062ee:	bf08      	it	eq
 80062f0:	68ec      	ldreq	r4, [r5, #12]
 80062f2:	e7ca      	b.n	800628a <__swbuf_r+0x1a>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f80c 	bl	8006314 <__swsetup_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d0cb      	beq.n	8006298 <__swbuf_r+0x28>
 8006300:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006304:	e7ea      	b.n	80062dc <__swbuf_r+0x6c>
 8006306:	bf00      	nop
 8006308:	08009384 	.word	0x08009384
 800630c:	080093a4 	.word	0x080093a4
 8006310:	08009364 	.word	0x08009364

08006314 <__swsetup_r>:
 8006314:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <__swsetup_r+0xcc>)
 8006316:	b570      	push	{r4, r5, r6, lr}
 8006318:	681d      	ldr	r5, [r3, #0]
 800631a:	4606      	mov	r6, r0
 800631c:	460c      	mov	r4, r1
 800631e:	b125      	cbz	r5, 800632a <__swsetup_r+0x16>
 8006320:	69ab      	ldr	r3, [r5, #24]
 8006322:	b913      	cbnz	r3, 800632a <__swsetup_r+0x16>
 8006324:	4628      	mov	r0, r5
 8006326:	f000 fff7 	bl	8007318 <__sinit>
 800632a:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <__swsetup_r+0xd0>)
 800632c:	429c      	cmp	r4, r3
 800632e:	d10f      	bne.n	8006350 <__swsetup_r+0x3c>
 8006330:	686c      	ldr	r4, [r5, #4]
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006338:	0719      	lsls	r1, r3, #28
 800633a:	d42c      	bmi.n	8006396 <__swsetup_r+0x82>
 800633c:	06dd      	lsls	r5, r3, #27
 800633e:	d411      	bmi.n	8006364 <__swsetup_r+0x50>
 8006340:	2309      	movs	r3, #9
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800634e:	e03e      	b.n	80063ce <__swsetup_r+0xba>
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <__swsetup_r+0xd4>)
 8006352:	429c      	cmp	r4, r3
 8006354:	d101      	bne.n	800635a <__swsetup_r+0x46>
 8006356:	68ac      	ldr	r4, [r5, #8]
 8006358:	e7eb      	b.n	8006332 <__swsetup_r+0x1e>
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <__swsetup_r+0xd8>)
 800635c:	429c      	cmp	r4, r3
 800635e:	bf08      	it	eq
 8006360:	68ec      	ldreq	r4, [r5, #12]
 8006362:	e7e6      	b.n	8006332 <__swsetup_r+0x1e>
 8006364:	0758      	lsls	r0, r3, #29
 8006366:	d512      	bpl.n	800638e <__swsetup_r+0x7a>
 8006368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800636a:	b141      	cbz	r1, 800637e <__swsetup_r+0x6a>
 800636c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006370:	4299      	cmp	r1, r3
 8006372:	d002      	beq.n	800637a <__swsetup_r+0x66>
 8006374:	4630      	mov	r0, r6
 8006376:	f002 f939 	bl	80085ec <_free_r>
 800637a:	2300      	movs	r3, #0
 800637c:	6363      	str	r3, [r4, #52]	; 0x34
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	2300      	movs	r3, #0
 8006388:	6063      	str	r3, [r4, #4]
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f043 0308 	orr.w	r3, r3, #8
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	b94b      	cbnz	r3, 80063ae <__swsetup_r+0x9a>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a4:	d003      	beq.n	80063ae <__swsetup_r+0x9a>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4630      	mov	r0, r6
 80063aa:	f001 fbed 	bl	8007b88 <__smakebuf_r>
 80063ae:	89a0      	ldrh	r0, [r4, #12]
 80063b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063b4:	f010 0301 	ands.w	r3, r0, #1
 80063b8:	d00a      	beq.n	80063d0 <__swsetup_r+0xbc>
 80063ba:	2300      	movs	r3, #0
 80063bc:	60a3      	str	r3, [r4, #8]
 80063be:	6963      	ldr	r3, [r4, #20]
 80063c0:	425b      	negs	r3, r3
 80063c2:	61a3      	str	r3, [r4, #24]
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	b943      	cbnz	r3, 80063da <__swsetup_r+0xc6>
 80063c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063cc:	d1ba      	bne.n	8006344 <__swsetup_r+0x30>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	0781      	lsls	r1, r0, #30
 80063d2:	bf58      	it	pl
 80063d4:	6963      	ldrpl	r3, [r4, #20]
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	e7f4      	b.n	80063c4 <__swsetup_r+0xb0>
 80063da:	2000      	movs	r0, #0
 80063dc:	e7f7      	b.n	80063ce <__swsetup_r+0xba>
 80063de:	bf00      	nop
 80063e0:	20000014 	.word	0x20000014
 80063e4:	08009384 	.word	0x08009384
 80063e8:	080093a4 	.word	0x080093a4
 80063ec:	08009364 	.word	0x08009364

080063f0 <quorem>:
 80063f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	6903      	ldr	r3, [r0, #16]
 80063f6:	690c      	ldr	r4, [r1, #16]
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	4607      	mov	r7, r0
 80063fc:	f2c0 8081 	blt.w	8006502 <quorem+0x112>
 8006400:	3c01      	subs	r4, #1
 8006402:	f101 0814 	add.w	r8, r1, #20
 8006406:	f100 0514 	add.w	r5, r0, #20
 800640a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	3301      	adds	r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006424:	fbb2 f6f3 	udiv	r6, r2, r3
 8006428:	d331      	bcc.n	800648e <quorem+0x9e>
 800642a:	f04f 0e00 	mov.w	lr, #0
 800642e:	4640      	mov	r0, r8
 8006430:	46ac      	mov	ip, r5
 8006432:	46f2      	mov	sl, lr
 8006434:	f850 2b04 	ldr.w	r2, [r0], #4
 8006438:	b293      	uxth	r3, r2
 800643a:	fb06 e303 	mla	r3, r6, r3, lr
 800643e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006442:	b29b      	uxth	r3, r3
 8006444:	ebaa 0303 	sub.w	r3, sl, r3
 8006448:	f8dc a000 	ldr.w	sl, [ip]
 800644c:	0c12      	lsrs	r2, r2, #16
 800644e:	fa13 f38a 	uxtah	r3, r3, sl
 8006452:	fb06 e202 	mla	r2, r6, r2, lr
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800645e:	b292      	uxth	r2, r2
 8006460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006468:	f8bd 3000 	ldrh.w	r3, [sp]
 800646c:	4581      	cmp	r9, r0
 800646e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006472:	f84c 3b04 	str.w	r3, [ip], #4
 8006476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800647a:	d2db      	bcs.n	8006434 <quorem+0x44>
 800647c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006480:	b92b      	cbnz	r3, 800648e <quorem+0x9e>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	3b04      	subs	r3, #4
 8006486:	429d      	cmp	r5, r3
 8006488:	461a      	mov	r2, r3
 800648a:	d32e      	bcc.n	80064ea <quorem+0xfa>
 800648c:	613c      	str	r4, [r7, #16]
 800648e:	4638      	mov	r0, r7
 8006490:	f001 fea0 	bl	80081d4 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	db24      	blt.n	80064e2 <quorem+0xf2>
 8006498:	3601      	adds	r6, #1
 800649a:	4628      	mov	r0, r5
 800649c:	f04f 0c00 	mov.w	ip, #0
 80064a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80064a4:	f8d0 e000 	ldr.w	lr, [r0]
 80064a8:	b293      	uxth	r3, r2
 80064aa:	ebac 0303 	sub.w	r3, ip, r3
 80064ae:	0c12      	lsrs	r2, r2, #16
 80064b0:	fa13 f38e 	uxtah	r3, r3, lr
 80064b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064bc:	b29b      	uxth	r3, r3
 80064be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c2:	45c1      	cmp	r9, r8
 80064c4:	f840 3b04 	str.w	r3, [r0], #4
 80064c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064cc:	d2e8      	bcs.n	80064a0 <quorem+0xb0>
 80064ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064d6:	b922      	cbnz	r2, 80064e2 <quorem+0xf2>
 80064d8:	3b04      	subs	r3, #4
 80064da:	429d      	cmp	r5, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	d30a      	bcc.n	80064f6 <quorem+0x106>
 80064e0:	613c      	str	r4, [r7, #16]
 80064e2:	4630      	mov	r0, r6
 80064e4:	b003      	add	sp, #12
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	d1cc      	bne.n	800648c <quorem+0x9c>
 80064f2:	3c01      	subs	r4, #1
 80064f4:	e7c7      	b.n	8006486 <quorem+0x96>
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	3b04      	subs	r3, #4
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	d1f0      	bne.n	80064e0 <quorem+0xf0>
 80064fe:	3c01      	subs	r4, #1
 8006500:	e7eb      	b.n	80064da <quorem+0xea>
 8006502:	2000      	movs	r0, #0
 8006504:	e7ee      	b.n	80064e4 <quorem+0xf4>
	...

08006508 <_dtoa_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b04 	vpush	{d8-d9}
 8006510:	ec57 6b10 	vmov	r6, r7, d0
 8006514:	b093      	sub	sp, #76	; 0x4c
 8006516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800651c:	9106      	str	r1, [sp, #24]
 800651e:	ee10 aa10 	vmov	sl, s0
 8006522:	4604      	mov	r4, r0
 8006524:	9209      	str	r2, [sp, #36]	; 0x24
 8006526:	930c      	str	r3, [sp, #48]	; 0x30
 8006528:	46bb      	mov	fp, r7
 800652a:	b975      	cbnz	r5, 800654a <_dtoa_r+0x42>
 800652c:	2010      	movs	r0, #16
 800652e:	f001 fb6b 	bl	8007c08 <malloc>
 8006532:	4602      	mov	r2, r0
 8006534:	6260      	str	r0, [r4, #36]	; 0x24
 8006536:	b920      	cbnz	r0, 8006542 <_dtoa_r+0x3a>
 8006538:	4ba7      	ldr	r3, [pc, #668]	; (80067d8 <_dtoa_r+0x2d0>)
 800653a:	21ea      	movs	r1, #234	; 0xea
 800653c:	48a7      	ldr	r0, [pc, #668]	; (80067dc <_dtoa_r+0x2d4>)
 800653e:	f002 fb21 	bl	8008b84 <__assert_func>
 8006542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006546:	6005      	str	r5, [r0, #0]
 8006548:	60c5      	str	r5, [r0, #12]
 800654a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	b151      	cbz	r1, 8006566 <_dtoa_r+0x5e>
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	604a      	str	r2, [r1, #4]
 8006554:	2301      	movs	r3, #1
 8006556:	4093      	lsls	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
 800655a:	4620      	mov	r0, r4
 800655c:	f001 fbae 	bl	8007cbc <_Bfree>
 8006560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	1e3b      	subs	r3, r7, #0
 8006568:	bfaa      	itet	ge
 800656a:	2300      	movge	r3, #0
 800656c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006570:	f8c8 3000 	strge.w	r3, [r8]
 8006574:	4b9a      	ldr	r3, [pc, #616]	; (80067e0 <_dtoa_r+0x2d8>)
 8006576:	bfbc      	itt	lt
 8006578:	2201      	movlt	r2, #1
 800657a:	f8c8 2000 	strlt.w	r2, [r8]
 800657e:	ea33 030b 	bics.w	r3, r3, fp
 8006582:	d11b      	bne.n	80065bc <_dtoa_r+0xb4>
 8006584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006586:	f242 730f 	movw	r3, #9999	; 0x270f
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006590:	4333      	orrs	r3, r6
 8006592:	f000 8592 	beq.w	80070ba <_dtoa_r+0xbb2>
 8006596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006598:	b963      	cbnz	r3, 80065b4 <_dtoa_r+0xac>
 800659a:	4b92      	ldr	r3, [pc, #584]	; (80067e4 <_dtoa_r+0x2dc>)
 800659c:	e022      	b.n	80065e4 <_dtoa_r+0xdc>
 800659e:	4b92      	ldr	r3, [pc, #584]	; (80067e8 <_dtoa_r+0x2e0>)
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	3308      	adds	r3, #8
 80065a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	b013      	add	sp, #76	; 0x4c
 80065ac:	ecbd 8b04 	vpop	{d8-d9}
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	4b8b      	ldr	r3, [pc, #556]	; (80067e4 <_dtoa_r+0x2dc>)
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	3303      	adds	r3, #3
 80065ba:	e7f3      	b.n	80065a4 <_dtoa_r+0x9c>
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4650      	mov	r0, sl
 80065c2:	4659      	mov	r1, fp
 80065c4:	f7fa faa0 	bl	8000b08 <__aeabi_dcmpeq>
 80065c8:	ec4b ab19 	vmov	d9, sl, fp
 80065cc:	4680      	mov	r8, r0
 80065ce:	b158      	cbz	r0, 80065e8 <_dtoa_r+0xe0>
 80065d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d2:	2301      	movs	r3, #1
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 856b 	beq.w	80070b4 <_dtoa_r+0xbac>
 80065de:	4883      	ldr	r0, [pc, #524]	; (80067ec <_dtoa_r+0x2e4>)
 80065e0:	6018      	str	r0, [r3, #0]
 80065e2:	1e43      	subs	r3, r0, #1
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	e7df      	b.n	80065a8 <_dtoa_r+0xa0>
 80065e8:	ec4b ab10 	vmov	d0, sl, fp
 80065ec:	aa10      	add	r2, sp, #64	; 0x40
 80065ee:	a911      	add	r1, sp, #68	; 0x44
 80065f0:	4620      	mov	r0, r4
 80065f2:	f001 ff11 	bl	8008418 <__d2b>
 80065f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065fa:	ee08 0a10 	vmov	s16, r0
 80065fe:	2d00      	cmp	r5, #0
 8006600:	f000 8084 	beq.w	800670c <_dtoa_r+0x204>
 8006604:	ee19 3a90 	vmov	r3, s19
 8006608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006610:	4656      	mov	r6, sl
 8006612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800661a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800661e:	4b74      	ldr	r3, [pc, #464]	; (80067f0 <_dtoa_r+0x2e8>)
 8006620:	2200      	movs	r2, #0
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7f9 fe4f 	bl	80002c8 <__aeabi_dsub>
 800662a:	a365      	add	r3, pc, #404	; (adr r3, 80067c0 <_dtoa_r+0x2b8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7fa f802 	bl	8000638 <__aeabi_dmul>
 8006634:	a364      	add	r3, pc, #400	; (adr r3, 80067c8 <_dtoa_r+0x2c0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 fe47 	bl	80002cc <__adddf3>
 800663e:	4606      	mov	r6, r0
 8006640:	4628      	mov	r0, r5
 8006642:	460f      	mov	r7, r1
 8006644:	f7f9 ff8e 	bl	8000564 <__aeabi_i2d>
 8006648:	a361      	add	r3, pc, #388	; (adr r3, 80067d0 <_dtoa_r+0x2c8>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 fff3 	bl	8000638 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7f9 fe37 	bl	80002cc <__adddf3>
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	f7fa fa99 	bl	8000b98 <__aeabi_d2iz>
 8006666:	2200      	movs	r2, #0
 8006668:	9000      	str	r0, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7fa fa54 	bl	8000b1c <__aeabi_dcmplt>
 8006674:	b150      	cbz	r0, 800668c <_dtoa_r+0x184>
 8006676:	9800      	ldr	r0, [sp, #0]
 8006678:	f7f9 ff74 	bl	8000564 <__aeabi_i2d>
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	f7fa fa42 	bl	8000b08 <__aeabi_dcmpeq>
 8006684:	b910      	cbnz	r0, 800668c <_dtoa_r+0x184>
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	2b16      	cmp	r3, #22
 8006690:	d85a      	bhi.n	8006748 <_dtoa_r+0x240>
 8006692:	9a00      	ldr	r2, [sp, #0]
 8006694:	4b57      	ldr	r3, [pc, #348]	; (80067f4 <_dtoa_r+0x2ec>)
 8006696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	ec51 0b19 	vmov	r0, r1, d9
 80066a2:	f7fa fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d050      	beq.n	800674c <_dtoa_r+0x244>
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	2300      	movs	r3, #0
 80066b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066b6:	1b5d      	subs	r5, r3, r5
 80066b8:	1e6b      	subs	r3, r5, #1
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	bf45      	ittet	mi
 80066be:	f1c5 0301 	rsbmi	r3, r5, #1
 80066c2:	9304      	strmi	r3, [sp, #16]
 80066c4:	2300      	movpl	r3, #0
 80066c6:	2300      	movmi	r3, #0
 80066c8:	bf4c      	ite	mi
 80066ca:	9305      	strmi	r3, [sp, #20]
 80066cc:	9304      	strpl	r3, [sp, #16]
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db3d      	blt.n	8006750 <_dtoa_r+0x248>
 80066d4:	9b05      	ldr	r3, [sp, #20]
 80066d6:	9a00      	ldr	r2, [sp, #0]
 80066d8:	920a      	str	r2, [sp, #40]	; 0x28
 80066da:	4413      	add	r3, r2
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	2300      	movs	r3, #0
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	9b06      	ldr	r3, [sp, #24]
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	f200 8089 	bhi.w	80067fc <_dtoa_r+0x2f4>
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	bfc4      	itt	gt
 80066ee:	3b04      	subgt	r3, #4
 80066f0:	9306      	strgt	r3, [sp, #24]
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	f1a3 0302 	sub.w	r3, r3, #2
 80066f8:	bfcc      	ite	gt
 80066fa:	2500      	movgt	r5, #0
 80066fc:	2501      	movle	r5, #1
 80066fe:	2b03      	cmp	r3, #3
 8006700:	f200 8087 	bhi.w	8006812 <_dtoa_r+0x30a>
 8006704:	e8df f003 	tbb	[pc, r3]
 8006708:	59383a2d 	.word	0x59383a2d
 800670c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006710:	441d      	add	r5, r3
 8006712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006716:	2b20      	cmp	r3, #32
 8006718:	bfc1      	itttt	gt
 800671a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800671e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006722:	fa0b f303 	lslgt.w	r3, fp, r3
 8006726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800672a:	bfda      	itte	le
 800672c:	f1c3 0320 	rsble	r3, r3, #32
 8006730:	fa06 f003 	lslle.w	r0, r6, r3
 8006734:	4318      	orrgt	r0, r3
 8006736:	f7f9 ff05 	bl	8000544 <__aeabi_ui2d>
 800673a:	2301      	movs	r3, #1
 800673c:	4606      	mov	r6, r0
 800673e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006742:	3d01      	subs	r5, #1
 8006744:	930e      	str	r3, [sp, #56]	; 0x38
 8006746:	e76a      	b.n	800661e <_dtoa_r+0x116>
 8006748:	2301      	movs	r3, #1
 800674a:	e7b2      	b.n	80066b2 <_dtoa_r+0x1aa>
 800674c:	900b      	str	r0, [sp, #44]	; 0x2c
 800674e:	e7b1      	b.n	80066b4 <_dtoa_r+0x1ac>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	9a00      	ldr	r2, [sp, #0]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	4253      	negs	r3, r2
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	2300      	movs	r3, #0
 800675e:	930a      	str	r3, [sp, #40]	; 0x28
 8006760:	e7bf      	b.n	80066e2 <_dtoa_r+0x1da>
 8006762:	2300      	movs	r3, #0
 8006764:	9308      	str	r3, [sp, #32]
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	dc55      	bgt.n	8006818 <_dtoa_r+0x310>
 800676c:	2301      	movs	r3, #1
 800676e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006772:	461a      	mov	r2, r3
 8006774:	9209      	str	r2, [sp, #36]	; 0x24
 8006776:	e00c      	b.n	8006792 <_dtoa_r+0x28a>
 8006778:	2301      	movs	r3, #1
 800677a:	e7f3      	b.n	8006764 <_dtoa_r+0x25c>
 800677c:	2300      	movs	r3, #0
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	9b00      	ldr	r3, [sp, #0]
 8006784:	4413      	add	r3, r2
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	3301      	adds	r3, #1
 800678a:	2b01      	cmp	r3, #1
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	bfb8      	it	lt
 8006790:	2301      	movlt	r3, #1
 8006792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006794:	2200      	movs	r2, #0
 8006796:	6042      	str	r2, [r0, #4]
 8006798:	2204      	movs	r2, #4
 800679a:	f102 0614 	add.w	r6, r2, #20
 800679e:	429e      	cmp	r6, r3
 80067a0:	6841      	ldr	r1, [r0, #4]
 80067a2:	d93d      	bls.n	8006820 <_dtoa_r+0x318>
 80067a4:	4620      	mov	r0, r4
 80067a6:	f001 fa49 	bl	8007c3c <_Balloc>
 80067aa:	9001      	str	r0, [sp, #4]
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d13b      	bne.n	8006828 <_dtoa_r+0x320>
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <_dtoa_r+0x2f0>)
 80067b2:	4602      	mov	r2, r0
 80067b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067b8:	e6c0      	b.n	800653c <_dtoa_r+0x34>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7df      	b.n	800677e <_dtoa_r+0x276>
 80067be:	bf00      	nop
 80067c0:	636f4361 	.word	0x636f4361
 80067c4:	3fd287a7 	.word	0x3fd287a7
 80067c8:	8b60c8b3 	.word	0x8b60c8b3
 80067cc:	3fc68a28 	.word	0x3fc68a28
 80067d0:	509f79fb 	.word	0x509f79fb
 80067d4:	3fd34413 	.word	0x3fd34413
 80067d8:	080092de 	.word	0x080092de
 80067dc:	080092f5 	.word	0x080092f5
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	080092da 	.word	0x080092da
 80067e8:	080092d1 	.word	0x080092d1
 80067ec:	08009151 	.word	0x08009151
 80067f0:	3ff80000 	.word	0x3ff80000
 80067f4:	080094c8 	.word	0x080094c8
 80067f8:	08009350 	.word	0x08009350
 80067fc:	2501      	movs	r5, #1
 80067fe:	2300      	movs	r3, #0
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	9508      	str	r5, [sp, #32]
 8006804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	2312      	movs	r3, #18
 8006810:	e7b0      	b.n	8006774 <_dtoa_r+0x26c>
 8006812:	2301      	movs	r3, #1
 8006814:	9308      	str	r3, [sp, #32]
 8006816:	e7f5      	b.n	8006804 <_dtoa_r+0x2fc>
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800681e:	e7b8      	b.n	8006792 <_dtoa_r+0x28a>
 8006820:	3101      	adds	r1, #1
 8006822:	6041      	str	r1, [r0, #4]
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	e7b8      	b.n	800679a <_dtoa_r+0x292>
 8006828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682a:	9a01      	ldr	r2, [sp, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	2b0e      	cmp	r3, #14
 8006832:	f200 809d 	bhi.w	8006970 <_dtoa_r+0x468>
 8006836:	2d00      	cmp	r5, #0
 8006838:	f000 809a 	beq.w	8006970 <_dtoa_r+0x468>
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd32      	ble.n	80068a8 <_dtoa_r+0x3a0>
 8006842:	4ab7      	ldr	r2, [pc, #732]	; (8006b20 <_dtoa_r+0x618>)
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800684c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006850:	9b00      	ldr	r3, [sp, #0]
 8006852:	05d8      	lsls	r0, r3, #23
 8006854:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006858:	d516      	bpl.n	8006888 <_dtoa_r+0x380>
 800685a:	4bb2      	ldr	r3, [pc, #712]	; (8006b24 <_dtoa_r+0x61c>)
 800685c:	ec51 0b19 	vmov	r0, r1, d9
 8006860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006864:	f7fa f812 	bl	800088c <__aeabi_ddiv>
 8006868:	f007 070f 	and.w	r7, r7, #15
 800686c:	4682      	mov	sl, r0
 800686e:	468b      	mov	fp, r1
 8006870:	2503      	movs	r5, #3
 8006872:	4eac      	ldr	r6, [pc, #688]	; (8006b24 <_dtoa_r+0x61c>)
 8006874:	b957      	cbnz	r7, 800688c <_dtoa_r+0x384>
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	4650      	mov	r0, sl
 800687c:	4659      	mov	r1, fp
 800687e:	f7fa f805 	bl	800088c <__aeabi_ddiv>
 8006882:	4682      	mov	sl, r0
 8006884:	468b      	mov	fp, r1
 8006886:	e028      	b.n	80068da <_dtoa_r+0x3d2>
 8006888:	2502      	movs	r5, #2
 800688a:	e7f2      	b.n	8006872 <_dtoa_r+0x36a>
 800688c:	07f9      	lsls	r1, r7, #31
 800688e:	d508      	bpl.n	80068a2 <_dtoa_r+0x39a>
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006898:	f7f9 fece 	bl	8000638 <__aeabi_dmul>
 800689c:	3501      	adds	r5, #1
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	107f      	asrs	r7, r7, #1
 80068a4:	3608      	adds	r6, #8
 80068a6:	e7e5      	b.n	8006874 <_dtoa_r+0x36c>
 80068a8:	f000 809b 	beq.w	80069e2 <_dtoa_r+0x4da>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	4f9d      	ldr	r7, [pc, #628]	; (8006b24 <_dtoa_r+0x61c>)
 80068b0:	425e      	negs	r6, r3
 80068b2:	4b9b      	ldr	r3, [pc, #620]	; (8006b20 <_dtoa_r+0x618>)
 80068b4:	f006 020f 	and.w	r2, r6, #15
 80068b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	ec51 0b19 	vmov	r0, r1, d9
 80068c4:	f7f9 feb8 	bl	8000638 <__aeabi_dmul>
 80068c8:	1136      	asrs	r6, r6, #4
 80068ca:	4682      	mov	sl, r0
 80068cc:	468b      	mov	fp, r1
 80068ce:	2300      	movs	r3, #0
 80068d0:	2502      	movs	r5, #2
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d17a      	bne.n	80069cc <_dtoa_r+0x4c4>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d3      	bne.n	8006882 <_dtoa_r+0x37a>
 80068da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8082 	beq.w	80069e6 <_dtoa_r+0x4de>
 80068e2:	4b91      	ldr	r3, [pc, #580]	; (8006b28 <_dtoa_r+0x620>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4650      	mov	r0, sl
 80068e8:	4659      	mov	r1, fp
 80068ea:	f7fa f917 	bl	8000b1c <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d079      	beq.n	80069e6 <_dtoa_r+0x4de>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d076      	beq.n	80069e6 <_dtoa_r+0x4de>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dd36      	ble.n	800696c <_dtoa_r+0x464>
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	1e5f      	subs	r7, r3, #1
 8006906:	2200      	movs	r2, #0
 8006908:	4b88      	ldr	r3, [pc, #544]	; (8006b2c <_dtoa_r+0x624>)
 800690a:	f7f9 fe95 	bl	8000638 <__aeabi_dmul>
 800690e:	9e02      	ldr	r6, [sp, #8]
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	3501      	adds	r5, #1
 8006916:	4628      	mov	r0, r5
 8006918:	f7f9 fe24 	bl	8000564 <__aeabi_i2d>
 800691c:	4652      	mov	r2, sl
 800691e:	465b      	mov	r3, fp
 8006920:	f7f9 fe8a 	bl	8000638 <__aeabi_dmul>
 8006924:	4b82      	ldr	r3, [pc, #520]	; (8006b30 <_dtoa_r+0x628>)
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fcd0 	bl	80002cc <__adddf3>
 800692c:	46d0      	mov	r8, sl
 800692e:	46d9      	mov	r9, fp
 8006930:	4682      	mov	sl, r0
 8006932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006936:	2e00      	cmp	r6, #0
 8006938:	d158      	bne.n	80069ec <_dtoa_r+0x4e4>
 800693a:	4b7e      	ldr	r3, [pc, #504]	; (8006b34 <_dtoa_r+0x62c>)
 800693c:	2200      	movs	r2, #0
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7f9 fcc1 	bl	80002c8 <__aeabi_dsub>
 8006946:	4652      	mov	r2, sl
 8006948:	465b      	mov	r3, fp
 800694a:	4680      	mov	r8, r0
 800694c:	4689      	mov	r9, r1
 800694e:	f7fa f903 	bl	8000b58 <__aeabi_dcmpgt>
 8006952:	2800      	cmp	r0, #0
 8006954:	f040 8295 	bne.w	8006e82 <_dtoa_r+0x97a>
 8006958:	4652      	mov	r2, sl
 800695a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8db 	bl	8000b1c <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8289 	bne.w	8006e7e <_dtoa_r+0x976>
 800696c:	ec5b ab19 	vmov	sl, fp, d9
 8006970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006972:	2b00      	cmp	r3, #0
 8006974:	f2c0 8148 	blt.w	8006c08 <_dtoa_r+0x700>
 8006978:	9a00      	ldr	r2, [sp, #0]
 800697a:	2a0e      	cmp	r2, #14
 800697c:	f300 8144 	bgt.w	8006c08 <_dtoa_r+0x700>
 8006980:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <_dtoa_r+0x618>)
 8006982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	f280 80d5 	bge.w	8006b3c <_dtoa_r+0x634>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f300 80d1 	bgt.w	8006b3c <_dtoa_r+0x634>
 800699a:	f040 826f 	bne.w	8006e7c <_dtoa_r+0x974>
 800699e:	4b65      	ldr	r3, [pc, #404]	; (8006b34 <_dtoa_r+0x62c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	4640      	mov	r0, r8
 80069a4:	4649      	mov	r1, r9
 80069a6:	f7f9 fe47 	bl	8000638 <__aeabi_dmul>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7fa f8c9 	bl	8000b44 <__aeabi_dcmpge>
 80069b2:	9e03      	ldr	r6, [sp, #12]
 80069b4:	4637      	mov	r7, r6
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f040 8245 	bne.w	8006e46 <_dtoa_r+0x93e>
 80069bc:	9d01      	ldr	r5, [sp, #4]
 80069be:	2331      	movs	r3, #49	; 0x31
 80069c0:	f805 3b01 	strb.w	r3, [r5], #1
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	e240      	b.n	8006e4e <_dtoa_r+0x946>
 80069cc:	07f2      	lsls	r2, r6, #31
 80069ce:	d505      	bpl.n	80069dc <_dtoa_r+0x4d4>
 80069d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d4:	f7f9 fe30 	bl	8000638 <__aeabi_dmul>
 80069d8:	3501      	adds	r5, #1
 80069da:	2301      	movs	r3, #1
 80069dc:	1076      	asrs	r6, r6, #1
 80069de:	3708      	adds	r7, #8
 80069e0:	e777      	b.n	80068d2 <_dtoa_r+0x3ca>
 80069e2:	2502      	movs	r5, #2
 80069e4:	e779      	b.n	80068da <_dtoa_r+0x3d2>
 80069e6:	9f00      	ldr	r7, [sp, #0]
 80069e8:	9e03      	ldr	r6, [sp, #12]
 80069ea:	e794      	b.n	8006916 <_dtoa_r+0x40e>
 80069ec:	9901      	ldr	r1, [sp, #4]
 80069ee:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <_dtoa_r+0x618>)
 80069f0:	4431      	add	r1, r6
 80069f2:	910d      	str	r1, [sp, #52]	; 0x34
 80069f4:	9908      	ldr	r1, [sp, #32]
 80069f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d043      	beq.n	8006a8a <_dtoa_r+0x582>
 8006a02:	494d      	ldr	r1, [pc, #308]	; (8006b38 <_dtoa_r+0x630>)
 8006a04:	2000      	movs	r0, #0
 8006a06:	f7f9 ff41 	bl	800088c <__aeabi_ddiv>
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	f7f9 fc5b 	bl	80002c8 <__aeabi_dsub>
 8006a12:	9d01      	ldr	r5, [sp, #4]
 8006a14:	4682      	mov	sl, r0
 8006a16:	468b      	mov	fp, r1
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7fa f8bc 	bl	8000b98 <__aeabi_d2iz>
 8006a20:	4606      	mov	r6, r0
 8006a22:	f7f9 fd9f 	bl	8000564 <__aeabi_i2d>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc4b 	bl	80002c8 <__aeabi_dsub>
 8006a32:	3630      	adds	r6, #48	; 0x30
 8006a34:	f805 6b01 	strb.w	r6, [r5], #1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	465b      	mov	r3, fp
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	f7fa f86c 	bl	8000b1c <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d163      	bne.n	8006b10 <_dtoa_r+0x608>
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	4936      	ldr	r1, [pc, #216]	; (8006b28 <_dtoa_r+0x620>)
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f7f9 fc3a 	bl	80002c8 <__aeabi_dsub>
 8006a54:	4652      	mov	r2, sl
 8006a56:	465b      	mov	r3, fp
 8006a58:	f7fa f860 	bl	8000b1c <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f040 80b5 	bne.w	8006bcc <_dtoa_r+0x6c4>
 8006a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a64:	429d      	cmp	r5, r3
 8006a66:	d081      	beq.n	800696c <_dtoa_r+0x464>
 8006a68:	4b30      	ldr	r3, [pc, #192]	; (8006b2c <_dtoa_r+0x624>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fde2 	bl	8000638 <__aeabi_dmul>
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <_dtoa_r+0x624>)
 8006a76:	4682      	mov	sl, r0
 8006a78:	468b      	mov	fp, r1
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f7f9 fdda 	bl	8000638 <__aeabi_dmul>
 8006a84:	4680      	mov	r8, r0
 8006a86:	4689      	mov	r9, r1
 8006a88:	e7c6      	b.n	8006a18 <_dtoa_r+0x510>
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	f7f9 fdd3 	bl	8000638 <__aeabi_dmul>
 8006a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a94:	9d01      	ldr	r5, [sp, #4]
 8006a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a98:	4682      	mov	sl, r0
 8006a9a:	468b      	mov	fp, r1
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f7fa f87a 	bl	8000b98 <__aeabi_d2iz>
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	f7f9 fd5d 	bl	8000564 <__aeabi_i2d>
 8006aaa:	3630      	adds	r6, #48	; 0x30
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7f9 fc08 	bl	80002c8 <__aeabi_dsub>
 8006ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8006abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	4689      	mov	r9, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	d124      	bne.n	8006b14 <_dtoa_r+0x60c>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <_dtoa_r+0x630>)
 8006acc:	4650      	mov	r0, sl
 8006ace:	4659      	mov	r1, fp
 8006ad0:	f7f9 fbfc 	bl	80002cc <__adddf3>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	f7fa f83c 	bl	8000b58 <__aeabi_dcmpgt>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d173      	bne.n	8006bcc <_dtoa_r+0x6c4>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	4913      	ldr	r1, [pc, #76]	; (8006b38 <_dtoa_r+0x630>)
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7f9 fbec 	bl	80002c8 <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7fa f810 	bl	8000b1c <__aeabi_dcmplt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f43f af35 	beq.w	800696c <_dtoa_r+0x464>
 8006b02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b04:	1e6b      	subs	r3, r5, #1
 8006b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b0c:	2b30      	cmp	r3, #48	; 0x30
 8006b0e:	d0f8      	beq.n	8006b02 <_dtoa_r+0x5fa>
 8006b10:	9700      	str	r7, [sp, #0]
 8006b12:	e049      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <_dtoa_r+0x624>)
 8006b16:	f7f9 fd8f 	bl	8000638 <__aeabi_dmul>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4689      	mov	r9, r1
 8006b1e:	e7bd      	b.n	8006a9c <_dtoa_r+0x594>
 8006b20:	080094c8 	.word	0x080094c8
 8006b24:	080094a0 	.word	0x080094a0
 8006b28:	3ff00000 	.word	0x3ff00000
 8006b2c:	40240000 	.word	0x40240000
 8006b30:	401c0000 	.word	0x401c0000
 8006b34:	40140000 	.word	0x40140000
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	9d01      	ldr	r5, [sp, #4]
 8006b3e:	4656      	mov	r6, sl
 8006b40:	465f      	mov	r7, fp
 8006b42:	4642      	mov	r2, r8
 8006b44:	464b      	mov	r3, r9
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fe9f 	bl	800088c <__aeabi_ddiv>
 8006b4e:	f7fa f823 	bl	8000b98 <__aeabi_d2iz>
 8006b52:	4682      	mov	sl, r0
 8006b54:	f7f9 fd06 	bl	8000564 <__aeabi_i2d>
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	f7f9 fd6c 	bl	8000638 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b6c:	f7f9 fbac 	bl	80002c8 <__aeabi_dsub>
 8006b70:	f805 6b01 	strb.w	r6, [r5], #1
 8006b74:	9e01      	ldr	r6, [sp, #4]
 8006b76:	9f03      	ldr	r7, [sp, #12]
 8006b78:	1bae      	subs	r6, r5, r6
 8006b7a:	42b7      	cmp	r7, r6
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	d135      	bne.n	8006bee <_dtoa_r+0x6e6>
 8006b82:	f7f9 fba3 	bl	80002cc <__adddf3>
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	f7f9 ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8006b92:	b9d0      	cbnz	r0, 8006bca <_dtoa_r+0x6c2>
 8006b94:	4642      	mov	r2, r8
 8006b96:	464b      	mov	r3, r9
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba0:	b110      	cbz	r0, 8006ba8 <_dtoa_r+0x6a0>
 8006ba2:	f01a 0f01 	tst.w	sl, #1
 8006ba6:	d110      	bne.n	8006bca <_dtoa_r+0x6c2>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	ee18 1a10 	vmov	r1, s16
 8006bae:	f001 f885 	bl	8007cbc <_Bfree>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9800      	ldr	r0, [sp, #0]
 8006bb6:	702b      	strb	r3, [r5, #0]
 8006bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bba:	3001      	adds	r0, #1
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f43f acf1 	beq.w	80065a8 <_dtoa_r+0xa0>
 8006bc6:	601d      	str	r5, [r3, #0]
 8006bc8:	e4ee      	b.n	80065a8 <_dtoa_r+0xa0>
 8006bca:	9f00      	ldr	r7, [sp, #0]
 8006bcc:	462b      	mov	r3, r5
 8006bce:	461d      	mov	r5, r3
 8006bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd4:	2a39      	cmp	r2, #57	; 0x39
 8006bd6:	d106      	bne.n	8006be6 <_dtoa_r+0x6de>
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d1f7      	bne.n	8006bce <_dtoa_r+0x6c6>
 8006bde:	9901      	ldr	r1, [sp, #4]
 8006be0:	2230      	movs	r2, #48	; 0x30
 8006be2:	3701      	adds	r7, #1
 8006be4:	700a      	strb	r2, [r1, #0]
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	3201      	adds	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e790      	b.n	8006b10 <_dtoa_r+0x608>
 8006bee:	4ba6      	ldr	r3, [pc, #664]	; (8006e88 <_dtoa_r+0x980>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f7f9 fd21 	bl	8000638 <__aeabi_dmul>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f7f9 ff83 	bl	8000b08 <__aeabi_dcmpeq>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d09d      	beq.n	8006b42 <_dtoa_r+0x63a>
 8006c06:	e7cf      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006c08:	9a08      	ldr	r2, [sp, #32]
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	f000 80d7 	beq.w	8006dbe <_dtoa_r+0x8b6>
 8006c10:	9a06      	ldr	r2, [sp, #24]
 8006c12:	2a01      	cmp	r2, #1
 8006c14:	f300 80ba 	bgt.w	8006d8c <_dtoa_r+0x884>
 8006c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c1a:	2a00      	cmp	r2, #0
 8006c1c:	f000 80b2 	beq.w	8006d84 <_dtoa_r+0x87c>
 8006c20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c24:	9e07      	ldr	r6, [sp, #28]
 8006c26:	9d04      	ldr	r5, [sp, #16]
 8006c28:	9a04      	ldr	r2, [sp, #16]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	9204      	str	r2, [sp, #16]
 8006c2e:	9a05      	ldr	r2, [sp, #20]
 8006c30:	2101      	movs	r1, #1
 8006c32:	441a      	add	r2, r3
 8006c34:	4620      	mov	r0, r4
 8006c36:	9205      	str	r2, [sp, #20]
 8006c38:	f001 f942 	bl	8007ec0 <__i2b>
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	dd0c      	ble.n	8006c5c <_dtoa_r+0x754>
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dd09      	ble.n	8006c5c <_dtoa_r+0x754>
 8006c48:	42ab      	cmp	r3, r5
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	bfa8      	it	ge
 8006c4e:	462b      	movge	r3, r5
 8006c50:	1ad2      	subs	r2, r2, r3
 8006c52:	9204      	str	r2, [sp, #16]
 8006c54:	9a05      	ldr	r2, [sp, #20]
 8006c56:	1aed      	subs	r5, r5, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	b31b      	cbz	r3, 8006ca8 <_dtoa_r+0x7a0>
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80af 	beq.w	8006dc6 <_dtoa_r+0x8be>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	dd13      	ble.n	8006c94 <_dtoa_r+0x78c>
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	4632      	mov	r2, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f9e5 	bl	8008040 <__pow5mult>
 8006c76:	ee18 2a10 	vmov	r2, s16
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f001 f934 	bl	8007eec <__multiply>
 8006c84:	ee18 1a10 	vmov	r1, s16
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f001 f816 	bl	8007cbc <_Bfree>
 8006c90:	ee08 8a10 	vmov	s16, r8
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	1b9a      	subs	r2, r3, r6
 8006c98:	d006      	beq.n	8006ca8 <_dtoa_r+0x7a0>
 8006c9a:	ee18 1a10 	vmov	r1, s16
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f001 f9ce 	bl	8008040 <__pow5mult>
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4620      	mov	r0, r4
 8006cac:	f001 f908 	bl	8007ec0 <__i2b>
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	f340 8088 	ble.w	8006dca <_dtoa_r+0x8c2>
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f001 f9be 	bl	8008040 <__pow5mult>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	4606      	mov	r6, r0
 8006cca:	f340 8081 	ble.w	8006dd0 <_dtoa_r+0x8c8>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	6933      	ldr	r3, [r6, #16]
 8006cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cd8:	6918      	ldr	r0, [r3, #16]
 8006cda:	f001 f8a1 	bl	8007e20 <__hi0bits>
 8006cde:	f1c0 0020 	rsb	r0, r0, #32
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	4418      	add	r0, r3
 8006ce6:	f010 001f 	ands.w	r0, r0, #31
 8006cea:	f000 8092 	beq.w	8006e12 <_dtoa_r+0x90a>
 8006cee:	f1c0 0320 	rsb	r3, r0, #32
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	f340 808a 	ble.w	8006e0c <_dtoa_r+0x904>
 8006cf8:	f1c0 001c 	rsb	r0, r0, #28
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	4403      	add	r3, r0
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	4403      	add	r3, r0
 8006d06:	4405      	add	r5, r0
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dd07      	ble.n	8006d20 <_dtoa_r+0x818>
 8006d10:	ee18 1a10 	vmov	r1, s16
 8006d14:	461a      	mov	r2, r3
 8006d16:	4620      	mov	r0, r4
 8006d18:	f001 f9ec 	bl	80080f4 <__lshift>
 8006d1c:	ee08 0a10 	vmov	s16, r0
 8006d20:	9b05      	ldr	r3, [sp, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dd05      	ble.n	8006d32 <_dtoa_r+0x82a>
 8006d26:	4631      	mov	r1, r6
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f001 f9e2 	bl	80080f4 <__lshift>
 8006d30:	4606      	mov	r6, r0
 8006d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06e      	beq.n	8006e16 <_dtoa_r+0x90e>
 8006d38:	ee18 0a10 	vmov	r0, s16
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	f001 fa49 	bl	80081d4 <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	da67      	bge.n	8006e16 <_dtoa_r+0x90e>
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	ee18 1a10 	vmov	r1, s16
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	220a      	movs	r2, #10
 8006d52:	2300      	movs	r3, #0
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 ffd3 	bl	8007d00 <__multadd>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	ee08 0a10 	vmov	s16, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 81b1 	beq.w	80070c8 <_dtoa_r+0xbc0>
 8006d66:	2300      	movs	r3, #0
 8006d68:	4639      	mov	r1, r7
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 ffc7 	bl	8007d00 <__multadd>
 8006d72:	9b02      	ldr	r3, [sp, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	4607      	mov	r7, r0
 8006d78:	f300 808e 	bgt.w	8006e98 <_dtoa_r+0x990>
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	dc51      	bgt.n	8006e26 <_dtoa_r+0x91e>
 8006d82:	e089      	b.n	8006e98 <_dtoa_r+0x990>
 8006d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d8a:	e74b      	b.n	8006c24 <_dtoa_r+0x71c>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	1e5e      	subs	r6, r3, #1
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	42b3      	cmp	r3, r6
 8006d94:	bfbf      	itttt	lt
 8006d96:	9b07      	ldrlt	r3, [sp, #28]
 8006d98:	9607      	strlt	r6, [sp, #28]
 8006d9a:	1af2      	sublt	r2, r6, r3
 8006d9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d9e:	bfb6      	itet	lt
 8006da0:	189b      	addlt	r3, r3, r2
 8006da2:	1b9e      	subge	r6, r3, r6
 8006da4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	bfb8      	it	lt
 8006daa:	2600      	movlt	r6, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfb7      	itett	lt
 8006db0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006db4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006db8:	1a9d      	sublt	r5, r3, r2
 8006dba:	2300      	movlt	r3, #0
 8006dbc:	e734      	b.n	8006c28 <_dtoa_r+0x720>
 8006dbe:	9e07      	ldr	r6, [sp, #28]
 8006dc0:	9d04      	ldr	r5, [sp, #16]
 8006dc2:	9f08      	ldr	r7, [sp, #32]
 8006dc4:	e73b      	b.n	8006c3e <_dtoa_r+0x736>
 8006dc6:	9a07      	ldr	r2, [sp, #28]
 8006dc8:	e767      	b.n	8006c9a <_dtoa_r+0x792>
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	dc18      	bgt.n	8006e02 <_dtoa_r+0x8fa>
 8006dd0:	f1ba 0f00 	cmp.w	sl, #0
 8006dd4:	d115      	bne.n	8006e02 <_dtoa_r+0x8fa>
 8006dd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dda:	b993      	cbnz	r3, 8006e02 <_dtoa_r+0x8fa>
 8006ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006de0:	0d1b      	lsrs	r3, r3, #20
 8006de2:	051b      	lsls	r3, r3, #20
 8006de4:	b183      	cbz	r3, 8006e08 <_dtoa_r+0x900>
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	9b05      	ldr	r3, [sp, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	f04f 0801 	mov.w	r8, #1
 8006df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f af6a 	bne.w	8006cd2 <_dtoa_r+0x7ca>
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e76f      	b.n	8006ce2 <_dtoa_r+0x7da>
 8006e02:	f04f 0800 	mov.w	r8, #0
 8006e06:	e7f6      	b.n	8006df6 <_dtoa_r+0x8ee>
 8006e08:	4698      	mov	r8, r3
 8006e0a:	e7f4      	b.n	8006df6 <_dtoa_r+0x8ee>
 8006e0c:	f43f af7d 	beq.w	8006d0a <_dtoa_r+0x802>
 8006e10:	4618      	mov	r0, r3
 8006e12:	301c      	adds	r0, #28
 8006e14:	e772      	b.n	8006cfc <_dtoa_r+0x7f4>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dc37      	bgt.n	8006e8c <_dtoa_r+0x984>
 8006e1c:	9b06      	ldr	r3, [sp, #24]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	dd34      	ble.n	8006e8c <_dtoa_r+0x984>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	b96b      	cbnz	r3, 8006e46 <_dtoa_r+0x93e>
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	2205      	movs	r2, #5
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 ff66 	bl	8007d00 <__multadd>
 8006e34:	4601      	mov	r1, r0
 8006e36:	4606      	mov	r6, r0
 8006e38:	ee18 0a10 	vmov	r0, s16
 8006e3c:	f001 f9ca 	bl	80081d4 <__mcmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f73f adbb 	bgt.w	80069bc <_dtoa_r+0x4b4>
 8006e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e48:	9d01      	ldr	r5, [sp, #4]
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	f04f 0800 	mov.w	r8, #0
 8006e52:	4631      	mov	r1, r6
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 ff31 	bl	8007cbc <_Bfree>
 8006e5a:	2f00      	cmp	r7, #0
 8006e5c:	f43f aea4 	beq.w	8006ba8 <_dtoa_r+0x6a0>
 8006e60:	f1b8 0f00 	cmp.w	r8, #0
 8006e64:	d005      	beq.n	8006e72 <_dtoa_r+0x96a>
 8006e66:	45b8      	cmp	r8, r7
 8006e68:	d003      	beq.n	8006e72 <_dtoa_r+0x96a>
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 ff25 	bl	8007cbc <_Bfree>
 8006e72:	4639      	mov	r1, r7
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 ff21 	bl	8007cbc <_Bfree>
 8006e7a:	e695      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	4637      	mov	r7, r6
 8006e80:	e7e1      	b.n	8006e46 <_dtoa_r+0x93e>
 8006e82:	9700      	str	r7, [sp, #0]
 8006e84:	4637      	mov	r7, r6
 8006e86:	e599      	b.n	80069bc <_dtoa_r+0x4b4>
 8006e88:	40240000 	.word	0x40240000
 8006e8c:	9b08      	ldr	r3, [sp, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80ca 	beq.w	8007028 <_dtoa_r+0xb20>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	9302      	str	r3, [sp, #8]
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	dd05      	ble.n	8006ea8 <_dtoa_r+0x9a0>
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 f927 	bl	80080f4 <__lshift>
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d05b      	beq.n	8006f66 <_dtoa_r+0xa5e>
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fec3 	bl	8007c3c <_Balloc>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b928      	cbnz	r0, 8006ec6 <_dtoa_r+0x9be>
 8006eba:	4b87      	ldr	r3, [pc, #540]	; (80070d8 <_dtoa_r+0xbd0>)
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ec2:	f7ff bb3b 	b.w	800653c <_dtoa_r+0x34>
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	3202      	adds	r2, #2
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	f107 010c 	add.w	r1, r7, #12
 8006ed0:	300c      	adds	r0, #12
 8006ed2:	f7fd fbf3 	bl	80046bc <memcpy>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4620      	mov	r0, r4
 8006edc:	f001 f90a 	bl	80080f4 <__lshift>
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	f103 0901 	add.w	r9, r3, #1
 8006ee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	9305      	str	r3, [sp, #20]
 8006eee:	f00a 0301 	and.w	r3, sl, #1
 8006ef2:	46b8      	mov	r8, r7
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	4631      	mov	r1, r6
 8006efa:	ee18 0a10 	vmov	r0, s16
 8006efe:	f7ff fa77 	bl	80063f0 <quorem>
 8006f02:	4641      	mov	r1, r8
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f0a:	ee18 0a10 	vmov	r0, s16
 8006f0e:	f001 f961 	bl	80081d4 <__mcmp>
 8006f12:	463a      	mov	r2, r7
 8006f14:	9003      	str	r0, [sp, #12]
 8006f16:	4631      	mov	r1, r6
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f001 f977 	bl	800820c <__mdiff>
 8006f1e:	68c2      	ldr	r2, [r0, #12]
 8006f20:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006f24:	4605      	mov	r5, r0
 8006f26:	bb02      	cbnz	r2, 8006f6a <_dtoa_r+0xa62>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	ee18 0a10 	vmov	r0, s16
 8006f2e:	f001 f951 	bl	80081d4 <__mcmp>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4629      	mov	r1, r5
 8006f36:	4620      	mov	r0, r4
 8006f38:	9207      	str	r2, [sp, #28]
 8006f3a:	f000 febf 	bl	8007cbc <_Bfree>
 8006f3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f42:	ea43 0102 	orr.w	r1, r3, r2
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	464d      	mov	r5, r9
 8006f4c:	d10f      	bne.n	8006f6e <_dtoa_r+0xa66>
 8006f4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f52:	d02a      	beq.n	8006faa <_dtoa_r+0xaa2>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dd02      	ble.n	8006f60 <_dtoa_r+0xa58>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f60:	f88b a000 	strb.w	sl, [fp]
 8006f64:	e775      	b.n	8006e52 <_dtoa_r+0x94a>
 8006f66:	4638      	mov	r0, r7
 8006f68:	e7ba      	b.n	8006ee0 <_dtoa_r+0x9d8>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	e7e2      	b.n	8006f34 <_dtoa_r+0xa2c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	db04      	blt.n	8006f7e <_dtoa_r+0xa76>
 8006f74:	9906      	ldr	r1, [sp, #24]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	9904      	ldr	r1, [sp, #16]
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	d122      	bne.n	8006fc4 <_dtoa_r+0xabc>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	ddee      	ble.n	8006f60 <_dtoa_r+0xa58>
 8006f82:	ee18 1a10 	vmov	r1, s16
 8006f86:	2201      	movs	r2, #1
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f001 f8b3 	bl	80080f4 <__lshift>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	ee08 0a10 	vmov	s16, r0
 8006f94:	f001 f91e 	bl	80081d4 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	dc03      	bgt.n	8006fa4 <_dtoa_r+0xa9c>
 8006f9c:	d1e0      	bne.n	8006f60 <_dtoa_r+0xa58>
 8006f9e:	f01a 0f01 	tst.w	sl, #1
 8006fa2:	d0dd      	beq.n	8006f60 <_dtoa_r+0xa58>
 8006fa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fa8:	d1d7      	bne.n	8006f5a <_dtoa_r+0xa52>
 8006faa:	2339      	movs	r3, #57	; 0x39
 8006fac:	f88b 3000 	strb.w	r3, [fp]
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fba:	2a39      	cmp	r2, #57	; 0x39
 8006fbc:	d071      	beq.n	80070a2 <_dtoa_r+0xb9a>
 8006fbe:	3201      	adds	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e746      	b.n	8006e52 <_dtoa_r+0x94a>
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	dd07      	ble.n	8006fd8 <_dtoa_r+0xad0>
 8006fc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fcc:	d0ed      	beq.n	8006faa <_dtoa_r+0xaa2>
 8006fce:	f10a 0301 	add.w	r3, sl, #1
 8006fd2:	f88b 3000 	strb.w	r3, [fp]
 8006fd6:	e73c      	b.n	8006e52 <_dtoa_r+0x94a>
 8006fd8:	9b05      	ldr	r3, [sp, #20]
 8006fda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006fde:	4599      	cmp	r9, r3
 8006fe0:	d047      	beq.n	8007072 <_dtoa_r+0xb6a>
 8006fe2:	ee18 1a10 	vmov	r1, s16
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	220a      	movs	r2, #10
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 fe88 	bl	8007d00 <__multadd>
 8006ff0:	45b8      	cmp	r8, r7
 8006ff2:	ee08 0a10 	vmov	s16, r0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f04f 020a 	mov.w	r2, #10
 8006ffe:	4641      	mov	r1, r8
 8007000:	4620      	mov	r0, r4
 8007002:	d106      	bne.n	8007012 <_dtoa_r+0xb0a>
 8007004:	f000 fe7c 	bl	8007d00 <__multadd>
 8007008:	4680      	mov	r8, r0
 800700a:	4607      	mov	r7, r0
 800700c:	f109 0901 	add.w	r9, r9, #1
 8007010:	e772      	b.n	8006ef8 <_dtoa_r+0x9f0>
 8007012:	f000 fe75 	bl	8007d00 <__multadd>
 8007016:	4639      	mov	r1, r7
 8007018:	4680      	mov	r8, r0
 800701a:	2300      	movs	r3, #0
 800701c:	220a      	movs	r2, #10
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fe6e 	bl	8007d00 <__multadd>
 8007024:	4607      	mov	r7, r0
 8007026:	e7f1      	b.n	800700c <_dtoa_r+0xb04>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	9d01      	ldr	r5, [sp, #4]
 800702e:	ee18 0a10 	vmov	r0, s16
 8007032:	4631      	mov	r1, r6
 8007034:	f7ff f9dc 	bl	80063f0 <quorem>
 8007038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	f805 ab01 	strb.w	sl, [r5], #1
 8007042:	1aea      	subs	r2, r5, r3
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	4293      	cmp	r3, r2
 8007048:	dd09      	ble.n	800705e <_dtoa_r+0xb56>
 800704a:	ee18 1a10 	vmov	r1, s16
 800704e:	2300      	movs	r3, #0
 8007050:	220a      	movs	r2, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fe54 	bl	8007d00 <__multadd>
 8007058:	ee08 0a10 	vmov	s16, r0
 800705c:	e7e7      	b.n	800702e <_dtoa_r+0xb26>
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfc8      	it	gt
 8007064:	461d      	movgt	r5, r3
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	bfd8      	it	le
 800706a:	2501      	movle	r5, #1
 800706c:	441d      	add	r5, r3
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	ee18 1a10 	vmov	r1, s16
 8007076:	2201      	movs	r2, #1
 8007078:	4620      	mov	r0, r4
 800707a:	f001 f83b 	bl	80080f4 <__lshift>
 800707e:	4631      	mov	r1, r6
 8007080:	ee08 0a10 	vmov	s16, r0
 8007084:	f001 f8a6 	bl	80081d4 <__mcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	dc91      	bgt.n	8006fb0 <_dtoa_r+0xaa8>
 800708c:	d102      	bne.n	8007094 <_dtoa_r+0xb8c>
 800708e:	f01a 0f01 	tst.w	sl, #1
 8007092:	d18d      	bne.n	8006fb0 <_dtoa_r+0xaa8>
 8007094:	462b      	mov	r3, r5
 8007096:	461d      	mov	r5, r3
 8007098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800709c:	2a30      	cmp	r2, #48	; 0x30
 800709e:	d0fa      	beq.n	8007096 <_dtoa_r+0xb8e>
 80070a0:	e6d7      	b.n	8006e52 <_dtoa_r+0x94a>
 80070a2:	9a01      	ldr	r2, [sp, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d184      	bne.n	8006fb2 <_dtoa_r+0xaaa>
 80070a8:	9b00      	ldr	r3, [sp, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2331      	movs	r3, #49	; 0x31
 80070b0:	7013      	strb	r3, [r2, #0]
 80070b2:	e6ce      	b.n	8006e52 <_dtoa_r+0x94a>
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <_dtoa_r+0xbd4>)
 80070b6:	f7ff ba95 	b.w	80065e4 <_dtoa_r+0xdc>
 80070ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f aa6e 	bne.w	800659e <_dtoa_r+0x96>
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <_dtoa_r+0xbd8>)
 80070c4:	f7ff ba8e 	b.w	80065e4 <_dtoa_r+0xdc>
 80070c8:	9b02      	ldr	r3, [sp, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dcae      	bgt.n	800702c <_dtoa_r+0xb24>
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	f73f aea8 	bgt.w	8006e26 <_dtoa_r+0x91e>
 80070d6:	e7a9      	b.n	800702c <_dtoa_r+0xb24>
 80070d8:	08009350 	.word	0x08009350
 80070dc:	08009150 	.word	0x08009150
 80070e0:	080092d1 	.word	0x080092d1

080070e4 <__sflush_r>:
 80070e4:	898a      	ldrh	r2, [r1, #12]
 80070e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	4605      	mov	r5, r0
 80070ec:	0710      	lsls	r0, r2, #28
 80070ee:	460c      	mov	r4, r1
 80070f0:	d458      	bmi.n	80071a4 <__sflush_r+0xc0>
 80070f2:	684b      	ldr	r3, [r1, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	dc05      	bgt.n	8007104 <__sflush_r+0x20>
 80070f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dc02      	bgt.n	8007104 <__sflush_r+0x20>
 80070fe:	2000      	movs	r0, #0
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007106:	2e00      	cmp	r6, #0
 8007108:	d0f9      	beq.n	80070fe <__sflush_r+0x1a>
 800710a:	2300      	movs	r3, #0
 800710c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007110:	682f      	ldr	r7, [r5, #0]
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	d032      	beq.n	800717c <__sflush_r+0x98>
 8007116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	075a      	lsls	r2, r3, #29
 800711c:	d505      	bpl.n	800712a <__sflush_r+0x46>
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	1ac0      	subs	r0, r0, r3
 8007122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007124:	b10b      	cbz	r3, 800712a <__sflush_r+0x46>
 8007126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007128:	1ac0      	subs	r0, r0, r3
 800712a:	2300      	movs	r3, #0
 800712c:	4602      	mov	r2, r0
 800712e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007130:	6a21      	ldr	r1, [r4, #32]
 8007132:	4628      	mov	r0, r5
 8007134:	47b0      	blx	r6
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	d106      	bne.n	800714a <__sflush_r+0x66>
 800713c:	6829      	ldr	r1, [r5, #0]
 800713e:	291d      	cmp	r1, #29
 8007140:	d82c      	bhi.n	800719c <__sflush_r+0xb8>
 8007142:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <__sflush_r+0x108>)
 8007144:	40ca      	lsrs	r2, r1
 8007146:	07d6      	lsls	r6, r2, #31
 8007148:	d528      	bpl.n	800719c <__sflush_r+0xb8>
 800714a:	2200      	movs	r2, #0
 800714c:	6062      	str	r2, [r4, #4]
 800714e:	04d9      	lsls	r1, r3, #19
 8007150:	6922      	ldr	r2, [r4, #16]
 8007152:	6022      	str	r2, [r4, #0]
 8007154:	d504      	bpl.n	8007160 <__sflush_r+0x7c>
 8007156:	1c42      	adds	r2, r0, #1
 8007158:	d101      	bne.n	800715e <__sflush_r+0x7a>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b903      	cbnz	r3, 8007160 <__sflush_r+0x7c>
 800715e:	6560      	str	r0, [r4, #84]	; 0x54
 8007160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007162:	602f      	str	r7, [r5, #0]
 8007164:	2900      	cmp	r1, #0
 8007166:	d0ca      	beq.n	80070fe <__sflush_r+0x1a>
 8007168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800716c:	4299      	cmp	r1, r3
 800716e:	d002      	beq.n	8007176 <__sflush_r+0x92>
 8007170:	4628      	mov	r0, r5
 8007172:	f001 fa3b 	bl	80085ec <_free_r>
 8007176:	2000      	movs	r0, #0
 8007178:	6360      	str	r0, [r4, #52]	; 0x34
 800717a:	e7c1      	b.n	8007100 <__sflush_r+0x1c>
 800717c:	6a21      	ldr	r1, [r4, #32]
 800717e:	2301      	movs	r3, #1
 8007180:	4628      	mov	r0, r5
 8007182:	47b0      	blx	r6
 8007184:	1c41      	adds	r1, r0, #1
 8007186:	d1c7      	bne.n	8007118 <__sflush_r+0x34>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c4      	beq.n	8007118 <__sflush_r+0x34>
 800718e:	2b1d      	cmp	r3, #29
 8007190:	d001      	beq.n	8007196 <__sflush_r+0xb2>
 8007192:	2b16      	cmp	r3, #22
 8007194:	d101      	bne.n	800719a <__sflush_r+0xb6>
 8007196:	602f      	str	r7, [r5, #0]
 8007198:	e7b1      	b.n	80070fe <__sflush_r+0x1a>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	e7ad      	b.n	8007100 <__sflush_r+0x1c>
 80071a4:	690f      	ldr	r7, [r1, #16]
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	d0a9      	beq.n	80070fe <__sflush_r+0x1a>
 80071aa:	0793      	lsls	r3, r2, #30
 80071ac:	680e      	ldr	r6, [r1, #0]
 80071ae:	bf08      	it	eq
 80071b0:	694b      	ldreq	r3, [r1, #20]
 80071b2:	600f      	str	r7, [r1, #0]
 80071b4:	bf18      	it	ne
 80071b6:	2300      	movne	r3, #0
 80071b8:	eba6 0807 	sub.w	r8, r6, r7
 80071bc:	608b      	str	r3, [r1, #8]
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	dd9c      	ble.n	80070fe <__sflush_r+0x1a>
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071c8:	4643      	mov	r3, r8
 80071ca:	463a      	mov	r2, r7
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b0      	blx	r6
 80071d0:	2800      	cmp	r0, #0
 80071d2:	dc06      	bgt.n	80071e2 <__sflush_r+0xfe>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e0:	e78e      	b.n	8007100 <__sflush_r+0x1c>
 80071e2:	4407      	add	r7, r0
 80071e4:	eba8 0800 	sub.w	r8, r8, r0
 80071e8:	e7e9      	b.n	80071be <__sflush_r+0xda>
 80071ea:	bf00      	nop
 80071ec:	20400001 	.word	0x20400001

080071f0 <_fflush_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	b913      	cbnz	r3, 8007200 <_fflush_r+0x10>
 80071fa:	2500      	movs	r5, #0
 80071fc:	4628      	mov	r0, r5
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	b118      	cbz	r0, 800720a <_fflush_r+0x1a>
 8007202:	6983      	ldr	r3, [r0, #24]
 8007204:	b90b      	cbnz	r3, 800720a <_fflush_r+0x1a>
 8007206:	f000 f887 	bl	8007318 <__sinit>
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <_fflush_r+0x6c>)
 800720c:	429c      	cmp	r4, r3
 800720e:	d11b      	bne.n	8007248 <_fflush_r+0x58>
 8007210:	686c      	ldr	r4, [r5, #4]
 8007212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ef      	beq.n	80071fa <_fflush_r+0xa>
 800721a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800721c:	07d0      	lsls	r0, r2, #31
 800721e:	d404      	bmi.n	800722a <_fflush_r+0x3a>
 8007220:	0599      	lsls	r1, r3, #22
 8007222:	d402      	bmi.n	800722a <_fflush_r+0x3a>
 8007224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007226:	f000 fc88 	bl	8007b3a <__retarget_lock_acquire_recursive>
 800722a:	4628      	mov	r0, r5
 800722c:	4621      	mov	r1, r4
 800722e:	f7ff ff59 	bl	80070e4 <__sflush_r>
 8007232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007234:	07da      	lsls	r2, r3, #31
 8007236:	4605      	mov	r5, r0
 8007238:	d4e0      	bmi.n	80071fc <_fflush_r+0xc>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	059b      	lsls	r3, r3, #22
 800723e:	d4dd      	bmi.n	80071fc <_fflush_r+0xc>
 8007240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007242:	f000 fc7b 	bl	8007b3c <__retarget_lock_release_recursive>
 8007246:	e7d9      	b.n	80071fc <_fflush_r+0xc>
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <_fflush_r+0x70>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d101      	bne.n	8007252 <_fflush_r+0x62>
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	e7df      	b.n	8007212 <_fflush_r+0x22>
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <_fflush_r+0x74>)
 8007254:	429c      	cmp	r4, r3
 8007256:	bf08      	it	eq
 8007258:	68ec      	ldreq	r4, [r5, #12]
 800725a:	e7da      	b.n	8007212 <_fflush_r+0x22>
 800725c:	08009384 	.word	0x08009384
 8007260:	080093a4 	.word	0x080093a4
 8007264:	08009364 	.word	0x08009364

08007268 <std>:
 8007268:	2300      	movs	r3, #0
 800726a:	b510      	push	{r4, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	e9c0 3300 	strd	r3, r3, [r0]
 8007272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007276:	6083      	str	r3, [r0, #8]
 8007278:	8181      	strh	r1, [r0, #12]
 800727a:	6643      	str	r3, [r0, #100]	; 0x64
 800727c:	81c2      	strh	r2, [r0, #14]
 800727e:	6183      	str	r3, [r0, #24]
 8007280:	4619      	mov	r1, r3
 8007282:	2208      	movs	r2, #8
 8007284:	305c      	adds	r0, #92	; 0x5c
 8007286:	f7fd fa27 	bl	80046d8 <memset>
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <std+0x38>)
 800728c:	6263      	str	r3, [r4, #36]	; 0x24
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std+0x3c>)
 8007290:	62a3      	str	r3, [r4, #40]	; 0x28
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x40>)
 8007294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x44>)
 8007298:	6224      	str	r4, [r4, #32]
 800729a:	6323      	str	r3, [r4, #48]	; 0x30
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	08008a99 	.word	0x08008a99
 80072a4:	08008abb 	.word	0x08008abb
 80072a8:	08008af3 	.word	0x08008af3
 80072ac:	08008b17 	.word	0x08008b17

080072b0 <_cleanup_r>:
 80072b0:	4901      	ldr	r1, [pc, #4]	; (80072b8 <_cleanup_r+0x8>)
 80072b2:	f000 b8af 	b.w	8007414 <_fwalk_reent>
 80072b6:	bf00      	nop
 80072b8:	080071f1 	.word	0x080071f1

080072bc <__sfmoreglue>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	2268      	movs	r2, #104	; 0x68
 80072c0:	1e4d      	subs	r5, r1, #1
 80072c2:	4355      	muls	r5, r2
 80072c4:	460e      	mov	r6, r1
 80072c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ca:	f001 f9fb 	bl	80086c4 <_malloc_r>
 80072ce:	4604      	mov	r4, r0
 80072d0:	b140      	cbz	r0, 80072e4 <__sfmoreglue+0x28>
 80072d2:	2100      	movs	r1, #0
 80072d4:	e9c0 1600 	strd	r1, r6, [r0]
 80072d8:	300c      	adds	r0, #12
 80072da:	60a0      	str	r0, [r4, #8]
 80072dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072e0:	f7fd f9fa 	bl	80046d8 <memset>
 80072e4:	4620      	mov	r0, r4
 80072e6:	bd70      	pop	{r4, r5, r6, pc}

080072e8 <__sfp_lock_acquire>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__sfp_lock_acquire+0x8>)
 80072ea:	f000 bc26 	b.w	8007b3a <__retarget_lock_acquire_recursive>
 80072ee:	bf00      	nop
 80072f0:	20012fd5 	.word	0x20012fd5

080072f4 <__sfp_lock_release>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sfp_lock_release+0x8>)
 80072f6:	f000 bc21 	b.w	8007b3c <__retarget_lock_release_recursive>
 80072fa:	bf00      	nop
 80072fc:	20012fd5 	.word	0x20012fd5

08007300 <__sinit_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sinit_lock_acquire+0x8>)
 8007302:	f000 bc1a 	b.w	8007b3a <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20012fd6 	.word	0x20012fd6

0800730c <__sinit_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sinit_lock_release+0x8>)
 800730e:	f000 bc15 	b.w	8007b3c <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20012fd6 	.word	0x20012fd6

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sinit_lock_acquire>
 8007320:	69a3      	ldr	r3, [r4, #24]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sinit_lock_release>
 800732c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007330:	6523      	str	r3, [r4, #80]	; 0x50
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <__sinit+0x68>)
 8007334:	4a13      	ldr	r2, [pc, #76]	; (8007384 <__sinit+0x6c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	62a2      	str	r2, [r4, #40]	; 0x28
 800733a:	42a3      	cmp	r3, r4
 800733c:	bf04      	itt	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	61a3      	streq	r3, [r4, #24]
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f820 	bl	8007388 <__sfp>
 8007348:	6060      	str	r0, [r4, #4]
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f81c 	bl	8007388 <__sfp>
 8007350:	60a0      	str	r0, [r4, #8]
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f818 	bl	8007388 <__sfp>
 8007358:	2200      	movs	r2, #0
 800735a:	60e0      	str	r0, [r4, #12]
 800735c:	2104      	movs	r1, #4
 800735e:	6860      	ldr	r0, [r4, #4]
 8007360:	f7ff ff82 	bl	8007268 <std>
 8007364:	68a0      	ldr	r0, [r4, #8]
 8007366:	2201      	movs	r2, #1
 8007368:	2109      	movs	r1, #9
 800736a:	f7ff ff7d 	bl	8007268 <std>
 800736e:	68e0      	ldr	r0, [r4, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	2112      	movs	r1, #18
 8007374:	f7ff ff78 	bl	8007268 <std>
 8007378:	2301      	movs	r3, #1
 800737a:	61a3      	str	r3, [r4, #24]
 800737c:	e7d2      	b.n	8007324 <__sinit+0xc>
 800737e:	bf00      	nop
 8007380:	0800913c 	.word	0x0800913c
 8007384:	080072b1 	.word	0x080072b1

08007388 <__sfp>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	4607      	mov	r7, r0
 800738c:	f7ff ffac 	bl	80072e8 <__sfp_lock_acquire>
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <__sfp+0x84>)
 8007392:	681e      	ldr	r6, [r3, #0]
 8007394:	69b3      	ldr	r3, [r6, #24]
 8007396:	b913      	cbnz	r3, 800739e <__sfp+0x16>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ffbd 	bl	8007318 <__sinit>
 800739e:	3648      	adds	r6, #72	; 0x48
 80073a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	d503      	bpl.n	80073b0 <__sfp+0x28>
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	b30b      	cbz	r3, 80073f0 <__sfp+0x68>
 80073ac:	6836      	ldr	r6, [r6, #0]
 80073ae:	e7f7      	b.n	80073a0 <__sfp+0x18>
 80073b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073b4:	b9d5      	cbnz	r5, 80073ec <__sfp+0x64>
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <__sfp+0x88>)
 80073b8:	60e3      	str	r3, [r4, #12]
 80073ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073be:	6665      	str	r5, [r4, #100]	; 0x64
 80073c0:	f000 fbba 	bl	8007b38 <__retarget_lock_init_recursive>
 80073c4:	f7ff ff96 	bl	80072f4 <__sfp_lock_release>
 80073c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073d0:	6025      	str	r5, [r4, #0]
 80073d2:	61a5      	str	r5, [r4, #24]
 80073d4:	2208      	movs	r2, #8
 80073d6:	4629      	mov	r1, r5
 80073d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073dc:	f7fd f97c 	bl	80046d8 <memset>
 80073e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073e8:	4620      	mov	r0, r4
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ec:	3468      	adds	r4, #104	; 0x68
 80073ee:	e7d9      	b.n	80073a4 <__sfp+0x1c>
 80073f0:	2104      	movs	r1, #4
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff ff62 	bl	80072bc <__sfmoreglue>
 80073f8:	4604      	mov	r4, r0
 80073fa:	6030      	str	r0, [r6, #0]
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1d5      	bne.n	80073ac <__sfp+0x24>
 8007400:	f7ff ff78 	bl	80072f4 <__sfp_lock_release>
 8007404:	230c      	movs	r3, #12
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	e7ee      	b.n	80073e8 <__sfp+0x60>
 800740a:	bf00      	nop
 800740c:	0800913c 	.word	0x0800913c
 8007410:	ffff0001 	.word	0xffff0001

08007414 <_fwalk_reent>:
 8007414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007418:	4606      	mov	r6, r0
 800741a:	4688      	mov	r8, r1
 800741c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007420:	2700      	movs	r7, #0
 8007422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007426:	f1b9 0901 	subs.w	r9, r9, #1
 800742a:	d505      	bpl.n	8007438 <_fwalk_reent+0x24>
 800742c:	6824      	ldr	r4, [r4, #0]
 800742e:	2c00      	cmp	r4, #0
 8007430:	d1f7      	bne.n	8007422 <_fwalk_reent+0xe>
 8007432:	4638      	mov	r0, r7
 8007434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007438:	89ab      	ldrh	r3, [r5, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d907      	bls.n	800744e <_fwalk_reent+0x3a>
 800743e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007442:	3301      	adds	r3, #1
 8007444:	d003      	beq.n	800744e <_fwalk_reent+0x3a>
 8007446:	4629      	mov	r1, r5
 8007448:	4630      	mov	r0, r6
 800744a:	47c0      	blx	r8
 800744c:	4307      	orrs	r7, r0
 800744e:	3568      	adds	r5, #104	; 0x68
 8007450:	e7e9      	b.n	8007426 <_fwalk_reent+0x12>

08007452 <rshift>:
 8007452:	6903      	ldr	r3, [r0, #16]
 8007454:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800745c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007460:	f100 0414 	add.w	r4, r0, #20
 8007464:	dd45      	ble.n	80074f2 <rshift+0xa0>
 8007466:	f011 011f 	ands.w	r1, r1, #31
 800746a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800746e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007472:	d10c      	bne.n	800748e <rshift+0x3c>
 8007474:	f100 0710 	add.w	r7, r0, #16
 8007478:	4629      	mov	r1, r5
 800747a:	42b1      	cmp	r1, r6
 800747c:	d334      	bcc.n	80074e8 <rshift+0x96>
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	1eea      	subs	r2, r5, #3
 8007484:	4296      	cmp	r6, r2
 8007486:	bf38      	it	cc
 8007488:	2300      	movcc	r3, #0
 800748a:	4423      	add	r3, r4
 800748c:	e015      	b.n	80074ba <rshift+0x68>
 800748e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007492:	f1c1 0820 	rsb	r8, r1, #32
 8007496:	40cf      	lsrs	r7, r1
 8007498:	f105 0e04 	add.w	lr, r5, #4
 800749c:	46a1      	mov	r9, r4
 800749e:	4576      	cmp	r6, lr
 80074a0:	46f4      	mov	ip, lr
 80074a2:	d815      	bhi.n	80074d0 <rshift+0x7e>
 80074a4:	1a9a      	subs	r2, r3, r2
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	3a04      	subs	r2, #4
 80074aa:	3501      	adds	r5, #1
 80074ac:	42ae      	cmp	r6, r5
 80074ae:	bf38      	it	cc
 80074b0:	2200      	movcc	r2, #0
 80074b2:	18a3      	adds	r3, r4, r2
 80074b4:	50a7      	str	r7, [r4, r2]
 80074b6:	b107      	cbz	r7, 80074ba <rshift+0x68>
 80074b8:	3304      	adds	r3, #4
 80074ba:	1b1a      	subs	r2, r3, r4
 80074bc:	42a3      	cmp	r3, r4
 80074be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074c2:	bf08      	it	eq
 80074c4:	2300      	moveq	r3, #0
 80074c6:	6102      	str	r2, [r0, #16]
 80074c8:	bf08      	it	eq
 80074ca:	6143      	streq	r3, [r0, #20]
 80074cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d0:	f8dc c000 	ldr.w	ip, [ip]
 80074d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80074d8:	ea4c 0707 	orr.w	r7, ip, r7
 80074dc:	f849 7b04 	str.w	r7, [r9], #4
 80074e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074e4:	40cf      	lsrs	r7, r1
 80074e6:	e7da      	b.n	800749e <rshift+0x4c>
 80074e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80074ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80074f0:	e7c3      	b.n	800747a <rshift+0x28>
 80074f2:	4623      	mov	r3, r4
 80074f4:	e7e1      	b.n	80074ba <rshift+0x68>

080074f6 <__hexdig_fun>:
 80074f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d802      	bhi.n	8007504 <__hexdig_fun+0xe>
 80074fe:	3820      	subs	r0, #32
 8007500:	b2c0      	uxtb	r0, r0
 8007502:	4770      	bx	lr
 8007504:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007508:	2b05      	cmp	r3, #5
 800750a:	d801      	bhi.n	8007510 <__hexdig_fun+0x1a>
 800750c:	3847      	subs	r0, #71	; 0x47
 800750e:	e7f7      	b.n	8007500 <__hexdig_fun+0xa>
 8007510:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007514:	2b05      	cmp	r3, #5
 8007516:	d801      	bhi.n	800751c <__hexdig_fun+0x26>
 8007518:	3827      	subs	r0, #39	; 0x27
 800751a:	e7f1      	b.n	8007500 <__hexdig_fun+0xa>
 800751c:	2000      	movs	r0, #0
 800751e:	4770      	bx	lr

08007520 <__gethex>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	ed2d 8b02 	vpush	{d8}
 8007528:	b089      	sub	sp, #36	; 0x24
 800752a:	ee08 0a10 	vmov	s16, r0
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	4bb4      	ldr	r3, [pc, #720]	; (8007804 <__gethex+0x2e4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	468b      	mov	fp, r1
 800753a:	4690      	mov	r8, r2
 800753c:	f7f8 fe68 	bl	8000210 <strlen>
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	f8db 2000 	ldr.w	r2, [fp]
 8007546:	4403      	add	r3, r0
 8007548:	4682      	mov	sl, r0
 800754a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	1c93      	adds	r3, r2, #2
 8007552:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007556:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800755a:	32fe      	adds	r2, #254	; 0xfe
 800755c:	18d1      	adds	r1, r2, r3
 800755e:	461f      	mov	r7, r3
 8007560:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007564:	9100      	str	r1, [sp, #0]
 8007566:	2830      	cmp	r0, #48	; 0x30
 8007568:	d0f8      	beq.n	800755c <__gethex+0x3c>
 800756a:	f7ff ffc4 	bl	80074f6 <__hexdig_fun>
 800756e:	4604      	mov	r4, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	d13a      	bne.n	80075ea <__gethex+0xca>
 8007574:	9901      	ldr	r1, [sp, #4]
 8007576:	4652      	mov	r2, sl
 8007578:	4638      	mov	r0, r7
 800757a:	f001 fad0 	bl	8008b1e <strncmp>
 800757e:	4605      	mov	r5, r0
 8007580:	2800      	cmp	r0, #0
 8007582:	d168      	bne.n	8007656 <__gethex+0x136>
 8007584:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007588:	eb07 060a 	add.w	r6, r7, sl
 800758c:	f7ff ffb3 	bl	80074f6 <__hexdig_fun>
 8007590:	2800      	cmp	r0, #0
 8007592:	d062      	beq.n	800765a <__gethex+0x13a>
 8007594:	4633      	mov	r3, r6
 8007596:	7818      	ldrb	r0, [r3, #0]
 8007598:	2830      	cmp	r0, #48	; 0x30
 800759a:	461f      	mov	r7, r3
 800759c:	f103 0301 	add.w	r3, r3, #1
 80075a0:	d0f9      	beq.n	8007596 <__gethex+0x76>
 80075a2:	f7ff ffa8 	bl	80074f6 <__hexdig_fun>
 80075a6:	2301      	movs	r3, #1
 80075a8:	fab0 f480 	clz	r4, r0
 80075ac:	0964      	lsrs	r4, r4, #5
 80075ae:	4635      	mov	r5, r6
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	463a      	mov	r2, r7
 80075b4:	4616      	mov	r6, r2
 80075b6:	3201      	adds	r2, #1
 80075b8:	7830      	ldrb	r0, [r6, #0]
 80075ba:	f7ff ff9c 	bl	80074f6 <__hexdig_fun>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d1f8      	bne.n	80075b4 <__gethex+0x94>
 80075c2:	9901      	ldr	r1, [sp, #4]
 80075c4:	4652      	mov	r2, sl
 80075c6:	4630      	mov	r0, r6
 80075c8:	f001 faa9 	bl	8008b1e <strncmp>
 80075cc:	b980      	cbnz	r0, 80075f0 <__gethex+0xd0>
 80075ce:	b94d      	cbnz	r5, 80075e4 <__gethex+0xc4>
 80075d0:	eb06 050a 	add.w	r5, r6, sl
 80075d4:	462a      	mov	r2, r5
 80075d6:	4616      	mov	r6, r2
 80075d8:	3201      	adds	r2, #1
 80075da:	7830      	ldrb	r0, [r6, #0]
 80075dc:	f7ff ff8b 	bl	80074f6 <__hexdig_fun>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d1f8      	bne.n	80075d6 <__gethex+0xb6>
 80075e4:	1bad      	subs	r5, r5, r6
 80075e6:	00ad      	lsls	r5, r5, #2
 80075e8:	e004      	b.n	80075f4 <__gethex+0xd4>
 80075ea:	2400      	movs	r4, #0
 80075ec:	4625      	mov	r5, r4
 80075ee:	e7e0      	b.n	80075b2 <__gethex+0x92>
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	d1f7      	bne.n	80075e4 <__gethex+0xc4>
 80075f4:	7833      	ldrb	r3, [r6, #0]
 80075f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075fa:	2b50      	cmp	r3, #80	; 0x50
 80075fc:	d13b      	bne.n	8007676 <__gethex+0x156>
 80075fe:	7873      	ldrb	r3, [r6, #1]
 8007600:	2b2b      	cmp	r3, #43	; 0x2b
 8007602:	d02c      	beq.n	800765e <__gethex+0x13e>
 8007604:	2b2d      	cmp	r3, #45	; 0x2d
 8007606:	d02e      	beq.n	8007666 <__gethex+0x146>
 8007608:	1c71      	adds	r1, r6, #1
 800760a:	f04f 0900 	mov.w	r9, #0
 800760e:	7808      	ldrb	r0, [r1, #0]
 8007610:	f7ff ff71 	bl	80074f6 <__hexdig_fun>
 8007614:	1e43      	subs	r3, r0, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b18      	cmp	r3, #24
 800761a:	d82c      	bhi.n	8007676 <__gethex+0x156>
 800761c:	f1a0 0210 	sub.w	r2, r0, #16
 8007620:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007624:	f7ff ff67 	bl	80074f6 <__hexdig_fun>
 8007628:	1e43      	subs	r3, r0, #1
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b18      	cmp	r3, #24
 800762e:	d91d      	bls.n	800766c <__gethex+0x14c>
 8007630:	f1b9 0f00 	cmp.w	r9, #0
 8007634:	d000      	beq.n	8007638 <__gethex+0x118>
 8007636:	4252      	negs	r2, r2
 8007638:	4415      	add	r5, r2
 800763a:	f8cb 1000 	str.w	r1, [fp]
 800763e:	b1e4      	cbz	r4, 800767a <__gethex+0x15a>
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2700      	movne	r7, #0
 8007648:	2706      	moveq	r7, #6
 800764a:	4638      	mov	r0, r7
 800764c:	b009      	add	sp, #36	; 0x24
 800764e:	ecbd 8b02 	vpop	{d8}
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	463e      	mov	r6, r7
 8007658:	4625      	mov	r5, r4
 800765a:	2401      	movs	r4, #1
 800765c:	e7ca      	b.n	80075f4 <__gethex+0xd4>
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	1cb1      	adds	r1, r6, #2
 8007664:	e7d3      	b.n	800760e <__gethex+0xee>
 8007666:	f04f 0901 	mov.w	r9, #1
 800766a:	e7fa      	b.n	8007662 <__gethex+0x142>
 800766c:	230a      	movs	r3, #10
 800766e:	fb03 0202 	mla	r2, r3, r2, r0
 8007672:	3a10      	subs	r2, #16
 8007674:	e7d4      	b.n	8007620 <__gethex+0x100>
 8007676:	4631      	mov	r1, r6
 8007678:	e7df      	b.n	800763a <__gethex+0x11a>
 800767a:	1bf3      	subs	r3, r6, r7
 800767c:	3b01      	subs	r3, #1
 800767e:	4621      	mov	r1, r4
 8007680:	2b07      	cmp	r3, #7
 8007682:	dc0b      	bgt.n	800769c <__gethex+0x17c>
 8007684:	ee18 0a10 	vmov	r0, s16
 8007688:	f000 fad8 	bl	8007c3c <_Balloc>
 800768c:	4604      	mov	r4, r0
 800768e:	b940      	cbnz	r0, 80076a2 <__gethex+0x182>
 8007690:	4b5d      	ldr	r3, [pc, #372]	; (8007808 <__gethex+0x2e8>)
 8007692:	4602      	mov	r2, r0
 8007694:	21de      	movs	r1, #222	; 0xde
 8007696:	485d      	ldr	r0, [pc, #372]	; (800780c <__gethex+0x2ec>)
 8007698:	f001 fa74 	bl	8008b84 <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	105b      	asrs	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__gethex+0x160>
 80076a2:	f100 0914 	add.w	r9, r0, #20
 80076a6:	f04f 0b00 	mov.w	fp, #0
 80076aa:	f1ca 0301 	rsb	r3, sl, #1
 80076ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80076b2:	f8cd b000 	str.w	fp, [sp]
 80076b6:	9306      	str	r3, [sp, #24]
 80076b8:	42b7      	cmp	r7, r6
 80076ba:	d340      	bcc.n	800773e <__gethex+0x21e>
 80076bc:	9802      	ldr	r0, [sp, #8]
 80076be:	9b00      	ldr	r3, [sp, #0]
 80076c0:	f840 3b04 	str.w	r3, [r0], #4
 80076c4:	eba0 0009 	sub.w	r0, r0, r9
 80076c8:	1080      	asrs	r0, r0, #2
 80076ca:	0146      	lsls	r6, r0, #5
 80076cc:	6120      	str	r0, [r4, #16]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fba6 	bl	8007e20 <__hi0bits>
 80076d4:	1a30      	subs	r0, r6, r0
 80076d6:	f8d8 6000 	ldr.w	r6, [r8]
 80076da:	42b0      	cmp	r0, r6
 80076dc:	dd63      	ble.n	80077a6 <__gethex+0x286>
 80076de:	1b87      	subs	r7, r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 ff4a 	bl	800857c <__any_on>
 80076e8:	4682      	mov	sl, r0
 80076ea:	b1a8      	cbz	r0, 8007718 <__gethex+0x1f8>
 80076ec:	1e7b      	subs	r3, r7, #1
 80076ee:	1159      	asrs	r1, r3, #5
 80076f0:	f003 021f 	and.w	r2, r3, #31
 80076f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076f8:	f04f 0a01 	mov.w	sl, #1
 80076fc:	fa0a f202 	lsl.w	r2, sl, r2
 8007700:	420a      	tst	r2, r1
 8007702:	d009      	beq.n	8007718 <__gethex+0x1f8>
 8007704:	4553      	cmp	r3, sl
 8007706:	dd05      	ble.n	8007714 <__gethex+0x1f4>
 8007708:	1eb9      	subs	r1, r7, #2
 800770a:	4620      	mov	r0, r4
 800770c:	f000 ff36 	bl	800857c <__any_on>
 8007710:	2800      	cmp	r0, #0
 8007712:	d145      	bne.n	80077a0 <__gethex+0x280>
 8007714:	f04f 0a02 	mov.w	sl, #2
 8007718:	4639      	mov	r1, r7
 800771a:	4620      	mov	r0, r4
 800771c:	f7ff fe99 	bl	8007452 <rshift>
 8007720:	443d      	add	r5, r7
 8007722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007726:	42ab      	cmp	r3, r5
 8007728:	da4c      	bge.n	80077c4 <__gethex+0x2a4>
 800772a:	ee18 0a10 	vmov	r0, s16
 800772e:	4621      	mov	r1, r4
 8007730:	f000 fac4 	bl	8007cbc <_Bfree>
 8007734:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007736:	2300      	movs	r3, #0
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	27a3      	movs	r7, #163	; 0xa3
 800773c:	e785      	b.n	800764a <__gethex+0x12a>
 800773e:	1e73      	subs	r3, r6, #1
 8007740:	9a05      	ldr	r2, [sp, #20]
 8007742:	9303      	str	r3, [sp, #12]
 8007744:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007748:	4293      	cmp	r3, r2
 800774a:	d019      	beq.n	8007780 <__gethex+0x260>
 800774c:	f1bb 0f20 	cmp.w	fp, #32
 8007750:	d107      	bne.n	8007762 <__gethex+0x242>
 8007752:	9b02      	ldr	r3, [sp, #8]
 8007754:	9a00      	ldr	r2, [sp, #0]
 8007756:	f843 2b04 	str.w	r2, [r3], #4
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	2300      	movs	r3, #0
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	469b      	mov	fp, r3
 8007762:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007766:	f7ff fec6 	bl	80074f6 <__hexdig_fun>
 800776a:	9b00      	ldr	r3, [sp, #0]
 800776c:	f000 000f 	and.w	r0, r0, #15
 8007770:	fa00 f00b 	lsl.w	r0, r0, fp
 8007774:	4303      	orrs	r3, r0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	f10b 0b04 	add.w	fp, fp, #4
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	e00d      	b.n	800779c <__gethex+0x27c>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	9a06      	ldr	r2, [sp, #24]
 8007784:	4413      	add	r3, r2
 8007786:	42bb      	cmp	r3, r7
 8007788:	d3e0      	bcc.n	800774c <__gethex+0x22c>
 800778a:	4618      	mov	r0, r3
 800778c:	9901      	ldr	r1, [sp, #4]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	4652      	mov	r2, sl
 8007792:	f001 f9c4 	bl	8008b1e <strncmp>
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	2800      	cmp	r0, #0
 800779a:	d1d7      	bne.n	800774c <__gethex+0x22c>
 800779c:	461e      	mov	r6, r3
 800779e:	e78b      	b.n	80076b8 <__gethex+0x198>
 80077a0:	f04f 0a03 	mov.w	sl, #3
 80077a4:	e7b8      	b.n	8007718 <__gethex+0x1f8>
 80077a6:	da0a      	bge.n	80077be <__gethex+0x29e>
 80077a8:	1a37      	subs	r7, r6, r0
 80077aa:	4621      	mov	r1, r4
 80077ac:	ee18 0a10 	vmov	r0, s16
 80077b0:	463a      	mov	r2, r7
 80077b2:	f000 fc9f 	bl	80080f4 <__lshift>
 80077b6:	1bed      	subs	r5, r5, r7
 80077b8:	4604      	mov	r4, r0
 80077ba:	f100 0914 	add.w	r9, r0, #20
 80077be:	f04f 0a00 	mov.w	sl, #0
 80077c2:	e7ae      	b.n	8007722 <__gethex+0x202>
 80077c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077c8:	42a8      	cmp	r0, r5
 80077ca:	dd72      	ble.n	80078b2 <__gethex+0x392>
 80077cc:	1b45      	subs	r5, r0, r5
 80077ce:	42ae      	cmp	r6, r5
 80077d0:	dc36      	bgt.n	8007840 <__gethex+0x320>
 80077d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d02a      	beq.n	8007830 <__gethex+0x310>
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d02c      	beq.n	8007838 <__gethex+0x318>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d11c      	bne.n	800781c <__gethex+0x2fc>
 80077e2:	42ae      	cmp	r6, r5
 80077e4:	d11a      	bne.n	800781c <__gethex+0x2fc>
 80077e6:	2e01      	cmp	r6, #1
 80077e8:	d112      	bne.n	8007810 <__gethex+0x2f0>
 80077ea:	9a04      	ldr	r2, [sp, #16]
 80077ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	2301      	movs	r3, #1
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	f8c9 3000 	str.w	r3, [r9]
 80077fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077fc:	2762      	movs	r7, #98	; 0x62
 80077fe:	601c      	str	r4, [r3, #0]
 8007800:	e723      	b.n	800764a <__gethex+0x12a>
 8007802:	bf00      	nop
 8007804:	0800942c 	.word	0x0800942c
 8007808:	08009350 	.word	0x08009350
 800780c:	080093c4 	.word	0x080093c4
 8007810:	1e71      	subs	r1, r6, #1
 8007812:	4620      	mov	r0, r4
 8007814:	f000 feb2 	bl	800857c <__any_on>
 8007818:	2800      	cmp	r0, #0
 800781a:	d1e6      	bne.n	80077ea <__gethex+0x2ca>
 800781c:	ee18 0a10 	vmov	r0, s16
 8007820:	4621      	mov	r1, r4
 8007822:	f000 fa4b 	bl	8007cbc <_Bfree>
 8007826:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007828:	2300      	movs	r3, #0
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	2750      	movs	r7, #80	; 0x50
 800782e:	e70c      	b.n	800764a <__gethex+0x12a>
 8007830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f2      	bne.n	800781c <__gethex+0x2fc>
 8007836:	e7d8      	b.n	80077ea <__gethex+0x2ca>
 8007838:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1d5      	bne.n	80077ea <__gethex+0x2ca>
 800783e:	e7ed      	b.n	800781c <__gethex+0x2fc>
 8007840:	1e6f      	subs	r7, r5, #1
 8007842:	f1ba 0f00 	cmp.w	sl, #0
 8007846:	d131      	bne.n	80078ac <__gethex+0x38c>
 8007848:	b127      	cbz	r7, 8007854 <__gethex+0x334>
 800784a:	4639      	mov	r1, r7
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fe95 	bl	800857c <__any_on>
 8007852:	4682      	mov	sl, r0
 8007854:	117b      	asrs	r3, r7, #5
 8007856:	2101      	movs	r1, #1
 8007858:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800785c:	f007 071f 	and.w	r7, r7, #31
 8007860:	fa01 f707 	lsl.w	r7, r1, r7
 8007864:	421f      	tst	r7, r3
 8007866:	4629      	mov	r1, r5
 8007868:	4620      	mov	r0, r4
 800786a:	bf18      	it	ne
 800786c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007870:	1b76      	subs	r6, r6, r5
 8007872:	f7ff fdee 	bl	8007452 <rshift>
 8007876:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800787a:	2702      	movs	r7, #2
 800787c:	f1ba 0f00 	cmp.w	sl, #0
 8007880:	d048      	beq.n	8007914 <__gethex+0x3f4>
 8007882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d015      	beq.n	80078b6 <__gethex+0x396>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d017      	beq.n	80078be <__gethex+0x39e>
 800788e:	2b01      	cmp	r3, #1
 8007890:	d109      	bne.n	80078a6 <__gethex+0x386>
 8007892:	f01a 0f02 	tst.w	sl, #2
 8007896:	d006      	beq.n	80078a6 <__gethex+0x386>
 8007898:	f8d9 0000 	ldr.w	r0, [r9]
 800789c:	ea4a 0a00 	orr.w	sl, sl, r0
 80078a0:	f01a 0f01 	tst.w	sl, #1
 80078a4:	d10e      	bne.n	80078c4 <__gethex+0x3a4>
 80078a6:	f047 0710 	orr.w	r7, r7, #16
 80078aa:	e033      	b.n	8007914 <__gethex+0x3f4>
 80078ac:	f04f 0a01 	mov.w	sl, #1
 80078b0:	e7d0      	b.n	8007854 <__gethex+0x334>
 80078b2:	2701      	movs	r7, #1
 80078b4:	e7e2      	b.n	800787c <__gethex+0x35c>
 80078b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b8:	f1c3 0301 	rsb	r3, r3, #1
 80078bc:	9315      	str	r3, [sp, #84]	; 0x54
 80078be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <__gethex+0x386>
 80078c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078c8:	f104 0314 	add.w	r3, r4, #20
 80078cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078d4:	f04f 0c00 	mov.w	ip, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f853 2b04 	ldr.w	r2, [r3], #4
 80078de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80078e2:	d01c      	beq.n	800791e <__gethex+0x3fe>
 80078e4:	3201      	adds	r2, #1
 80078e6:	6002      	str	r2, [r0, #0]
 80078e8:	2f02      	cmp	r7, #2
 80078ea:	f104 0314 	add.w	r3, r4, #20
 80078ee:	d13f      	bne.n	8007970 <__gethex+0x450>
 80078f0:	f8d8 2000 	ldr.w	r2, [r8]
 80078f4:	3a01      	subs	r2, #1
 80078f6:	42b2      	cmp	r2, r6
 80078f8:	d10a      	bne.n	8007910 <__gethex+0x3f0>
 80078fa:	1171      	asrs	r1, r6, #5
 80078fc:	2201      	movs	r2, #1
 80078fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007902:	f006 061f 	and.w	r6, r6, #31
 8007906:	fa02 f606 	lsl.w	r6, r2, r6
 800790a:	421e      	tst	r6, r3
 800790c:	bf18      	it	ne
 800790e:	4617      	movne	r7, r2
 8007910:	f047 0720 	orr.w	r7, r7, #32
 8007914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007916:	601c      	str	r4, [r3, #0]
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	601d      	str	r5, [r3, #0]
 800791c:	e695      	b.n	800764a <__gethex+0x12a>
 800791e:	4299      	cmp	r1, r3
 8007920:	f843 cc04 	str.w	ip, [r3, #-4]
 8007924:	d8d8      	bhi.n	80078d8 <__gethex+0x3b8>
 8007926:	68a3      	ldr	r3, [r4, #8]
 8007928:	459b      	cmp	fp, r3
 800792a:	db19      	blt.n	8007960 <__gethex+0x440>
 800792c:	6861      	ldr	r1, [r4, #4]
 800792e:	ee18 0a10 	vmov	r0, s16
 8007932:	3101      	adds	r1, #1
 8007934:	f000 f982 	bl	8007c3c <_Balloc>
 8007938:	4681      	mov	r9, r0
 800793a:	b918      	cbnz	r0, 8007944 <__gethex+0x424>
 800793c:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <__gethex+0x488>)
 800793e:	4602      	mov	r2, r0
 8007940:	2184      	movs	r1, #132	; 0x84
 8007942:	e6a8      	b.n	8007696 <__gethex+0x176>
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	3202      	adds	r2, #2
 8007948:	f104 010c 	add.w	r1, r4, #12
 800794c:	0092      	lsls	r2, r2, #2
 800794e:	300c      	adds	r0, #12
 8007950:	f7fc feb4 	bl	80046bc <memcpy>
 8007954:	4621      	mov	r1, r4
 8007956:	ee18 0a10 	vmov	r0, s16
 800795a:	f000 f9af 	bl	8007cbc <_Bfree>
 800795e:	464c      	mov	r4, r9
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007968:	6122      	str	r2, [r4, #16]
 800796a:	2201      	movs	r2, #1
 800796c:	615a      	str	r2, [r3, #20]
 800796e:	e7bb      	b.n	80078e8 <__gethex+0x3c8>
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	455a      	cmp	r2, fp
 8007974:	dd0b      	ble.n	800798e <__gethex+0x46e>
 8007976:	2101      	movs	r1, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fd6a 	bl	8007452 <rshift>
 800797e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007982:	3501      	adds	r5, #1
 8007984:	42ab      	cmp	r3, r5
 8007986:	f6ff aed0 	blt.w	800772a <__gethex+0x20a>
 800798a:	2701      	movs	r7, #1
 800798c:	e7c0      	b.n	8007910 <__gethex+0x3f0>
 800798e:	f016 061f 	ands.w	r6, r6, #31
 8007992:	d0fa      	beq.n	800798a <__gethex+0x46a>
 8007994:	4453      	add	r3, sl
 8007996:	f1c6 0620 	rsb	r6, r6, #32
 800799a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800799e:	f000 fa3f 	bl	8007e20 <__hi0bits>
 80079a2:	42b0      	cmp	r0, r6
 80079a4:	dbe7      	blt.n	8007976 <__gethex+0x456>
 80079a6:	e7f0      	b.n	800798a <__gethex+0x46a>
 80079a8:	08009350 	.word	0x08009350

080079ac <L_shift>:
 80079ac:	f1c2 0208 	rsb	r2, r2, #8
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	b570      	push	{r4, r5, r6, lr}
 80079b4:	f1c2 0620 	rsb	r6, r2, #32
 80079b8:	6843      	ldr	r3, [r0, #4]
 80079ba:	6804      	ldr	r4, [r0, #0]
 80079bc:	fa03 f506 	lsl.w	r5, r3, r6
 80079c0:	432c      	orrs	r4, r5
 80079c2:	40d3      	lsrs	r3, r2
 80079c4:	6004      	str	r4, [r0, #0]
 80079c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80079ca:	4288      	cmp	r0, r1
 80079cc:	d3f4      	bcc.n	80079b8 <L_shift+0xc>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}

080079d0 <__match>:
 80079d0:	b530      	push	{r4, r5, lr}
 80079d2:	6803      	ldr	r3, [r0, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079da:	b914      	cbnz	r4, 80079e2 <__match+0x12>
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	2001      	movs	r0, #1
 80079e0:	bd30      	pop	{r4, r5, pc}
 80079e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079ea:	2d19      	cmp	r5, #25
 80079ec:	bf98      	it	ls
 80079ee:	3220      	addls	r2, #32
 80079f0:	42a2      	cmp	r2, r4
 80079f2:	d0f0      	beq.n	80079d6 <__match+0x6>
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7f3      	b.n	80079e0 <__match+0x10>

080079f8 <__hexnan>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	680b      	ldr	r3, [r1, #0]
 80079fe:	115e      	asrs	r6, r3, #5
 8007a00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a04:	f013 031f 	ands.w	r3, r3, #31
 8007a08:	b087      	sub	sp, #28
 8007a0a:	bf18      	it	ne
 8007a0c:	3604      	addne	r6, #4
 8007a0e:	2500      	movs	r5, #0
 8007a10:	1f37      	subs	r7, r6, #4
 8007a12:	4690      	mov	r8, r2
 8007a14:	6802      	ldr	r2, [r0, #0]
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	4682      	mov	sl, r0
 8007a1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a1e:	46b9      	mov	r9, r7
 8007a20:	463c      	mov	r4, r7
 8007a22:	9502      	str	r5, [sp, #8]
 8007a24:	46ab      	mov	fp, r5
 8007a26:	7851      	ldrb	r1, [r2, #1]
 8007a28:	1c53      	adds	r3, r2, #1
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	b341      	cbz	r1, 8007a80 <__hexnan+0x88>
 8007a2e:	4608      	mov	r0, r1
 8007a30:	9205      	str	r2, [sp, #20]
 8007a32:	9104      	str	r1, [sp, #16]
 8007a34:	f7ff fd5f 	bl	80074f6 <__hexdig_fun>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d14f      	bne.n	8007adc <__hexnan+0xe4>
 8007a3c:	9904      	ldr	r1, [sp, #16]
 8007a3e:	9a05      	ldr	r2, [sp, #20]
 8007a40:	2920      	cmp	r1, #32
 8007a42:	d818      	bhi.n	8007a76 <__hexnan+0x7e>
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	459b      	cmp	fp, r3
 8007a48:	dd13      	ble.n	8007a72 <__hexnan+0x7a>
 8007a4a:	454c      	cmp	r4, r9
 8007a4c:	d206      	bcs.n	8007a5c <__hexnan+0x64>
 8007a4e:	2d07      	cmp	r5, #7
 8007a50:	dc04      	bgt.n	8007a5c <__hexnan+0x64>
 8007a52:	462a      	mov	r2, r5
 8007a54:	4649      	mov	r1, r9
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff ffa8 	bl	80079ac <L_shift>
 8007a5c:	4544      	cmp	r4, r8
 8007a5e:	d950      	bls.n	8007b02 <__hexnan+0x10a>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f1a4 0904 	sub.w	r9, r4, #4
 8007a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a6e:	464c      	mov	r4, r9
 8007a70:	461d      	mov	r5, r3
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	e7d7      	b.n	8007a26 <__hexnan+0x2e>
 8007a76:	2929      	cmp	r1, #41	; 0x29
 8007a78:	d156      	bne.n	8007b28 <__hexnan+0x130>
 8007a7a:	3202      	adds	r2, #2
 8007a7c:	f8ca 2000 	str.w	r2, [sl]
 8007a80:	f1bb 0f00 	cmp.w	fp, #0
 8007a84:	d050      	beq.n	8007b28 <__hexnan+0x130>
 8007a86:	454c      	cmp	r4, r9
 8007a88:	d206      	bcs.n	8007a98 <__hexnan+0xa0>
 8007a8a:	2d07      	cmp	r5, #7
 8007a8c:	dc04      	bgt.n	8007a98 <__hexnan+0xa0>
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4649      	mov	r1, r9
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff ff8a 	bl	80079ac <L_shift>
 8007a98:	4544      	cmp	r4, r8
 8007a9a:	d934      	bls.n	8007b06 <__hexnan+0x10e>
 8007a9c:	f1a8 0204 	sub.w	r2, r8, #4
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007aa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007aaa:	429f      	cmp	r7, r3
 8007aac:	d2f9      	bcs.n	8007aa2 <__hexnan+0xaa>
 8007aae:	1b3b      	subs	r3, r7, r4
 8007ab0:	f023 0303 	bic.w	r3, r3, #3
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	3401      	adds	r4, #1
 8007ab8:	3e03      	subs	r6, #3
 8007aba:	42b4      	cmp	r4, r6
 8007abc:	bf88      	it	hi
 8007abe:	2304      	movhi	r3, #4
 8007ac0:	4443      	add	r3, r8
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f843 2b04 	str.w	r2, [r3], #4
 8007ac8:	429f      	cmp	r7, r3
 8007aca:	d2fb      	bcs.n	8007ac4 <__hexnan+0xcc>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	b91b      	cbnz	r3, 8007ad8 <__hexnan+0xe0>
 8007ad0:	4547      	cmp	r7, r8
 8007ad2:	d127      	bne.n	8007b24 <__hexnan+0x12c>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	2005      	movs	r0, #5
 8007ada:	e026      	b.n	8007b2a <__hexnan+0x132>
 8007adc:	3501      	adds	r5, #1
 8007ade:	2d08      	cmp	r5, #8
 8007ae0:	f10b 0b01 	add.w	fp, fp, #1
 8007ae4:	dd06      	ble.n	8007af4 <__hexnan+0xfc>
 8007ae6:	4544      	cmp	r4, r8
 8007ae8:	d9c3      	bls.n	8007a72 <__hexnan+0x7a>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af0:	2501      	movs	r5, #1
 8007af2:	3c04      	subs	r4, #4
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	f000 000f 	and.w	r0, r0, #15
 8007afa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	e7b7      	b.n	8007a72 <__hexnan+0x7a>
 8007b02:	2508      	movs	r5, #8
 8007b04:	e7b5      	b.n	8007a72 <__hexnan+0x7a>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0df      	beq.n	8007acc <__hexnan+0xd4>
 8007b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b10:	f1c3 0320 	rsb	r3, r3, #32
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b1c:	401a      	ands	r2, r3
 8007b1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b22:	e7d3      	b.n	8007acc <__hexnan+0xd4>
 8007b24:	3f04      	subs	r7, #4
 8007b26:	e7d1      	b.n	8007acc <__hexnan+0xd4>
 8007b28:	2004      	movs	r0, #4
 8007b2a:	b007      	add	sp, #28
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b30 <_localeconv_r>:
 8007b30:	4800      	ldr	r0, [pc, #0]	; (8007b34 <_localeconv_r+0x4>)
 8007b32:	4770      	bx	lr
 8007b34:	2000016c 	.word	0x2000016c

08007b38 <__retarget_lock_init_recursive>:
 8007b38:	4770      	bx	lr

08007b3a <__retarget_lock_acquire_recursive>:
 8007b3a:	4770      	bx	lr

08007b3c <__retarget_lock_release_recursive>:
 8007b3c:	4770      	bx	lr

08007b3e <__swhatbuf_r>:
 8007b3e:	b570      	push	{r4, r5, r6, lr}
 8007b40:	460e      	mov	r6, r1
 8007b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b46:	2900      	cmp	r1, #0
 8007b48:	b096      	sub	sp, #88	; 0x58
 8007b4a:	4614      	mov	r4, r2
 8007b4c:	461d      	mov	r5, r3
 8007b4e:	da08      	bge.n	8007b62 <__swhatbuf_r+0x24>
 8007b50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	061a      	lsls	r2, r3, #24
 8007b5a:	d410      	bmi.n	8007b7e <__swhatbuf_r+0x40>
 8007b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b60:	e00e      	b.n	8007b80 <__swhatbuf_r+0x42>
 8007b62:	466a      	mov	r2, sp
 8007b64:	f001 f84e 	bl	8008c04 <_fstat_r>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dbf1      	blt.n	8007b50 <__swhatbuf_r+0x12>
 8007b6c:	9a01      	ldr	r2, [sp, #4]
 8007b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b76:	425a      	negs	r2, r3
 8007b78:	415a      	adcs	r2, r3
 8007b7a:	602a      	str	r2, [r5, #0]
 8007b7c:	e7ee      	b.n	8007b5c <__swhatbuf_r+0x1e>
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	2000      	movs	r0, #0
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	b016      	add	sp, #88	; 0x58
 8007b86:	bd70      	pop	{r4, r5, r6, pc}

08007b88 <__smakebuf_r>:
 8007b88:	898b      	ldrh	r3, [r1, #12]
 8007b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b8c:	079d      	lsls	r5, r3, #30
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460c      	mov	r4, r1
 8007b92:	d507      	bpl.n	8007ba4 <__smakebuf_r+0x1c>
 8007b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	6123      	str	r3, [r4, #16]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	6163      	str	r3, [r4, #20]
 8007ba0:	b002      	add	sp, #8
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	ab01      	add	r3, sp, #4
 8007ba6:	466a      	mov	r2, sp
 8007ba8:	f7ff ffc9 	bl	8007b3e <__swhatbuf_r>
 8007bac:	9900      	ldr	r1, [sp, #0]
 8007bae:	4605      	mov	r5, r0
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 fd87 	bl	80086c4 <_malloc_r>
 8007bb6:	b948      	cbnz	r0, 8007bcc <__smakebuf_r+0x44>
 8007bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bbc:	059a      	lsls	r2, r3, #22
 8007bbe:	d4ef      	bmi.n	8007ba0 <__smakebuf_r+0x18>
 8007bc0:	f023 0303 	bic.w	r3, r3, #3
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	e7e3      	b.n	8007b94 <__smakebuf_r+0xc>
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <__smakebuf_r+0x7c>)
 8007bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	6163      	str	r3, [r4, #20]
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	6120      	str	r0, [r4, #16]
 8007be2:	b15b      	cbz	r3, 8007bfc <__smakebuf_r+0x74>
 8007be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be8:	4630      	mov	r0, r6
 8007bea:	f001 f81d 	bl	8008c28 <_isatty_r>
 8007bee:	b128      	cbz	r0, 8007bfc <__smakebuf_r+0x74>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	89a0      	ldrh	r0, [r4, #12]
 8007bfe:	4305      	orrs	r5, r0
 8007c00:	81a5      	strh	r5, [r4, #12]
 8007c02:	e7cd      	b.n	8007ba0 <__smakebuf_r+0x18>
 8007c04:	080072b1 	.word	0x080072b1

08007c08 <malloc>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <malloc+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f000 bd59 	b.w	80086c4 <_malloc_r>
 8007c12:	bf00      	nop
 8007c14:	20000014 	.word	0x20000014

08007c18 <__ascii_mbtowc>:
 8007c18:	b082      	sub	sp, #8
 8007c1a:	b901      	cbnz	r1, 8007c1e <__ascii_mbtowc+0x6>
 8007c1c:	a901      	add	r1, sp, #4
 8007c1e:	b142      	cbz	r2, 8007c32 <__ascii_mbtowc+0x1a>
 8007c20:	b14b      	cbz	r3, 8007c36 <__ascii_mbtowc+0x1e>
 8007c22:	7813      	ldrb	r3, [r2, #0]
 8007c24:	600b      	str	r3, [r1, #0]
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	1e10      	subs	r0, r2, #0
 8007c2a:	bf18      	it	ne
 8007c2c:	2001      	movne	r0, #1
 8007c2e:	b002      	add	sp, #8
 8007c30:	4770      	bx	lr
 8007c32:	4610      	mov	r0, r2
 8007c34:	e7fb      	b.n	8007c2e <__ascii_mbtowc+0x16>
 8007c36:	f06f 0001 	mvn.w	r0, #1
 8007c3a:	e7f8      	b.n	8007c2e <__ascii_mbtowc+0x16>

08007c3c <_Balloc>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	b976      	cbnz	r6, 8007c64 <_Balloc+0x28>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7ff ffde 	bl	8007c08 <malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8007c50:	b920      	cbnz	r0, 8007c5c <_Balloc+0x20>
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <_Balloc+0x78>)
 8007c54:	4818      	ldr	r0, [pc, #96]	; (8007cb8 <_Balloc+0x7c>)
 8007c56:	2166      	movs	r1, #102	; 0x66
 8007c58:	f000 ff94 	bl	8008b84 <__assert_func>
 8007c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c60:	6006      	str	r6, [r0, #0]
 8007c62:	60c6      	str	r6, [r0, #12]
 8007c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c66:	68f3      	ldr	r3, [r6, #12]
 8007c68:	b183      	cbz	r3, 8007c8c <_Balloc+0x50>
 8007c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c72:	b9b8      	cbnz	r0, 8007ca4 <_Balloc+0x68>
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f605 	lsl.w	r6, r1, r5
 8007c7a:	1d72      	adds	r2, r6, #5
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fc9d 	bl	80085be <_calloc_r>
 8007c84:	b160      	cbz	r0, 8007ca0 <_Balloc+0x64>
 8007c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c8a:	e00e      	b.n	8007caa <_Balloc+0x6e>
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	2104      	movs	r1, #4
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fc94 	bl	80085be <_calloc_r>
 8007c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c98:	60f0      	str	r0, [r6, #12]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <_Balloc+0x2e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	6802      	ldr	r2, [r0, #0]
 8007ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007caa:	2300      	movs	r3, #0
 8007cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cb0:	e7f7      	b.n	8007ca2 <_Balloc+0x66>
 8007cb2:	bf00      	nop
 8007cb4:	080092de 	.word	0x080092de
 8007cb8:	08009440 	.word	0x08009440

08007cbc <_Bfree>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b976      	cbnz	r6, 8007ce4 <_Bfree+0x28>
 8007cc6:	2010      	movs	r0, #16
 8007cc8:	f7ff ff9e 	bl	8007c08 <malloc>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6268      	str	r0, [r5, #36]	; 0x24
 8007cd0:	b920      	cbnz	r0, 8007cdc <_Bfree+0x20>
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <_Bfree+0x3c>)
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_Bfree+0x40>)
 8007cd6:	218a      	movs	r1, #138	; 0x8a
 8007cd8:	f000 ff54 	bl	8008b84 <__assert_func>
 8007cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce0:	6006      	str	r6, [r0, #0]
 8007ce2:	60c6      	str	r6, [r0, #12]
 8007ce4:	b13c      	cbz	r4, 8007cf6 <_Bfree+0x3a>
 8007ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cf0:	6021      	str	r1, [r4, #0]
 8007cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	080092de 	.word	0x080092de
 8007cfc:	08009440 	.word	0x08009440

08007d00 <__multadd>:
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d04:	690d      	ldr	r5, [r1, #16]
 8007d06:	4607      	mov	r7, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	461e      	mov	r6, r3
 8007d0c:	f101 0c14 	add.w	ip, r1, #20
 8007d10:	2000      	movs	r0, #0
 8007d12:	f8dc 3000 	ldr.w	r3, [ip]
 8007d16:	b299      	uxth	r1, r3
 8007d18:	fb02 6101 	mla	r1, r2, r1, r6
 8007d1c:	0c1e      	lsrs	r6, r3, #16
 8007d1e:	0c0b      	lsrs	r3, r1, #16
 8007d20:	fb02 3306 	mla	r3, r2, r6, r3
 8007d24:	b289      	uxth	r1, r1
 8007d26:	3001      	adds	r0, #1
 8007d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d2c:	4285      	cmp	r5, r0
 8007d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d36:	dcec      	bgt.n	8007d12 <__multadd+0x12>
 8007d38:	b30e      	cbz	r6, 8007d7e <__multadd+0x7e>
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	dc19      	bgt.n	8007d74 <__multadd+0x74>
 8007d40:	6861      	ldr	r1, [r4, #4]
 8007d42:	4638      	mov	r0, r7
 8007d44:	3101      	adds	r1, #1
 8007d46:	f7ff ff79 	bl	8007c3c <_Balloc>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <__multadd+0x5a>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <__multadd+0x84>)
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <__multadd+0x88>)
 8007d54:	21b5      	movs	r1, #181	; 0xb5
 8007d56:	f000 ff15 	bl	8008b84 <__assert_func>
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	f104 010c 	add.w	r1, r4, #12
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	300c      	adds	r0, #12
 8007d66:	f7fc fca9 	bl	80046bc <memcpy>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff ffa5 	bl	8007cbc <_Bfree>
 8007d72:	4644      	mov	r4, r8
 8007d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d78:	3501      	adds	r5, #1
 8007d7a:	615e      	str	r6, [r3, #20]
 8007d7c:	6125      	str	r5, [r4, #16]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	08009350 	.word	0x08009350
 8007d88:	08009440 	.word	0x08009440

08007d8c <__s2b>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	4615      	mov	r5, r2
 8007d94:	461f      	mov	r7, r3
 8007d96:	2209      	movs	r2, #9
 8007d98:	3308      	adds	r3, #8
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da0:	2100      	movs	r1, #0
 8007da2:	2201      	movs	r2, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db09      	blt.n	8007dbc <__s2b+0x30>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ff47 	bl	8007c3c <_Balloc>
 8007dae:	b940      	cbnz	r0, 8007dc2 <__s2b+0x36>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <__s2b+0x8c>)
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <__s2b+0x90>)
 8007db6:	21ce      	movs	r1, #206	; 0xce
 8007db8:	f000 fee4 	bl	8008b84 <__assert_func>
 8007dbc:	0052      	lsls	r2, r2, #1
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	e7f0      	b.n	8007da4 <__s2b+0x18>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	6143      	str	r3, [r0, #20]
 8007dc6:	2d09      	cmp	r5, #9
 8007dc8:	f04f 0301 	mov.w	r3, #1
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	dd16      	ble.n	8007dfe <__s2b+0x72>
 8007dd0:	f104 0909 	add.w	r9, r4, #9
 8007dd4:	46c8      	mov	r8, r9
 8007dd6:	442c      	add	r4, r5
 8007dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff8c 	bl	8007d00 <__multadd>
 8007de8:	45a0      	cmp	r8, r4
 8007dea:	d1f5      	bne.n	8007dd8 <__s2b+0x4c>
 8007dec:	f1a5 0408 	sub.w	r4, r5, #8
 8007df0:	444c      	add	r4, r9
 8007df2:	1b2d      	subs	r5, r5, r4
 8007df4:	1963      	adds	r3, r4, r5
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	db04      	blt.n	8007e04 <__s2b+0x78>
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	340a      	adds	r4, #10
 8007e00:	2509      	movs	r5, #9
 8007e02:	e7f6      	b.n	8007df2 <__s2b+0x66>
 8007e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e08:	4601      	mov	r1, r0
 8007e0a:	3b30      	subs	r3, #48	; 0x30
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff76 	bl	8007d00 <__multadd>
 8007e14:	e7ee      	b.n	8007df4 <__s2b+0x68>
 8007e16:	bf00      	nop
 8007e18:	08009350 	.word	0x08009350
 8007e1c:	08009440 	.word	0x08009440

08007e20 <__hi0bits>:
 8007e20:	0c03      	lsrs	r3, r0, #16
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	b9d3      	cbnz	r3, 8007e5c <__hi0bits+0x3c>
 8007e26:	0400      	lsls	r0, r0, #16
 8007e28:	2310      	movs	r3, #16
 8007e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e2e:	bf04      	itt	eq
 8007e30:	0200      	lsleq	r0, r0, #8
 8007e32:	3308      	addeq	r3, #8
 8007e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e38:	bf04      	itt	eq
 8007e3a:	0100      	lsleq	r0, r0, #4
 8007e3c:	3304      	addeq	r3, #4
 8007e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e42:	bf04      	itt	eq
 8007e44:	0080      	lsleq	r0, r0, #2
 8007e46:	3302      	addeq	r3, #2
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	db05      	blt.n	8007e58 <__hi0bits+0x38>
 8007e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e50:	f103 0301 	add.w	r3, r3, #1
 8007e54:	bf08      	it	eq
 8007e56:	2320      	moveq	r3, #32
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4770      	bx	lr
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7e4      	b.n	8007e2a <__hi0bits+0xa>

08007e60 <__lo0bits>:
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	f013 0207 	ands.w	r2, r3, #7
 8007e66:	4601      	mov	r1, r0
 8007e68:	d00b      	beq.n	8007e82 <__lo0bits+0x22>
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d423      	bmi.n	8007eb6 <__lo0bits+0x56>
 8007e6e:	0798      	lsls	r0, r3, #30
 8007e70:	bf49      	itett	mi
 8007e72:	085b      	lsrmi	r3, r3, #1
 8007e74:	089b      	lsrpl	r3, r3, #2
 8007e76:	2001      	movmi	r0, #1
 8007e78:	600b      	strmi	r3, [r1, #0]
 8007e7a:	bf5c      	itt	pl
 8007e7c:	600b      	strpl	r3, [r1, #0]
 8007e7e:	2002      	movpl	r0, #2
 8007e80:	4770      	bx	lr
 8007e82:	b298      	uxth	r0, r3
 8007e84:	b9a8      	cbnz	r0, 8007eb2 <__lo0bits+0x52>
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	2010      	movs	r0, #16
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	b90a      	cbnz	r2, 8007e92 <__lo0bits+0x32>
 8007e8e:	3008      	adds	r0, #8
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	071a      	lsls	r2, r3, #28
 8007e94:	bf04      	itt	eq
 8007e96:	091b      	lsreq	r3, r3, #4
 8007e98:	3004      	addeq	r0, #4
 8007e9a:	079a      	lsls	r2, r3, #30
 8007e9c:	bf04      	itt	eq
 8007e9e:	089b      	lsreq	r3, r3, #2
 8007ea0:	3002      	addeq	r0, #2
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d403      	bmi.n	8007eae <__lo0bits+0x4e>
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	f100 0001 	add.w	r0, r0, #1
 8007eac:	d005      	beq.n	8007eba <__lo0bits+0x5a>
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	e7e9      	b.n	8007e8a <__lo0bits+0x2a>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4770      	bx	lr
 8007eba:	2020      	movs	r0, #32
 8007ebc:	4770      	bx	lr
	...

08007ec0 <__i2b>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff feb9 	bl	8007c3c <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__i2b+0x1a>
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <__i2b+0x24>)
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <__i2b+0x28>)
 8007ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ed6:	f000 fe55 	bl	8008b84 <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	6144      	str	r4, [r0, #20]
 8007ede:	6103      	str	r3, [r0, #16]
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08009350 	.word	0x08009350
 8007ee8:	08009440 	.word	0x08009440

08007eec <__multiply>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4691      	mov	r9, r2
 8007ef2:	690a      	ldr	r2, [r1, #16]
 8007ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	bfb8      	it	lt
 8007efc:	460b      	movlt	r3, r1
 8007efe:	460c      	mov	r4, r1
 8007f00:	bfbc      	itt	lt
 8007f02:	464c      	movlt	r4, r9
 8007f04:	4699      	movlt	r9, r3
 8007f06:	6927      	ldr	r7, [r4, #16]
 8007f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f0c:	68a3      	ldr	r3, [r4, #8]
 8007f0e:	6861      	ldr	r1, [r4, #4]
 8007f10:	eb07 060a 	add.w	r6, r7, sl
 8007f14:	42b3      	cmp	r3, r6
 8007f16:	b085      	sub	sp, #20
 8007f18:	bfb8      	it	lt
 8007f1a:	3101      	addlt	r1, #1
 8007f1c:	f7ff fe8e 	bl	8007c3c <_Balloc>
 8007f20:	b930      	cbnz	r0, 8007f30 <__multiply+0x44>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b44      	ldr	r3, [pc, #272]	; (8008038 <__multiply+0x14c>)
 8007f26:	4845      	ldr	r0, [pc, #276]	; (800803c <__multiply+0x150>)
 8007f28:	f240 115d 	movw	r1, #349	; 0x15d
 8007f2c:	f000 fe2a 	bl	8008b84 <__assert_func>
 8007f30:	f100 0514 	add.w	r5, r0, #20
 8007f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f38:	462b      	mov	r3, r5
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	d321      	bcc.n	8007f84 <__multiply+0x98>
 8007f40:	f104 0314 	add.w	r3, r4, #20
 8007f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f48:	f109 0314 	add.w	r3, r9, #20
 8007f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	1b3a      	subs	r2, r7, r4
 8007f54:	3a15      	subs	r2, #21
 8007f56:	f022 0203 	bic.w	r2, r2, #3
 8007f5a:	3204      	adds	r2, #4
 8007f5c:	f104 0115 	add.w	r1, r4, #21
 8007f60:	428f      	cmp	r7, r1
 8007f62:	bf38      	it	cc
 8007f64:	2204      	movcc	r2, #4
 8007f66:	9201      	str	r2, [sp, #4]
 8007f68:	9a02      	ldr	r2, [sp, #8]
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d80c      	bhi.n	8007f8a <__multiply+0x9e>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	dd03      	ble.n	8007f7c <__multiply+0x90>
 8007f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d05a      	beq.n	8008032 <__multiply+0x146>
 8007f7c:	6106      	str	r6, [r0, #16]
 8007f7e:	b005      	add	sp, #20
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	f843 2b04 	str.w	r2, [r3], #4
 8007f88:	e7d8      	b.n	8007f3c <__multiply+0x50>
 8007f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f8e:	f1ba 0f00 	cmp.w	sl, #0
 8007f92:	d024      	beq.n	8007fde <__multiply+0xf2>
 8007f94:	f104 0e14 	add.w	lr, r4, #20
 8007f98:	46a9      	mov	r9, r5
 8007f9a:	f04f 0c00 	mov.w	ip, #0
 8007f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8007fa6:	fa1f fb82 	uxth.w	fp, r2
 8007faa:	b289      	uxth	r1, r1
 8007fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb8:	4461      	add	r1, ip
 8007fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fcc:	4577      	cmp	r7, lr
 8007fce:	f849 1b04 	str.w	r1, [r9], #4
 8007fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fd6:	d8e2      	bhi.n	8007f9e <__multiply+0xb2>
 8007fd8:	9a01      	ldr	r2, [sp, #4]
 8007fda:	f845 c002 	str.w	ip, [r5, r2]
 8007fde:	9a03      	ldr	r2, [sp, #12]
 8007fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	f1b9 0f00 	cmp.w	r9, #0
 8007fea:	d020      	beq.n	800802e <__multiply+0x142>
 8007fec:	6829      	ldr	r1, [r5, #0]
 8007fee:	f104 0c14 	add.w	ip, r4, #20
 8007ff2:	46ae      	mov	lr, r5
 8007ff4:	f04f 0a00 	mov.w	sl, #0
 8007ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8007ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008000:	fb09 220b 	mla	r2, r9, fp, r2
 8008004:	4492      	add	sl, r2
 8008006:	b289      	uxth	r1, r1
 8008008:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800800c:	f84e 1b04 	str.w	r1, [lr], #4
 8008010:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008014:	f8be 1000 	ldrh.w	r1, [lr]
 8008018:	0c12      	lsrs	r2, r2, #16
 800801a:	fb09 1102 	mla	r1, r9, r2, r1
 800801e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008022:	4567      	cmp	r7, ip
 8008024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008028:	d8e6      	bhi.n	8007ff8 <__multiply+0x10c>
 800802a:	9a01      	ldr	r2, [sp, #4]
 800802c:	50a9      	str	r1, [r5, r2]
 800802e:	3504      	adds	r5, #4
 8008030:	e79a      	b.n	8007f68 <__multiply+0x7c>
 8008032:	3e01      	subs	r6, #1
 8008034:	e79c      	b.n	8007f70 <__multiply+0x84>
 8008036:	bf00      	nop
 8008038:	08009350 	.word	0x08009350
 800803c:	08009440 	.word	0x08009440

08008040 <__pow5mult>:
 8008040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4615      	mov	r5, r2
 8008046:	f012 0203 	ands.w	r2, r2, #3
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	d007      	beq.n	8008060 <__pow5mult+0x20>
 8008050:	4c25      	ldr	r4, [pc, #148]	; (80080e8 <__pow5mult+0xa8>)
 8008052:	3a01      	subs	r2, #1
 8008054:	2300      	movs	r3, #0
 8008056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800805a:	f7ff fe51 	bl	8007d00 <__multadd>
 800805e:	4607      	mov	r7, r0
 8008060:	10ad      	asrs	r5, r5, #2
 8008062:	d03d      	beq.n	80080e0 <__pow5mult+0xa0>
 8008064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008066:	b97c      	cbnz	r4, 8008088 <__pow5mult+0x48>
 8008068:	2010      	movs	r0, #16
 800806a:	f7ff fdcd 	bl	8007c08 <malloc>
 800806e:	4602      	mov	r2, r0
 8008070:	6270      	str	r0, [r6, #36]	; 0x24
 8008072:	b928      	cbnz	r0, 8008080 <__pow5mult+0x40>
 8008074:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <__pow5mult+0xac>)
 8008076:	481e      	ldr	r0, [pc, #120]	; (80080f0 <__pow5mult+0xb0>)
 8008078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800807c:	f000 fd82 	bl	8008b84 <__assert_func>
 8008080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008084:	6004      	str	r4, [r0, #0]
 8008086:	60c4      	str	r4, [r0, #12]
 8008088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800808c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008090:	b94c      	cbnz	r4, 80080a6 <__pow5mult+0x66>
 8008092:	f240 2171 	movw	r1, #625	; 0x271
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff12 	bl	8007ec0 <__i2b>
 800809c:	2300      	movs	r3, #0
 800809e:	f8c8 0008 	str.w	r0, [r8, #8]
 80080a2:	4604      	mov	r4, r0
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	07eb      	lsls	r3, r5, #31
 80080ac:	d50a      	bpl.n	80080c4 <__pow5mult+0x84>
 80080ae:	4639      	mov	r1, r7
 80080b0:	4622      	mov	r2, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ff1a 	bl	8007eec <__multiply>
 80080b8:	4639      	mov	r1, r7
 80080ba:	4680      	mov	r8, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff fdfd 	bl	8007cbc <_Bfree>
 80080c2:	4647      	mov	r7, r8
 80080c4:	106d      	asrs	r5, r5, #1
 80080c6:	d00b      	beq.n	80080e0 <__pow5mult+0xa0>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	b938      	cbnz	r0, 80080dc <__pow5mult+0x9c>
 80080cc:	4622      	mov	r2, r4
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff ff0b 	bl	8007eec <__multiply>
 80080d6:	6020      	str	r0, [r4, #0]
 80080d8:	f8c0 9000 	str.w	r9, [r0]
 80080dc:	4604      	mov	r4, r0
 80080de:	e7e4      	b.n	80080aa <__pow5mult+0x6a>
 80080e0:	4638      	mov	r0, r7
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e6:	bf00      	nop
 80080e8:	08009590 	.word	0x08009590
 80080ec:	080092de 	.word	0x080092de
 80080f0:	08009440 	.word	0x08009440

080080f4 <__lshift>:
 80080f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	6849      	ldr	r1, [r1, #4]
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008102:	68a3      	ldr	r3, [r4, #8]
 8008104:	4607      	mov	r7, r0
 8008106:	4691      	mov	r9, r2
 8008108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800810c:	f108 0601 	add.w	r6, r8, #1
 8008110:	42b3      	cmp	r3, r6
 8008112:	db0b      	blt.n	800812c <__lshift+0x38>
 8008114:	4638      	mov	r0, r7
 8008116:	f7ff fd91 	bl	8007c3c <_Balloc>
 800811a:	4605      	mov	r5, r0
 800811c:	b948      	cbnz	r0, 8008132 <__lshift+0x3e>
 800811e:	4602      	mov	r2, r0
 8008120:	4b2a      	ldr	r3, [pc, #168]	; (80081cc <__lshift+0xd8>)
 8008122:	482b      	ldr	r0, [pc, #172]	; (80081d0 <__lshift+0xdc>)
 8008124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008128:	f000 fd2c 	bl	8008b84 <__assert_func>
 800812c:	3101      	adds	r1, #1
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	e7ee      	b.n	8008110 <__lshift+0x1c>
 8008132:	2300      	movs	r3, #0
 8008134:	f100 0114 	add.w	r1, r0, #20
 8008138:	f100 0210 	add.w	r2, r0, #16
 800813c:	4618      	mov	r0, r3
 800813e:	4553      	cmp	r3, sl
 8008140:	db37      	blt.n	80081b2 <__lshift+0xbe>
 8008142:	6920      	ldr	r0, [r4, #16]
 8008144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008148:	f104 0314 	add.w	r3, r4, #20
 800814c:	f019 091f 	ands.w	r9, r9, #31
 8008150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008158:	d02f      	beq.n	80081ba <__lshift+0xc6>
 800815a:	f1c9 0e20 	rsb	lr, r9, #32
 800815e:	468a      	mov	sl, r1
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	fa02 f209 	lsl.w	r2, r2, r9
 800816a:	ea42 020c 	orr.w	r2, r2, ip
 800816e:	f84a 2b04 	str.w	r2, [sl], #4
 8008172:	f853 2b04 	ldr.w	r2, [r3], #4
 8008176:	4298      	cmp	r0, r3
 8008178:	fa22 fc0e 	lsr.w	ip, r2, lr
 800817c:	d8f2      	bhi.n	8008164 <__lshift+0x70>
 800817e:	1b03      	subs	r3, r0, r4
 8008180:	3b15      	subs	r3, #21
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	3304      	adds	r3, #4
 8008188:	f104 0215 	add.w	r2, r4, #21
 800818c:	4290      	cmp	r0, r2
 800818e:	bf38      	it	cc
 8008190:	2304      	movcc	r3, #4
 8008192:	f841 c003 	str.w	ip, [r1, r3]
 8008196:	f1bc 0f00 	cmp.w	ip, #0
 800819a:	d001      	beq.n	80081a0 <__lshift+0xac>
 800819c:	f108 0602 	add.w	r6, r8, #2
 80081a0:	3e01      	subs	r6, #1
 80081a2:	4638      	mov	r0, r7
 80081a4:	612e      	str	r6, [r5, #16]
 80081a6:	4621      	mov	r1, r4
 80081a8:	f7ff fd88 	bl	8007cbc <_Bfree>
 80081ac:	4628      	mov	r0, r5
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081b6:	3301      	adds	r3, #1
 80081b8:	e7c1      	b.n	800813e <__lshift+0x4a>
 80081ba:	3904      	subs	r1, #4
 80081bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80081c4:	4298      	cmp	r0, r3
 80081c6:	d8f9      	bhi.n	80081bc <__lshift+0xc8>
 80081c8:	e7ea      	b.n	80081a0 <__lshift+0xac>
 80081ca:	bf00      	nop
 80081cc:	08009350 	.word	0x08009350
 80081d0:	08009440 	.word	0x08009440

080081d4 <__mcmp>:
 80081d4:	b530      	push	{r4, r5, lr}
 80081d6:	6902      	ldr	r2, [r0, #16]
 80081d8:	690c      	ldr	r4, [r1, #16]
 80081da:	1b12      	subs	r2, r2, r4
 80081dc:	d10e      	bne.n	80081fc <__mcmp+0x28>
 80081de:	f100 0314 	add.w	r3, r0, #20
 80081e2:	3114      	adds	r1, #20
 80081e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d003      	beq.n	8008200 <__mcmp+0x2c>
 80081f8:	d305      	bcc.n	8008206 <__mcmp+0x32>
 80081fa:	2201      	movs	r2, #1
 80081fc:	4610      	mov	r0, r2
 80081fe:	bd30      	pop	{r4, r5, pc}
 8008200:	4283      	cmp	r3, r0
 8008202:	d3f3      	bcc.n	80081ec <__mcmp+0x18>
 8008204:	e7fa      	b.n	80081fc <__mcmp+0x28>
 8008206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800820a:	e7f7      	b.n	80081fc <__mcmp+0x28>

0800820c <__mdiff>:
 800820c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	460c      	mov	r4, r1
 8008212:	4606      	mov	r6, r0
 8008214:	4611      	mov	r1, r2
 8008216:	4620      	mov	r0, r4
 8008218:	4690      	mov	r8, r2
 800821a:	f7ff ffdb 	bl	80081d4 <__mcmp>
 800821e:	1e05      	subs	r5, r0, #0
 8008220:	d110      	bne.n	8008244 <__mdiff+0x38>
 8008222:	4629      	mov	r1, r5
 8008224:	4630      	mov	r0, r6
 8008226:	f7ff fd09 	bl	8007c3c <_Balloc>
 800822a:	b930      	cbnz	r0, 800823a <__mdiff+0x2e>
 800822c:	4b3a      	ldr	r3, [pc, #232]	; (8008318 <__mdiff+0x10c>)
 800822e:	4602      	mov	r2, r0
 8008230:	f240 2132 	movw	r1, #562	; 0x232
 8008234:	4839      	ldr	r0, [pc, #228]	; (800831c <__mdiff+0x110>)
 8008236:	f000 fca5 	bl	8008b84 <__assert_func>
 800823a:	2301      	movs	r3, #1
 800823c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	bfa4      	itt	ge
 8008246:	4643      	movge	r3, r8
 8008248:	46a0      	movge	r8, r4
 800824a:	4630      	mov	r0, r6
 800824c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008250:	bfa6      	itte	ge
 8008252:	461c      	movge	r4, r3
 8008254:	2500      	movge	r5, #0
 8008256:	2501      	movlt	r5, #1
 8008258:	f7ff fcf0 	bl	8007c3c <_Balloc>
 800825c:	b920      	cbnz	r0, 8008268 <__mdiff+0x5c>
 800825e:	4b2e      	ldr	r3, [pc, #184]	; (8008318 <__mdiff+0x10c>)
 8008260:	4602      	mov	r2, r0
 8008262:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008266:	e7e5      	b.n	8008234 <__mdiff+0x28>
 8008268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800826c:	6926      	ldr	r6, [r4, #16]
 800826e:	60c5      	str	r5, [r0, #12]
 8008270:	f104 0914 	add.w	r9, r4, #20
 8008274:	f108 0514 	add.w	r5, r8, #20
 8008278:	f100 0e14 	add.w	lr, r0, #20
 800827c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008284:	f108 0210 	add.w	r2, r8, #16
 8008288:	46f2      	mov	sl, lr
 800828a:	2100      	movs	r1, #0
 800828c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008294:	fa1f f883 	uxth.w	r8, r3
 8008298:	fa11 f18b 	uxtah	r1, r1, fp
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	eba1 0808 	sub.w	r8, r1, r8
 80082a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082aa:	fa1f f888 	uxth.w	r8, r8
 80082ae:	1419      	asrs	r1, r3, #16
 80082b0:	454e      	cmp	r6, r9
 80082b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082b6:	f84a 3b04 	str.w	r3, [sl], #4
 80082ba:	d8e7      	bhi.n	800828c <__mdiff+0x80>
 80082bc:	1b33      	subs	r3, r6, r4
 80082be:	3b15      	subs	r3, #21
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	3304      	adds	r3, #4
 80082c6:	3415      	adds	r4, #21
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	bf38      	it	cc
 80082cc:	2304      	movcc	r3, #4
 80082ce:	441d      	add	r5, r3
 80082d0:	4473      	add	r3, lr
 80082d2:	469e      	mov	lr, r3
 80082d4:	462e      	mov	r6, r5
 80082d6:	4566      	cmp	r6, ip
 80082d8:	d30e      	bcc.n	80082f8 <__mdiff+0xec>
 80082da:	f10c 0203 	add.w	r2, ip, #3
 80082de:	1b52      	subs	r2, r2, r5
 80082e0:	f022 0203 	bic.w	r2, r2, #3
 80082e4:	3d03      	subs	r5, #3
 80082e6:	45ac      	cmp	ip, r5
 80082e8:	bf38      	it	cc
 80082ea:	2200      	movcc	r2, #0
 80082ec:	441a      	add	r2, r3
 80082ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082f2:	b17b      	cbz	r3, 8008314 <__mdiff+0x108>
 80082f4:	6107      	str	r7, [r0, #16]
 80082f6:	e7a3      	b.n	8008240 <__mdiff+0x34>
 80082f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80082fc:	fa11 f288 	uxtah	r2, r1, r8
 8008300:	1414      	asrs	r4, r2, #16
 8008302:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008306:	b292      	uxth	r2, r2
 8008308:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800830c:	f84e 2b04 	str.w	r2, [lr], #4
 8008310:	1421      	asrs	r1, r4, #16
 8008312:	e7e0      	b.n	80082d6 <__mdiff+0xca>
 8008314:	3f01      	subs	r7, #1
 8008316:	e7ea      	b.n	80082ee <__mdiff+0xe2>
 8008318:	08009350 	.word	0x08009350
 800831c:	08009440 	.word	0x08009440

08008320 <__ulp>:
 8008320:	b082      	sub	sp, #8
 8008322:	ed8d 0b00 	vstr	d0, [sp]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	4912      	ldr	r1, [pc, #72]	; (8008374 <__ulp+0x54>)
 800832a:	4019      	ands	r1, r3
 800832c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008330:	2900      	cmp	r1, #0
 8008332:	dd05      	ble.n	8008340 <__ulp+0x20>
 8008334:	2200      	movs	r2, #0
 8008336:	460b      	mov	r3, r1
 8008338:	ec43 2b10 	vmov	d0, r2, r3
 800833c:	b002      	add	sp, #8
 800833e:	4770      	bx	lr
 8008340:	4249      	negs	r1, r1
 8008342:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008346:	ea4f 5021 	mov.w	r0, r1, asr #20
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	da04      	bge.n	800835e <__ulp+0x3e>
 8008354:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008358:	fa41 f300 	asr.w	r3, r1, r0
 800835c:	e7ec      	b.n	8008338 <__ulp+0x18>
 800835e:	f1a0 0114 	sub.w	r1, r0, #20
 8008362:	291e      	cmp	r1, #30
 8008364:	bfda      	itte	le
 8008366:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800836a:	fa20 f101 	lsrle.w	r1, r0, r1
 800836e:	2101      	movgt	r1, #1
 8008370:	460a      	mov	r2, r1
 8008372:	e7e1      	b.n	8008338 <__ulp+0x18>
 8008374:	7ff00000 	.word	0x7ff00000

08008378 <__b2d>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	6905      	ldr	r5, [r0, #16]
 800837c:	f100 0714 	add.w	r7, r0, #20
 8008380:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008384:	1f2e      	subs	r6, r5, #4
 8008386:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff fd48 	bl	8007e20 <__hi0bits>
 8008390:	f1c0 0320 	rsb	r3, r0, #32
 8008394:	280a      	cmp	r0, #10
 8008396:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008414 <__b2d+0x9c>
 800839a:	600b      	str	r3, [r1, #0]
 800839c:	dc14      	bgt.n	80083c8 <__b2d+0x50>
 800839e:	f1c0 0e0b 	rsb	lr, r0, #11
 80083a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80083a6:	42b7      	cmp	r7, r6
 80083a8:	ea41 030c 	orr.w	r3, r1, ip
 80083ac:	bf34      	ite	cc
 80083ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083b2:	2100      	movcs	r1, #0
 80083b4:	3015      	adds	r0, #21
 80083b6:	fa04 f000 	lsl.w	r0, r4, r0
 80083ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80083be:	ea40 0201 	orr.w	r2, r0, r1
 80083c2:	ec43 2b10 	vmov	d0, r2, r3
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c8:	42b7      	cmp	r7, r6
 80083ca:	bf3a      	itte	cc
 80083cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80083d4:	2100      	movcs	r1, #0
 80083d6:	380b      	subs	r0, #11
 80083d8:	d017      	beq.n	800840a <__b2d+0x92>
 80083da:	f1c0 0c20 	rsb	ip, r0, #32
 80083de:	fa04 f500 	lsl.w	r5, r4, r0
 80083e2:	42be      	cmp	r6, r7
 80083e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80083e8:	ea45 0504 	orr.w	r5, r5, r4
 80083ec:	bf8c      	ite	hi
 80083ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083f2:	2400      	movls	r4, #0
 80083f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083f8:	fa01 f000 	lsl.w	r0, r1, r0
 80083fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008400:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008404:	ea40 0204 	orr.w	r2, r0, r4
 8008408:	e7db      	b.n	80083c2 <__b2d+0x4a>
 800840a:	ea44 030c 	orr.w	r3, r4, ip
 800840e:	460a      	mov	r2, r1
 8008410:	e7d7      	b.n	80083c2 <__b2d+0x4a>
 8008412:	bf00      	nop
 8008414:	3ff00000 	.word	0x3ff00000

08008418 <__d2b>:
 8008418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800841c:	4689      	mov	r9, r1
 800841e:	2101      	movs	r1, #1
 8008420:	ec57 6b10 	vmov	r6, r7, d0
 8008424:	4690      	mov	r8, r2
 8008426:	f7ff fc09 	bl	8007c3c <_Balloc>
 800842a:	4604      	mov	r4, r0
 800842c:	b930      	cbnz	r0, 800843c <__d2b+0x24>
 800842e:	4602      	mov	r2, r0
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <__d2b+0xb0>)
 8008432:	4826      	ldr	r0, [pc, #152]	; (80084cc <__d2b+0xb4>)
 8008434:	f240 310a 	movw	r1, #778	; 0x30a
 8008438:	f000 fba4 	bl	8008b84 <__assert_func>
 800843c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008444:	bb35      	cbnz	r5, 8008494 <__d2b+0x7c>
 8008446:	2e00      	cmp	r6, #0
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	d028      	beq.n	800849e <__d2b+0x86>
 800844c:	4668      	mov	r0, sp
 800844e:	9600      	str	r6, [sp, #0]
 8008450:	f7ff fd06 	bl	8007e60 <__lo0bits>
 8008454:	9900      	ldr	r1, [sp, #0]
 8008456:	b300      	cbz	r0, 800849a <__d2b+0x82>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	f1c0 0320 	rsb	r3, r0, #32
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	430b      	orrs	r3, r1
 8008464:	40c2      	lsrs	r2, r0
 8008466:	6163      	str	r3, [r4, #20]
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	61a3      	str	r3, [r4, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bf14      	ite	ne
 8008472:	2202      	movne	r2, #2
 8008474:	2201      	moveq	r2, #1
 8008476:	6122      	str	r2, [r4, #16]
 8008478:	b1d5      	cbz	r5, 80084b0 <__d2b+0x98>
 800847a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800847e:	4405      	add	r5, r0
 8008480:	f8c9 5000 	str.w	r5, [r9]
 8008484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008488:	f8c8 0000 	str.w	r0, [r8]
 800848c:	4620      	mov	r0, r4
 800848e:	b003      	add	sp, #12
 8008490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	e7d5      	b.n	8008446 <__d2b+0x2e>
 800849a:	6161      	str	r1, [r4, #20]
 800849c:	e7e5      	b.n	800846a <__d2b+0x52>
 800849e:	a801      	add	r0, sp, #4
 80084a0:	f7ff fcde 	bl	8007e60 <__lo0bits>
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	6163      	str	r3, [r4, #20]
 80084a8:	2201      	movs	r2, #1
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	3020      	adds	r0, #32
 80084ae:	e7e3      	b.n	8008478 <__d2b+0x60>
 80084b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084b8:	f8c9 0000 	str.w	r0, [r9]
 80084bc:	6918      	ldr	r0, [r3, #16]
 80084be:	f7ff fcaf 	bl	8007e20 <__hi0bits>
 80084c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084c6:	e7df      	b.n	8008488 <__d2b+0x70>
 80084c8:	08009350 	.word	0x08009350
 80084cc:	08009440 	.word	0x08009440

080084d0 <__ratio>:
 80084d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	4688      	mov	r8, r1
 80084d6:	4669      	mov	r1, sp
 80084d8:	4681      	mov	r9, r0
 80084da:	f7ff ff4d 	bl	8008378 <__b2d>
 80084de:	a901      	add	r1, sp, #4
 80084e0:	4640      	mov	r0, r8
 80084e2:	ec55 4b10 	vmov	r4, r5, d0
 80084e6:	f7ff ff47 	bl	8008378 <__b2d>
 80084ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084f2:	eba3 0c02 	sub.w	ip, r3, r2
 80084f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008500:	ec51 0b10 	vmov	r0, r1, d0
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfd6      	itet	le
 8008508:	460a      	movle	r2, r1
 800850a:	462a      	movgt	r2, r5
 800850c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008510:	468b      	mov	fp, r1
 8008512:	462f      	mov	r7, r5
 8008514:	bfd4      	ite	le
 8008516:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800851a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800851e:	4620      	mov	r0, r4
 8008520:	ee10 2a10 	vmov	r2, s0
 8008524:	465b      	mov	r3, fp
 8008526:	4639      	mov	r1, r7
 8008528:	f7f8 f9b0 	bl	800088c <__aeabi_ddiv>
 800852c:	ec41 0b10 	vmov	d0, r0, r1
 8008530:	b003      	add	sp, #12
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008536 <__copybits>:
 8008536:	3901      	subs	r1, #1
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	1149      	asrs	r1, r1, #5
 800853c:	6914      	ldr	r4, [r2, #16]
 800853e:	3101      	adds	r1, #1
 8008540:	f102 0314 	add.w	r3, r2, #20
 8008544:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008548:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800854c:	1f05      	subs	r5, r0, #4
 800854e:	42a3      	cmp	r3, r4
 8008550:	d30c      	bcc.n	800856c <__copybits+0x36>
 8008552:	1aa3      	subs	r3, r4, r2
 8008554:	3b11      	subs	r3, #17
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	3211      	adds	r2, #17
 800855c:	42a2      	cmp	r2, r4
 800855e:	bf88      	it	hi
 8008560:	2300      	movhi	r3, #0
 8008562:	4418      	add	r0, r3
 8008564:	2300      	movs	r3, #0
 8008566:	4288      	cmp	r0, r1
 8008568:	d305      	bcc.n	8008576 <__copybits+0x40>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008570:	f845 6f04 	str.w	r6, [r5, #4]!
 8008574:	e7eb      	b.n	800854e <__copybits+0x18>
 8008576:	f840 3b04 	str.w	r3, [r0], #4
 800857a:	e7f4      	b.n	8008566 <__copybits+0x30>

0800857c <__any_on>:
 800857c:	f100 0214 	add.w	r2, r0, #20
 8008580:	6900      	ldr	r0, [r0, #16]
 8008582:	114b      	asrs	r3, r1, #5
 8008584:	4298      	cmp	r0, r3
 8008586:	b510      	push	{r4, lr}
 8008588:	db11      	blt.n	80085ae <__any_on+0x32>
 800858a:	dd0a      	ble.n	80085a2 <__any_on+0x26>
 800858c:	f011 011f 	ands.w	r1, r1, #31
 8008590:	d007      	beq.n	80085a2 <__any_on+0x26>
 8008592:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008596:	fa24 f001 	lsr.w	r0, r4, r1
 800859a:	fa00 f101 	lsl.w	r1, r0, r1
 800859e:	428c      	cmp	r4, r1
 80085a0:	d10b      	bne.n	80085ba <__any_on+0x3e>
 80085a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d803      	bhi.n	80085b2 <__any_on+0x36>
 80085aa:	2000      	movs	r0, #0
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	4603      	mov	r3, r0
 80085b0:	e7f7      	b.n	80085a2 <__any_on+0x26>
 80085b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085b6:	2900      	cmp	r1, #0
 80085b8:	d0f5      	beq.n	80085a6 <__any_on+0x2a>
 80085ba:	2001      	movs	r0, #1
 80085bc:	e7f6      	b.n	80085ac <__any_on+0x30>

080085be <_calloc_r>:
 80085be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c0:	fba1 2402 	umull	r2, r4, r1, r2
 80085c4:	b94c      	cbnz	r4, 80085da <_calloc_r+0x1c>
 80085c6:	4611      	mov	r1, r2
 80085c8:	9201      	str	r2, [sp, #4]
 80085ca:	f000 f87b 	bl	80086c4 <_malloc_r>
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	4605      	mov	r5, r0
 80085d2:	b930      	cbnz	r0, 80085e2 <_calloc_r+0x24>
 80085d4:	4628      	mov	r0, r5
 80085d6:	b003      	add	sp, #12
 80085d8:	bd30      	pop	{r4, r5, pc}
 80085da:	220c      	movs	r2, #12
 80085dc:	6002      	str	r2, [r0, #0]
 80085de:	2500      	movs	r5, #0
 80085e0:	e7f8      	b.n	80085d4 <_calloc_r+0x16>
 80085e2:	4621      	mov	r1, r4
 80085e4:	f7fc f878 	bl	80046d8 <memset>
 80085e8:	e7f4      	b.n	80085d4 <_calloc_r+0x16>
	...

080085ec <_free_r>:
 80085ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d044      	beq.n	800867c <_free_r+0x90>
 80085f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f6:	9001      	str	r0, [sp, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f1a1 0404 	sub.w	r4, r1, #4
 80085fe:	bfb8      	it	lt
 8008600:	18e4      	addlt	r4, r4, r3
 8008602:	f000 fb4d 	bl	8008ca0 <__malloc_lock>
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <_free_r+0x94>)
 8008608:	9801      	ldr	r0, [sp, #4]
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x30>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	b003      	add	sp, #12
 8008614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008618:	f000 bb48 	b.w	8008cac <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x46>
 8008620:	6825      	ldr	r5, [r4, #0]
 8008622:	1961      	adds	r1, r4, r5
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1949      	addeq	r1, r1, r5
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x22>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x50>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x46>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1855      	adds	r5, r2, r1
 8008640:	42a5      	cmp	r5, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x70>
 8008644:	6824      	ldr	r4, [r4, #0]
 8008646:	4421      	add	r1, r4
 8008648:	1854      	adds	r4, r2, r1
 800864a:	42a3      	cmp	r3, r4
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x26>
 8008650:	681c      	ldr	r4, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4421      	add	r1, r4
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x26>
 800865c:	d902      	bls.n	8008664 <_free_r+0x78>
 800865e:	230c      	movs	r3, #12
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x26>
 8008664:	6825      	ldr	r5, [r4, #0]
 8008666:	1961      	adds	r1, r4, r5
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x26>
 800867c:	b003      	add	sp, #12
 800867e:	bd30      	pop	{r4, r5, pc}
 8008680:	20012fd8 	.word	0x20012fd8

08008684 <sbrk_aligned>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4e0e      	ldr	r6, [pc, #56]	; (80086c0 <sbrk_aligned+0x3c>)
 8008688:	460c      	mov	r4, r1
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	b911      	cbnz	r1, 8008696 <sbrk_aligned+0x12>
 8008690:	f000 f9f2 	bl	8008a78 <_sbrk_r>
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f9ed 	bl	8008a78 <_sbrk_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d00a      	beq.n	80086b8 <sbrk_aligned+0x34>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d007      	beq.n	80086bc <sbrk_aligned+0x38>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f9e2 	bl	8008a78 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d101      	bne.n	80086bc <sbrk_aligned+0x38>
 80086b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086bc:	4620      	mov	r0, r4
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	20012fdc 	.word	0x20012fdc

080086c4 <_malloc_r>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	4607      	mov	r7, r0
 80086da:	db01      	blt.n	80086e0 <_malloc_r+0x1c>
 80086dc:	42a9      	cmp	r1, r5
 80086de:	d905      	bls.n	80086ec <_malloc_r+0x28>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	2600      	movs	r6, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ec:	4e2e      	ldr	r6, [pc, #184]	; (80087a8 <_malloc_r+0xe4>)
 80086ee:	f000 fad7 	bl	8008ca0 <__malloc_lock>
 80086f2:	6833      	ldr	r3, [r6, #0]
 80086f4:	461c      	mov	r4, r3
 80086f6:	bb34      	cbnz	r4, 8008746 <_malloc_r+0x82>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4638      	mov	r0, r7
 80086fc:	f7ff ffc2 	bl	8008684 <sbrk_aligned>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	4604      	mov	r4, r0
 8008704:	d14d      	bne.n	80087a2 <_malloc_r+0xde>
 8008706:	6834      	ldr	r4, [r6, #0]
 8008708:	4626      	mov	r6, r4
 800870a:	2e00      	cmp	r6, #0
 800870c:	d140      	bne.n	8008790 <_malloc_r+0xcc>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	4631      	mov	r1, r6
 8008712:	4638      	mov	r0, r7
 8008714:	eb04 0803 	add.w	r8, r4, r3
 8008718:	f000 f9ae 	bl	8008a78 <_sbrk_r>
 800871c:	4580      	cmp	r8, r0
 800871e:	d13a      	bne.n	8008796 <_malloc_r+0xd2>
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	3503      	adds	r5, #3
 8008724:	1a6d      	subs	r5, r5, r1
 8008726:	f025 0503 	bic.w	r5, r5, #3
 800872a:	3508      	adds	r5, #8
 800872c:	2d0c      	cmp	r5, #12
 800872e:	bf38      	it	cc
 8008730:	250c      	movcc	r5, #12
 8008732:	4629      	mov	r1, r5
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <sbrk_aligned>
 800873a:	3001      	adds	r0, #1
 800873c:	d02b      	beq.n	8008796 <_malloc_r+0xd2>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	442b      	add	r3, r5
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	e00e      	b.n	8008764 <_malloc_r+0xa0>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	1b52      	subs	r2, r2, r5
 800874a:	d41e      	bmi.n	800878a <_malloc_r+0xc6>
 800874c:	2a0b      	cmp	r2, #11
 800874e:	d916      	bls.n	800877e <_malloc_r+0xba>
 8008750:	1961      	adds	r1, r4, r5
 8008752:	42a3      	cmp	r3, r4
 8008754:	6025      	str	r5, [r4, #0]
 8008756:	bf18      	it	ne
 8008758:	6059      	strne	r1, [r3, #4]
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	bf08      	it	eq
 800875e:	6031      	streq	r1, [r6, #0]
 8008760:	5162      	str	r2, [r4, r5]
 8008762:	604b      	str	r3, [r1, #4]
 8008764:	4638      	mov	r0, r7
 8008766:	f104 060b 	add.w	r6, r4, #11
 800876a:	f000 fa9f 	bl	8008cac <__malloc_unlock>
 800876e:	f026 0607 	bic.w	r6, r6, #7
 8008772:	1d23      	adds	r3, r4, #4
 8008774:	1af2      	subs	r2, r6, r3
 8008776:	d0b6      	beq.n	80086e6 <_malloc_r+0x22>
 8008778:	1b9b      	subs	r3, r3, r6
 800877a:	50a3      	str	r3, [r4, r2]
 800877c:	e7b3      	b.n	80086e6 <_malloc_r+0x22>
 800877e:	6862      	ldr	r2, [r4, #4]
 8008780:	42a3      	cmp	r3, r4
 8008782:	bf0c      	ite	eq
 8008784:	6032      	streq	r2, [r6, #0]
 8008786:	605a      	strne	r2, [r3, #4]
 8008788:	e7ec      	b.n	8008764 <_malloc_r+0xa0>
 800878a:	4623      	mov	r3, r4
 800878c:	6864      	ldr	r4, [r4, #4]
 800878e:	e7b2      	b.n	80086f6 <_malloc_r+0x32>
 8008790:	4634      	mov	r4, r6
 8008792:	6876      	ldr	r6, [r6, #4]
 8008794:	e7b9      	b.n	800870a <_malloc_r+0x46>
 8008796:	230c      	movs	r3, #12
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4638      	mov	r0, r7
 800879c:	f000 fa86 	bl	8008cac <__malloc_unlock>
 80087a0:	e7a1      	b.n	80086e6 <_malloc_r+0x22>
 80087a2:	6025      	str	r5, [r4, #0]
 80087a4:	e7de      	b.n	8008764 <_malloc_r+0xa0>
 80087a6:	bf00      	nop
 80087a8:	20012fd8 	.word	0x20012fd8

080087ac <__ssputs_r>:
 80087ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b0:	688e      	ldr	r6, [r1, #8]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	4682      	mov	sl, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4690      	mov	r8, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	d838      	bhi.n	8008830 <__ssputs_r+0x84>
 80087be:	898a      	ldrh	r2, [r1, #12]
 80087c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c4:	d032      	beq.n	800882c <__ssputs_r+0x80>
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	6909      	ldr	r1, [r1, #16]
 80087ca:	eba5 0901 	sub.w	r9, r5, r1
 80087ce:	6965      	ldr	r5, [r4, #20]
 80087d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087d8:	3301      	adds	r3, #1
 80087da:	444b      	add	r3, r9
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	429d      	cmp	r5, r3
 80087e0:	bf38      	it	cc
 80087e2:	461d      	movcc	r5, r3
 80087e4:	0553      	lsls	r3, r2, #21
 80087e6:	d531      	bpl.n	800884c <__ssputs_r+0xa0>
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7ff ff6b 	bl	80086c4 <_malloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	b950      	cbnz	r0, 8008808 <__ssputs_r+0x5c>
 80087f2:	230c      	movs	r3, #12
 80087f4:	f8ca 3000 	str.w	r3, [sl]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	6921      	ldr	r1, [r4, #16]
 800880a:	464a      	mov	r2, r9
 800880c:	f7fb ff56 	bl	80046bc <memcpy>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	6126      	str	r6, [r4, #16]
 800881e:	6165      	str	r5, [r4, #20]
 8008820:	444e      	add	r6, r9
 8008822:	eba5 0509 	sub.w	r5, r5, r9
 8008826:	6026      	str	r6, [r4, #0]
 8008828:	60a5      	str	r5, [r4, #8]
 800882a:	463e      	mov	r6, r7
 800882c:	42be      	cmp	r6, r7
 800882e:	d900      	bls.n	8008832 <__ssputs_r+0x86>
 8008830:	463e      	mov	r6, r7
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	4632      	mov	r2, r6
 8008836:	4641      	mov	r1, r8
 8008838:	f000 fa18 	bl	8008c6c <memmove>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	1b9b      	subs	r3, r3, r6
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	4433      	add	r3, r6
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e7db      	b.n	8008804 <__ssputs_r+0x58>
 800884c:	462a      	mov	r2, r5
 800884e:	f000 fa33 	bl	8008cb8 <_realloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d1e1      	bne.n	800881c <__ssputs_r+0x70>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4650      	mov	r0, sl
 800885c:	f7ff fec6 	bl	80085ec <_free_r>
 8008860:	e7c7      	b.n	80087f2 <__ssputs_r+0x46>
	...

08008864 <_svfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4698      	mov	r8, r3
 800886a:	898b      	ldrh	r3, [r1, #12]
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	b09d      	sub	sp, #116	; 0x74
 8008870:	4607      	mov	r7, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4614      	mov	r4, r2
 8008876:	d50e      	bpl.n	8008896 <_svfiprintf_r+0x32>
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	b963      	cbnz	r3, 8008896 <_svfiprintf_r+0x32>
 800887c:	2140      	movs	r1, #64	; 0x40
 800887e:	f7ff ff21 	bl	80086c4 <_malloc_r>
 8008882:	6028      	str	r0, [r5, #0]
 8008884:	6128      	str	r0, [r5, #16]
 8008886:	b920      	cbnz	r0, 8008892 <_svfiprintf_r+0x2e>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008890:	e0d1      	b.n	8008a36 <_svfiprintf_r+0x1d2>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	616b      	str	r3, [r5, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	9309      	str	r3, [sp, #36]	; 0x24
 800889a:	2320      	movs	r3, #32
 800889c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a4:	2330      	movs	r3, #48	; 0x30
 80088a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a50 <_svfiprintf_r+0x1ec>
 80088aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ae:	f04f 0901 	mov.w	r9, #1
 80088b2:	4623      	mov	r3, r4
 80088b4:	469a      	mov	sl, r3
 80088b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ba:	b10a      	cbz	r2, 80088c0 <_svfiprintf_r+0x5c>
 80088bc:	2a25      	cmp	r2, #37	; 0x25
 80088be:	d1f9      	bne.n	80088b4 <_svfiprintf_r+0x50>
 80088c0:	ebba 0b04 	subs.w	fp, sl, r4
 80088c4:	d00b      	beq.n	80088de <_svfiprintf_r+0x7a>
 80088c6:	465b      	mov	r3, fp
 80088c8:	4622      	mov	r2, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff6d 	bl	80087ac <__ssputs_r>
 80088d2:	3001      	adds	r0, #1
 80088d4:	f000 80aa 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088da:	445a      	add	r2, fp
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80a2 	beq.w	8008a2c <_svfiprintf_r+0x1c8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f2:	f10a 0a01 	add.w	sl, sl, #1
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008900:	4654      	mov	r4, sl
 8008902:	2205      	movs	r2, #5
 8008904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008908:	4851      	ldr	r0, [pc, #324]	; (8008a50 <_svfiprintf_r+0x1ec>)
 800890a:	f7f7 fc89 	bl	8000220 <memchr>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	b9d8      	cbnz	r0, 800894a <_svfiprintf_r+0xe6>
 8008912:	06d0      	lsls	r0, r2, #27
 8008914:	bf44      	itt	mi
 8008916:	2320      	movmi	r3, #32
 8008918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891c:	0711      	lsls	r1, r2, #28
 800891e:	bf44      	itt	mi
 8008920:	232b      	movmi	r3, #43	; 0x2b
 8008922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008926:	f89a 3000 	ldrb.w	r3, [sl]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d015      	beq.n	800895a <_svfiprintf_r+0xf6>
 800892e:	9a07      	ldr	r2, [sp, #28]
 8008930:	4654      	mov	r4, sl
 8008932:	2000      	movs	r0, #0
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4621      	mov	r1, r4
 800893a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893e:	3b30      	subs	r3, #48	; 0x30
 8008940:	2b09      	cmp	r3, #9
 8008942:	d94e      	bls.n	80089e2 <_svfiprintf_r+0x17e>
 8008944:	b1b0      	cbz	r0, 8008974 <_svfiprintf_r+0x110>
 8008946:	9207      	str	r2, [sp, #28]
 8008948:	e014      	b.n	8008974 <_svfiprintf_r+0x110>
 800894a:	eba0 0308 	sub.w	r3, r0, r8
 800894e:	fa09 f303 	lsl.w	r3, r9, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	46a2      	mov	sl, r4
 8008958:	e7d2      	b.n	8008900 <_svfiprintf_r+0x9c>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	1d19      	adds	r1, r3, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9103      	str	r1, [sp, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfbb      	ittet	lt
 8008966:	425b      	neglt	r3, r3
 8008968:	f042 0202 	orrlt.w	r2, r2, #2
 800896c:	9307      	strge	r3, [sp, #28]
 800896e:	9307      	strlt	r3, [sp, #28]
 8008970:	bfb8      	it	lt
 8008972:	9204      	strlt	r2, [sp, #16]
 8008974:	7823      	ldrb	r3, [r4, #0]
 8008976:	2b2e      	cmp	r3, #46	; 0x2e
 8008978:	d10c      	bne.n	8008994 <_svfiprintf_r+0x130>
 800897a:	7863      	ldrb	r3, [r4, #1]
 800897c:	2b2a      	cmp	r3, #42	; 0x2a
 800897e:	d135      	bne.n	80089ec <_svfiprintf_r+0x188>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d1a      	adds	r2, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9203      	str	r2, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfb8      	it	lt
 800898c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008990:	3402      	adds	r4, #2
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a60 <_svfiprintf_r+0x1fc>
 8008998:	7821      	ldrb	r1, [r4, #0]
 800899a:	2203      	movs	r2, #3
 800899c:	4650      	mov	r0, sl
 800899e:	f7f7 fc3f 	bl	8000220 <memchr>
 80089a2:	b140      	cbz	r0, 80089b6 <_svfiprintf_r+0x152>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	eba0 000a 	sub.w	r0, r0, sl
 80089aa:	fa03 f000 	lsl.w	r0, r3, r0
 80089ae:	9b04      	ldr	r3, [sp, #16]
 80089b0:	4303      	orrs	r3, r0
 80089b2:	3401      	adds	r4, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4826      	ldr	r0, [pc, #152]	; (8008a54 <_svfiprintf_r+0x1f0>)
 80089bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c0:	2206      	movs	r2, #6
 80089c2:	f7f7 fc2d 	bl	8000220 <memchr>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d038      	beq.n	8008a3c <_svfiprintf_r+0x1d8>
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <_svfiprintf_r+0x1f4>)
 80089cc:	bb1b      	cbnz	r3, 8008a16 <_svfiprintf_r+0x1b2>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	f023 0307 	bic.w	r3, r3, #7
 80089d6:	3308      	adds	r3, #8
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	4433      	add	r3, r6
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	e767      	b.n	80088b2 <_svfiprintf_r+0x4e>
 80089e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e6:	460c      	mov	r4, r1
 80089e8:	2001      	movs	r0, #1
 80089ea:	e7a5      	b.n	8008938 <_svfiprintf_r+0xd4>
 80089ec:	2300      	movs	r3, #0
 80089ee:	3401      	adds	r4, #1
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f04f 0c0a 	mov.w	ip, #10
 80089f8:	4620      	mov	r0, r4
 80089fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fe:	3a30      	subs	r2, #48	; 0x30
 8008a00:	2a09      	cmp	r2, #9
 8008a02:	d903      	bls.n	8008a0c <_svfiprintf_r+0x1a8>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0c5      	beq.n	8008994 <_svfiprintf_r+0x130>
 8008a08:	9105      	str	r1, [sp, #20]
 8008a0a:	e7c3      	b.n	8008994 <_svfiprintf_r+0x130>
 8008a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a10:	4604      	mov	r4, r0
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f0      	b.n	80089f8 <_svfiprintf_r+0x194>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7fb ff01 	bl	8004828 <_printf_float>
 8008a26:	1c42      	adds	r2, r0, #1
 8008a28:	4606      	mov	r6, r0
 8008a2a:	d1d6      	bne.n	80089da <_svfiprintf_r+0x176>
 8008a2c:	89ab      	ldrh	r3, [r5, #12]
 8008a2e:	065b      	lsls	r3, r3, #25
 8008a30:	f53f af2c 	bmi.w	800888c <_svfiprintf_r+0x28>
 8008a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a36:	b01d      	add	sp, #116	; 0x74
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <_svfiprintf_r+0x1f8>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7fc f992 	bl	8004d70 <_printf_i>
 8008a4c:	e7eb      	b.n	8008a26 <_svfiprintf_r+0x1c2>
 8008a4e:	bf00      	nop
 8008a50:	0800959c 	.word	0x0800959c
 8008a54:	080095a6 	.word	0x080095a6
 8008a58:	08004829 	.word	0x08004829
 8008a5c:	080087ad 	.word	0x080087ad
 8008a60:	080095a2 	.word	0x080095a2
 8008a64:	00000000 	.word	0x00000000

08008a68 <nan>:
 8008a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a70 <nan+0x8>
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00000000 	.word	0x00000000
 8008a74:	7ff80000 	.word	0x7ff80000

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f9 f8c0 	bl	8001c08 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20012fe0 	.word	0x20012fe0

08008a98 <__sread>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa0:	f000 fa92 	bl	8008fc8 <_read_r>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	bfab      	itete	ge
 8008aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8008aac:	181b      	addge	r3, r3, r0
 8008aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ab2:	bfac      	ite	ge
 8008ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ab6:	81a3      	strhlt	r3, [r4, #12]
 8008ab8:	bd10      	pop	{r4, pc}

08008aba <__swrite>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	461f      	mov	r7, r3
 8008ac0:	898b      	ldrh	r3, [r1, #12]
 8008ac2:	05db      	lsls	r3, r3, #23
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4616      	mov	r6, r2
 8008aca:	d505      	bpl.n	8008ad8 <__swrite+0x1e>
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f000 f8b8 	bl	8008c48 <_lseek_r>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aee:	f000 b837 	b.w	8008b60 <_write_r>

08008af2 <__sseek>:
 8008af2:	b510      	push	{r4, lr}
 8008af4:	460c      	mov	r4, r1
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 f8a5 	bl	8008c48 <_lseek_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	bf15      	itete	ne
 8008b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b0e:	81a3      	strheq	r3, [r4, #12]
 8008b10:	bf18      	it	ne
 8008b12:	81a3      	strhne	r3, [r4, #12]
 8008b14:	bd10      	pop	{r4, pc}

08008b16 <__sclose>:
 8008b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1a:	f000 b851 	b.w	8008bc0 <_close_r>

08008b1e <strncmp>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	b17a      	cbz	r2, 8008b42 <strncmp+0x24>
 8008b22:	4603      	mov	r3, r0
 8008b24:	3901      	subs	r1, #1
 8008b26:	1884      	adds	r4, r0, r2
 8008b28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008b30:	4290      	cmp	r0, r2
 8008b32:	d101      	bne.n	8008b38 <strncmp+0x1a>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d101      	bne.n	8008b3c <strncmp+0x1e>
 8008b38:	1a80      	subs	r0, r0, r2
 8008b3a:	bd10      	pop	{r4, pc}
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d1f3      	bne.n	8008b28 <strncmp+0xa>
 8008b40:	e7fa      	b.n	8008b38 <strncmp+0x1a>
 8008b42:	4610      	mov	r0, r2
 8008b44:	e7f9      	b.n	8008b3a <strncmp+0x1c>

08008b46 <__ascii_wctomb>:
 8008b46:	b149      	cbz	r1, 8008b5c <__ascii_wctomb+0x16>
 8008b48:	2aff      	cmp	r2, #255	; 0xff
 8008b4a:	bf85      	ittet	hi
 8008b4c:	238a      	movhi	r3, #138	; 0x8a
 8008b4e:	6003      	strhi	r3, [r0, #0]
 8008b50:	700a      	strbls	r2, [r1, #0]
 8008b52:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b56:	bf98      	it	ls
 8008b58:	2001      	movls	r0, #1
 8008b5a:	4770      	bx	lr
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4770      	bx	lr

08008b60 <_write_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	; (8008b80 <_write_r+0x20>)
 8008b64:	4604      	mov	r4, r0
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f7f8 fff9 	bl	8001b66 <_write>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_write_r+0x1e>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_write_r+0x1e>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20012fe0 	.word	0x20012fe0

08008b84 <__assert_func>:
 8008b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b86:	4614      	mov	r4, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <__assert_func+0x2c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	68d8      	ldr	r0, [r3, #12]
 8008b92:	b14c      	cbz	r4, 8008ba8 <__assert_func+0x24>
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <__assert_func+0x30>)
 8008b96:	9100      	str	r1, [sp, #0]
 8008b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b9c:	4906      	ldr	r1, [pc, #24]	; (8008bb8 <__assert_func+0x34>)
 8008b9e:	462b      	mov	r3, r5
 8008ba0:	f000 f81e 	bl	8008be0 <fiprintf>
 8008ba4:	f000 fa22 	bl	8008fec <abort>
 8008ba8:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <__assert_func+0x38>)
 8008baa:	461c      	mov	r4, r3
 8008bac:	e7f3      	b.n	8008b96 <__assert_func+0x12>
 8008bae:	bf00      	nop
 8008bb0:	20000014 	.word	0x20000014
 8008bb4:	080095ad 	.word	0x080095ad
 8008bb8:	080095ba 	.word	0x080095ba
 8008bbc:	080095e8 	.word	0x080095e8

08008bc0 <_close_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d06      	ldr	r5, [pc, #24]	; (8008bdc <_close_r+0x1c>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	f7f8 ffe7 	bl	8001b9e <_close>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_close_r+0x1a>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_close_r+0x1a>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20012fe0 	.word	0x20012fe0

08008be0 <fiprintf>:
 8008be0:	b40e      	push	{r1, r2, r3}
 8008be2:	b503      	push	{r0, r1, lr}
 8008be4:	4601      	mov	r1, r0
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	4805      	ldr	r0, [pc, #20]	; (8008c00 <fiprintf+0x20>)
 8008bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f000 f8b9 	bl	8008d68 <_vfiprintf_r>
 8008bf6:	b002      	add	sp, #8
 8008bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	4770      	bx	lr
 8008c00:	20000014 	.word	0x20000014

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	; (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7f8 ffd0 	bl	8001bb6 <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	20012fe0 	.word	0x20012fe0

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 ffcf 	bl	8001bd6 <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20012fe0 	.word	0x20012fe0

08008c48 <_lseek_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	; (8008c68 <_lseek_r+0x20>)
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	602a      	str	r2, [r5, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7f8 ffc8 	bl	8001bec <_lseek>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_lseek_r+0x1e>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_lseek_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20012fe0 	.word	0x20012fe0

08008c6c <memmove>:
 8008c6c:	4288      	cmp	r0, r1
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	eb01 0402 	add.w	r4, r1, r2
 8008c74:	d902      	bls.n	8008c7c <memmove+0x10>
 8008c76:	4284      	cmp	r4, r0
 8008c78:	4623      	mov	r3, r4
 8008c7a:	d807      	bhi.n	8008c8c <memmove+0x20>
 8008c7c:	1e43      	subs	r3, r0, #1
 8008c7e:	42a1      	cmp	r1, r4
 8008c80:	d008      	beq.n	8008c94 <memmove+0x28>
 8008c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c8a:	e7f8      	b.n	8008c7e <memmove+0x12>
 8008c8c:	4402      	add	r2, r0
 8008c8e:	4601      	mov	r1, r0
 8008c90:	428a      	cmp	r2, r1
 8008c92:	d100      	bne.n	8008c96 <memmove+0x2a>
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c9e:	e7f7      	b.n	8008c90 <memmove+0x24>

08008ca0 <__malloc_lock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__malloc_lock+0x8>)
 8008ca2:	f7fe bf4a 	b.w	8007b3a <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20012fd4 	.word	0x20012fd4

08008cac <__malloc_unlock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_unlock+0x8>)
 8008cae:	f7fe bf45 	b.w	8007b3c <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20012fd4 	.word	0x20012fd4

08008cb8 <_realloc_r>:
 8008cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	460e      	mov	r6, r1
 8008cc2:	b921      	cbnz	r1, 8008cce <_realloc_r+0x16>
 8008cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	4611      	mov	r1, r2
 8008cca:	f7ff bcfb 	b.w	80086c4 <_malloc_r>
 8008cce:	b92a      	cbnz	r2, 8008cdc <_realloc_r+0x24>
 8008cd0:	f7ff fc8c 	bl	80085ec <_free_r>
 8008cd4:	4625      	mov	r5, r4
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	f000 f98d 	bl	8008ffa <_malloc_usable_size_r>
 8008ce0:	4284      	cmp	r4, r0
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	d802      	bhi.n	8008cec <_realloc_r+0x34>
 8008ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cea:	d812      	bhi.n	8008d12 <_realloc_r+0x5a>
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7ff fce8 	bl	80086c4 <_malloc_r>
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d0ed      	beq.n	8008cd6 <_realloc_r+0x1e>
 8008cfa:	42bc      	cmp	r4, r7
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4631      	mov	r1, r6
 8008d00:	bf28      	it	cs
 8008d02:	463a      	movcs	r2, r7
 8008d04:	f7fb fcda 	bl	80046bc <memcpy>
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	f7ff fc6e 	bl	80085ec <_free_r>
 8008d10:	e7e1      	b.n	8008cd6 <_realloc_r+0x1e>
 8008d12:	4635      	mov	r5, r6
 8008d14:	e7df      	b.n	8008cd6 <_realloc_r+0x1e>

08008d16 <__sfputc_r>:
 8008d16:	6893      	ldr	r3, [r2, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	b410      	push	{r4}
 8008d1e:	6093      	str	r3, [r2, #8]
 8008d20:	da08      	bge.n	8008d34 <__sfputc_r+0x1e>
 8008d22:	6994      	ldr	r4, [r2, #24]
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	db01      	blt.n	8008d2c <__sfputc_r+0x16>
 8008d28:	290a      	cmp	r1, #10
 8008d2a:	d103      	bne.n	8008d34 <__sfputc_r+0x1e>
 8008d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d30:	f7fd ba9e 	b.w	8006270 <__swbuf_r>
 8008d34:	6813      	ldr	r3, [r2, #0]
 8008d36:	1c58      	adds	r0, r3, #1
 8008d38:	6010      	str	r0, [r2, #0]
 8008d3a:	7019      	strb	r1, [r3, #0]
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <__sfputs_r>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	18d5      	adds	r5, r2, r3
 8008d4e:	42ac      	cmp	r4, r5
 8008d50:	d101      	bne.n	8008d56 <__sfputs_r+0x12>
 8008d52:	2000      	movs	r0, #0
 8008d54:	e007      	b.n	8008d66 <__sfputs_r+0x22>
 8008d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ffda 	bl	8008d16 <__sfputc_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d1f3      	bne.n	8008d4e <__sfputs_r+0xa>
 8008d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d68 <_vfiprintf_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	b09d      	sub	sp, #116	; 0x74
 8008d70:	4614      	mov	r4, r2
 8008d72:	4698      	mov	r8, r3
 8008d74:	4606      	mov	r6, r0
 8008d76:	b118      	cbz	r0, 8008d80 <_vfiprintf_r+0x18>
 8008d78:	6983      	ldr	r3, [r0, #24]
 8008d7a:	b90b      	cbnz	r3, 8008d80 <_vfiprintf_r+0x18>
 8008d7c:	f7fe facc 	bl	8007318 <__sinit>
 8008d80:	4b89      	ldr	r3, [pc, #548]	; (8008fa8 <_vfiprintf_r+0x240>)
 8008d82:	429d      	cmp	r5, r3
 8008d84:	d11b      	bne.n	8008dbe <_vfiprintf_r+0x56>
 8008d86:	6875      	ldr	r5, [r6, #4]
 8008d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8a:	07d9      	lsls	r1, r3, #31
 8008d8c:	d405      	bmi.n	8008d9a <_vfiprintf_r+0x32>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	059a      	lsls	r2, r3, #22
 8008d92:	d402      	bmi.n	8008d9a <_vfiprintf_r+0x32>
 8008d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d96:	f7fe fed0 	bl	8007b3a <__retarget_lock_acquire_recursive>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	071b      	lsls	r3, r3, #28
 8008d9e:	d501      	bpl.n	8008da4 <_vfiprintf_r+0x3c>
 8008da0:	692b      	ldr	r3, [r5, #16]
 8008da2:	b9eb      	cbnz	r3, 8008de0 <_vfiprintf_r+0x78>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7fd fab4 	bl	8006314 <__swsetup_r>
 8008dac:	b1c0      	cbz	r0, 8008de0 <_vfiprintf_r+0x78>
 8008dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db0:	07dc      	lsls	r4, r3, #31
 8008db2:	d50e      	bpl.n	8008dd2 <_vfiprintf_r+0x6a>
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008db8:	b01d      	add	sp, #116	; 0x74
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbe:	4b7b      	ldr	r3, [pc, #492]	; (8008fac <_vfiprintf_r+0x244>)
 8008dc0:	429d      	cmp	r5, r3
 8008dc2:	d101      	bne.n	8008dc8 <_vfiprintf_r+0x60>
 8008dc4:	68b5      	ldr	r5, [r6, #8]
 8008dc6:	e7df      	b.n	8008d88 <_vfiprintf_r+0x20>
 8008dc8:	4b79      	ldr	r3, [pc, #484]	; (8008fb0 <_vfiprintf_r+0x248>)
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	bf08      	it	eq
 8008dce:	68f5      	ldreq	r5, [r6, #12]
 8008dd0:	e7da      	b.n	8008d88 <_vfiprintf_r+0x20>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	0598      	lsls	r0, r3, #22
 8008dd6:	d4ed      	bmi.n	8008db4 <_vfiprintf_r+0x4c>
 8008dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dda:	f7fe feaf 	bl	8007b3c <__retarget_lock_release_recursive>
 8008dde:	e7e9      	b.n	8008db4 <_vfiprintf_r+0x4c>
 8008de0:	2300      	movs	r3, #0
 8008de2:	9309      	str	r3, [sp, #36]	; 0x24
 8008de4:	2320      	movs	r3, #32
 8008de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dee:	2330      	movs	r3, #48	; 0x30
 8008df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fb4 <_vfiprintf_r+0x24c>
 8008df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008df8:	f04f 0901 	mov.w	r9, #1
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	469a      	mov	sl, r3
 8008e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e04:	b10a      	cbz	r2, 8008e0a <_vfiprintf_r+0xa2>
 8008e06:	2a25      	cmp	r2, #37	; 0x25
 8008e08:	d1f9      	bne.n	8008dfe <_vfiprintf_r+0x96>
 8008e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e0e:	d00b      	beq.n	8008e28 <_vfiprintf_r+0xc0>
 8008e10:	465b      	mov	r3, fp
 8008e12:	4622      	mov	r2, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ff94 	bl	8008d44 <__sfputs_r>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f000 80aa 	beq.w	8008f76 <_vfiprintf_r+0x20e>
 8008e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e24:	445a      	add	r2, fp
 8008e26:	9209      	str	r2, [sp, #36]	; 0x24
 8008e28:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80a2 	beq.w	8008f76 <_vfiprintf_r+0x20e>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3c:	f10a 0a01 	add.w	sl, sl, #1
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	9307      	str	r3, [sp, #28]
 8008e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e48:	931a      	str	r3, [sp, #104]	; 0x68
 8008e4a:	4654      	mov	r4, sl
 8008e4c:	2205      	movs	r2, #5
 8008e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e52:	4858      	ldr	r0, [pc, #352]	; (8008fb4 <_vfiprintf_r+0x24c>)
 8008e54:	f7f7 f9e4 	bl	8000220 <memchr>
 8008e58:	9a04      	ldr	r2, [sp, #16]
 8008e5a:	b9d8      	cbnz	r0, 8008e94 <_vfiprintf_r+0x12c>
 8008e5c:	06d1      	lsls	r1, r2, #27
 8008e5e:	bf44      	itt	mi
 8008e60:	2320      	movmi	r3, #32
 8008e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e66:	0713      	lsls	r3, r2, #28
 8008e68:	bf44      	itt	mi
 8008e6a:	232b      	movmi	r3, #43	; 0x2b
 8008e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e70:	f89a 3000 	ldrb.w	r3, [sl]
 8008e74:	2b2a      	cmp	r3, #42	; 0x2a
 8008e76:	d015      	beq.n	8008ea4 <_vfiprintf_r+0x13c>
 8008e78:	9a07      	ldr	r2, [sp, #28]
 8008e7a:	4654      	mov	r4, sl
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f04f 0c0a 	mov.w	ip, #10
 8008e82:	4621      	mov	r1, r4
 8008e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e88:	3b30      	subs	r3, #48	; 0x30
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	d94e      	bls.n	8008f2c <_vfiprintf_r+0x1c4>
 8008e8e:	b1b0      	cbz	r0, 8008ebe <_vfiprintf_r+0x156>
 8008e90:	9207      	str	r2, [sp, #28]
 8008e92:	e014      	b.n	8008ebe <_vfiprintf_r+0x156>
 8008e94:	eba0 0308 	sub.w	r3, r0, r8
 8008e98:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	46a2      	mov	sl, r4
 8008ea2:	e7d2      	b.n	8008e4a <_vfiprintf_r+0xe2>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	1d19      	adds	r1, r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	9103      	str	r1, [sp, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bfbb      	ittet	lt
 8008eb0:	425b      	neglt	r3, r3
 8008eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb6:	9307      	strge	r3, [sp, #28]
 8008eb8:	9307      	strlt	r3, [sp, #28]
 8008eba:	bfb8      	it	lt
 8008ebc:	9204      	strlt	r2, [sp, #16]
 8008ebe:	7823      	ldrb	r3, [r4, #0]
 8008ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec2:	d10c      	bne.n	8008ede <_vfiprintf_r+0x176>
 8008ec4:	7863      	ldrb	r3, [r4, #1]
 8008ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec8:	d135      	bne.n	8008f36 <_vfiprintf_r+0x1ce>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	1d1a      	adds	r2, r3, #4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	9203      	str	r2, [sp, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bfb8      	it	lt
 8008ed6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008eda:	3402      	adds	r4, #2
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fc4 <_vfiprintf_r+0x25c>
 8008ee2:	7821      	ldrb	r1, [r4, #0]
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	f7f7 f99a 	bl	8000220 <memchr>
 8008eec:	b140      	cbz	r0, 8008f00 <_vfiprintf_r+0x198>
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	eba0 000a 	sub.w	r0, r0, sl
 8008ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ef8:	9b04      	ldr	r3, [sp, #16]
 8008efa:	4303      	orrs	r3, r0
 8008efc:	3401      	adds	r4, #1
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	482c      	ldr	r0, [pc, #176]	; (8008fb8 <_vfiprintf_r+0x250>)
 8008f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f0a:	2206      	movs	r2, #6
 8008f0c:	f7f7 f988 	bl	8000220 <memchr>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d03f      	beq.n	8008f94 <_vfiprintf_r+0x22c>
 8008f14:	4b29      	ldr	r3, [pc, #164]	; (8008fbc <_vfiprintf_r+0x254>)
 8008f16:	bb1b      	cbnz	r3, 8008f60 <_vfiprintf_r+0x1f8>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	3307      	adds	r3, #7
 8008f1c:	f023 0307 	bic.w	r3, r3, #7
 8008f20:	3308      	adds	r3, #8
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	443b      	add	r3, r7
 8008f28:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2a:	e767      	b.n	8008dfc <_vfiprintf_r+0x94>
 8008f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f30:	460c      	mov	r4, r1
 8008f32:	2001      	movs	r0, #1
 8008f34:	e7a5      	b.n	8008e82 <_vfiprintf_r+0x11a>
 8008f36:	2300      	movs	r3, #0
 8008f38:	3401      	adds	r4, #1
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	4620      	mov	r0, r4
 8008f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f48:	3a30      	subs	r2, #48	; 0x30
 8008f4a:	2a09      	cmp	r2, #9
 8008f4c:	d903      	bls.n	8008f56 <_vfiprintf_r+0x1ee>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0c5      	beq.n	8008ede <_vfiprintf_r+0x176>
 8008f52:	9105      	str	r1, [sp, #20]
 8008f54:	e7c3      	b.n	8008ede <_vfiprintf_r+0x176>
 8008f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e7f0      	b.n	8008f42 <_vfiprintf_r+0x1da>
 8008f60:	ab03      	add	r3, sp, #12
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	462a      	mov	r2, r5
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <_vfiprintf_r+0x258>)
 8008f68:	a904      	add	r1, sp, #16
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7fb fc5c 	bl	8004828 <_printf_float>
 8008f70:	4607      	mov	r7, r0
 8008f72:	1c78      	adds	r0, r7, #1
 8008f74:	d1d6      	bne.n	8008f24 <_vfiprintf_r+0x1bc>
 8008f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f78:	07d9      	lsls	r1, r3, #31
 8008f7a:	d405      	bmi.n	8008f88 <_vfiprintf_r+0x220>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	059a      	lsls	r2, r3, #22
 8008f80:	d402      	bmi.n	8008f88 <_vfiprintf_r+0x220>
 8008f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f84:	f7fe fdda 	bl	8007b3c <__retarget_lock_release_recursive>
 8008f88:	89ab      	ldrh	r3, [r5, #12]
 8008f8a:	065b      	lsls	r3, r3, #25
 8008f8c:	f53f af12 	bmi.w	8008db4 <_vfiprintf_r+0x4c>
 8008f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f92:	e711      	b.n	8008db8 <_vfiprintf_r+0x50>
 8008f94:	ab03      	add	r3, sp, #12
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	462a      	mov	r2, r5
 8008f9a:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <_vfiprintf_r+0x258>)
 8008f9c:	a904      	add	r1, sp, #16
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7fb fee6 	bl	8004d70 <_printf_i>
 8008fa4:	e7e4      	b.n	8008f70 <_vfiprintf_r+0x208>
 8008fa6:	bf00      	nop
 8008fa8:	08009384 	.word	0x08009384
 8008fac:	080093a4 	.word	0x080093a4
 8008fb0:	08009364 	.word	0x08009364
 8008fb4:	0800959c 	.word	0x0800959c
 8008fb8:	080095a6 	.word	0x080095a6
 8008fbc:	08004829 	.word	0x08004829
 8008fc0:	08008d45 	.word	0x08008d45
 8008fc4:	080095a2 	.word	0x080095a2

08008fc8 <_read_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	; (8008fe8 <_read_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f8 fda8 	bl	8001b2c <_read>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_read_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_read_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20012fe0 	.word	0x20012fe0

08008fec <abort>:
 8008fec:	b508      	push	{r3, lr}
 8008fee:	2006      	movs	r0, #6
 8008ff0:	f000 f834 	bl	800905c <raise>
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	f7f8 fd8f 	bl	8001b18 <_exit>

08008ffa <_malloc_usable_size_r>:
 8008ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffe:	1f18      	subs	r0, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfbc      	itt	lt
 8009004:	580b      	ldrlt	r3, [r1, r0]
 8009006:	18c0      	addlt	r0, r0, r3
 8009008:	4770      	bx	lr

0800900a <_raise_r>:
 800900a:	291f      	cmp	r1, #31
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4604      	mov	r4, r0
 8009010:	460d      	mov	r5, r1
 8009012:	d904      	bls.n	800901e <_raise_r+0x14>
 8009014:	2316      	movs	r3, #22
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901c:	bd38      	pop	{r3, r4, r5, pc}
 800901e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009020:	b112      	cbz	r2, 8009028 <_raise_r+0x1e>
 8009022:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009026:	b94b      	cbnz	r3, 800903c <_raise_r+0x32>
 8009028:	4620      	mov	r0, r4
 800902a:	f000 f831 	bl	8009090 <_getpid_r>
 800902e:	462a      	mov	r2, r5
 8009030:	4601      	mov	r1, r0
 8009032:	4620      	mov	r0, r4
 8009034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009038:	f000 b818 	b.w	800906c <_kill_r>
 800903c:	2b01      	cmp	r3, #1
 800903e:	d00a      	beq.n	8009056 <_raise_r+0x4c>
 8009040:	1c59      	adds	r1, r3, #1
 8009042:	d103      	bne.n	800904c <_raise_r+0x42>
 8009044:	2316      	movs	r3, #22
 8009046:	6003      	str	r3, [r0, #0]
 8009048:	2001      	movs	r0, #1
 800904a:	e7e7      	b.n	800901c <_raise_r+0x12>
 800904c:	2400      	movs	r4, #0
 800904e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009052:	4628      	mov	r0, r5
 8009054:	4798      	blx	r3
 8009056:	2000      	movs	r0, #0
 8009058:	e7e0      	b.n	800901c <_raise_r+0x12>
	...

0800905c <raise>:
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <raise+0xc>)
 800905e:	4601      	mov	r1, r0
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f7ff bfd2 	b.w	800900a <_raise_r>
 8009066:	bf00      	nop
 8009068:	20000014 	.word	0x20000014

0800906c <_kill_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_kill_r+0x20>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f7f8 fd3d 	bl	8001af8 <_kill>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d102      	bne.n	8009088 <_kill_r+0x1c>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b103      	cbz	r3, 8009088 <_kill_r+0x1c>
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	20012fe0 	.word	0x20012fe0

08009090 <_getpid_r>:
 8009090:	f7f8 bd2a 	b.w	8001ae8 <_getpid>

08009094 <_init>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr

080090a0 <_fini>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	bf00      	nop
 80090a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a6:	bc08      	pop	{r3}
 80090a8:	469e      	mov	lr, r3
 80090aa:	4770      	bx	lr
