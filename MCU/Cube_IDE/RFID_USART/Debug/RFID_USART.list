
RFID_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f24  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800313c  0800313c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000018  0800315c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800315c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a061  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b05  00000000  00000000  0002a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e70  00000000  00000000  0002cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa43  00000000  00000000  0004d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7543  00000000  00000000  0005837b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  0011f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030d0 	.word	0x080030d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080030d0 	.word	0x080030d0

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LCD_string>:
//R/W CONNECT TO PA6
#define EN 0x80							//PA7 mask for register select


void LCD_string(char str[])
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e009      	b.n	800053e <LCD_string+0x22>
	{
		LCD_data(str[i]);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f8c8 	bl	80006c8 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1ef      	bne.n	800052a <LCD_string+0xe>
	}

}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <LCD_init>:
/* initialize GPIOA/C then initialize LCD controller */
void LCD_init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	PORTS_init();
 8000558:	f000 f82e 	bl	80005b8 <PORTS_init>
	delay(20); /* LCD controller reset sequence */
 800055c:	2014      	movs	r0, #20
 800055e:	f000 f8ce 	bl	80006fe <delay>
	LCD_nibble_write(0x30, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	2030      	movs	r0, #48	; 0x30
 8000566:	f000 f85d 	bl	8000624 <LCD_nibble_write>
	delay(5);
 800056a:	2005      	movs	r0, #5
 800056c:	f000 f8c7 	bl	80006fe <delay>
	LCD_nibble_write(0x30, 0);
 8000570:	2100      	movs	r1, #0
 8000572:	2030      	movs	r0, #48	; 0x30
 8000574:	f000 f856 	bl	8000624 <LCD_nibble_write>
	delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 f8c0 	bl	80006fe <delay>
	LCD_nibble_write(0x30, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2030      	movs	r0, #48	; 0x30
 8000582:	f000 f84f 	bl	8000624 <LCD_nibble_write>
	delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f000 f8b9 	bl	80006fe <delay>
	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 800058c:	2100      	movs	r1, #0
 800058e:	2020      	movs	r0, #32
 8000590:	f000 f848 	bl	8000624 <LCD_nibble_write>
	delay(1);
 8000594:	2001      	movs	r0, #1
 8000596:	f000 f8b2 	bl	80006fe <delay>
	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 800059a:	2028      	movs	r0, #40	; 0x28
 800059c:	f000 f872 	bl	8000684 <LCD_command>
	LCD_command(0x06); /* move cursor right */
 80005a0:	2006      	movs	r0, #6
 80005a2:	f000 f86f 	bl	8000684 <LCD_command>
	LCD_command(0x01); /* clear screen, move cursor to home */
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 f86c 	bl	8000684 <LCD_command>
	LCD_command(0x0F); /* turn on display, cursor blinking */
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f869 	bl	8000684 <LCD_command>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <PORTS_init>:

void PORTS_init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <PORTS_init+0x60>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <PORTS_init+0x60>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <PORTS_init+0x60>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <PORTS_init+0x60>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
		GPIOA->MODER &=~0xFC00;                 //clear all pin PA5 PA6 PA7
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <PORTS_init+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a10      	ldr	r2, [pc, #64]	; (800061c <PORTS_init+0x64>)
 80005da:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80005de:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x5400; 				//set all pin 5,6,7 as o/p mode
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <PORTS_init+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <PORTS_init+0x64>)
 80005e6:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80005ea:	6013      	str	r3, [r2, #0]
		GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <PORTS_init+0x64>)
 80005ee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005f2:	619a      	str	r2, [r3, #24]
		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <PORTS_init+0x68>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <PORTS_init+0x68>)
 80005fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005fe:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <PORTS_init+0x68>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <PORTS_init+0x68>)
 8000606:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800060a:	6013      	str	r3, [r2, #0]


}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40020800 	.word	0x40020800

08000624 <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
	/*populate data bits */
	GPIOC->BSRR = 0xF00000; 					/* clear data bits */
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <LCD_nibble_write+0x58>)
 8000636:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800063a:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <LCD_nibble_write+0x58>)
 8000640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000644:	6193      	str	r3, [r2, #24]
	/* set R/S bit */
	if (control & RS)
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <LCD_nibble_write+0x34>
		GPIOA->BSRR = RS;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <LCD_nibble_write+0x5c>)
 8000652:	2220      	movs	r2, #32
 8000654:	619a      	str	r2, [r3, #24]
 8000656:	e003      	b.n	8000660 <LCD_nibble_write+0x3c>
	else
		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <LCD_nibble_write+0x5c>)
 800065a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800065e:	619a      	str	r2, [r3, #24]
	/* pulse E */
	GPIOA->BSRR = EN;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <LCD_nibble_write+0x5c>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	619a      	str	r2, [r3, #24]
	delay(0);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f849 	bl	80006fe <delay>
	GPIOA->BSRR = EN << 16;
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <LCD_nibble_write+0x5c>)
 800066e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000672:	619a      	str	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020800 	.word	0x40020800
 8000680:	40020000 	.word	0x40020000

08000684 <LCD_command>:
void LCD_command(unsigned char command)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f023 030f 	bic.w	r3, r3, #15
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffc3 	bl	8000624 <LCD_nibble_write>
	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffbc 	bl	8000624 <LCD_nibble_write>
	if (command < 4)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d803      	bhi.n	80006ba <LCD_command+0x36>
		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 f823 	bl	80006fe <delay>
	else
		delay(1); 									/* all others 40 us */

}
 80006b8:	e002      	b.n	80006c0 <LCD_command+0x3c>
		delay(1); 									/* all others 40 us */
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f81f 	bl	80006fe <delay>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <LCD_data>:
void LCD_data(char data)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2120      	movs	r1, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffa1 	bl	8000624 <LCD_nibble_write>
	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2120      	movs	r1, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9a 	bl	8000624 <LCD_nibble_write>
	delay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f000 f804 	bl	80006fe <delay>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <delay>:

void delay(int seconds)
{
 80006fe:	b480      	push	{r7}
 8000700:	b085      	sub	sp, #20
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]

	for(;seconds>0;seconds--)
 8000706:	e00d      	b.n	8000724 <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e002      	b.n	8000714 <delay+0x16>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800071a:	4293      	cmp	r3, r2
 800071c:	ddf7      	ble.n	800070e <delay+0x10>
	for(;seconds>0;seconds--)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3b01      	subs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dcee      	bgt.n	8000708 <delay+0xa>
		{

		}
	}
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <main>:
uint8_t dat_buf[10]={0};
uint8_t msg[10]="55";
//uint8_t dat_buf[50];
uint8_t count =0;
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fb28 	bl	8000d90 <HAL_Init>
 LCD_init();
 8000740:	f7ff ff08 	bl	8000554 <LCD_init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f88e 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f952 	bl	80009f0 <MX_GPIO_Init>
  MX_UART4_Init();
 800074c:	f000 f8fc 	bl	8000948 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000750:	f000 f924 	bl	800099c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 LCD_command(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff95 	bl	8000684 <LCD_command>
 delay(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f7ff ffcf 	bl	80006fe <delay>
  LCD_string("WELCOME");
 8000760:	481e      	ldr	r0, [pc, #120]	; (80007dc <main+0xa4>)
 8000762:	f7ff fedb 	bl	800051c <LCD_string>
  LCD_command(0xc2);
 8000766:	20c2      	movs	r0, #194	; 0xc2
 8000768:	f7ff ff8c 	bl	8000684 <LCD_command>
  delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f7ff ffc6 	bl	80006fe <delay>
  LCD_string("RFID TESTING");
 8000772:	481b      	ldr	r0, [pc, #108]	; (80007e0 <main+0xa8>)
 8000774:	f7ff fed2 	bl	800051c <LCD_string>
  delay(10000);
 8000778:	f242 7010 	movw	r0, #10000	; 0x2710
 800077c:	f7ff ffbf 	bl	80006fe <delay>
  LCD_command(0x01);
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ff7f 	bl	8000684 <LCD_command>
  delay(10);
 8000786:	200a      	movs	r0, #10
 8000788:	f7ff ffb9 	bl	80006fe <delay>
  LCD_string("SHOW CARD");
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <main+0xac>)
 800078e:	f7ff fec5 	bl	800051c <LCD_string>
  delay(10000);
 8000792:	f242 7010 	movw	r0, #10000	; 0x2710
 8000796:	f7ff ffb2 	bl	80006fe <delay>
  while (1)
  {
	  if(!(strcmp(recv_dat,msg)))
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <main+0xb0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4913      	ldr	r1, [pc, #76]	; (80007ec <main+0xb4>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd2f 	bl	8000204 <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10c      	bne.n	80007c6 <main+0x8e>
	 	  	  {
	 	  		  LCD_command(0x01);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ff69 	bl	8000684 <LCD_command>
	 	  		  delay(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f7ff ffa3 	bl	80006fe <delay>
	 	  		  LCD_string("ACCESS GRANTED");
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <main+0xb8>)
 80007ba:	f7ff feaf 	bl	800051c <LCD_string>
	 	  		 delay(10000);
 80007be:	f242 7010 	movw	r0, #10000	; 0x2710
 80007c2:	f7ff ff9c 	bl	80006fe <delay>

	 	  	  }
	  memset(dat_buf,0,200);
 80007c6:	22c8      	movs	r2, #200	; 0xc8
 80007c8:	2100      	movs	r1, #0
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0xbc>)
 80007cc:	f002 fc78 	bl	80030c0 <memset>
	 HAL_UART_Receive_IT(&huart4, &recv_dat,1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	4905      	ldr	r1, [pc, #20]	; (80007e8 <main+0xb0>)
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <main+0xc0>)
 80007d6:	f001 fd24 	bl	8002222 <HAL_UART_Receive_IT>
	  if(!(strcmp(recv_dat,msg)))
 80007da:	e7de      	b.n	800079a <main+0x62>
 80007dc:	080030e8 	.word	0x080030e8
 80007e0:	080030f0 	.word	0x080030f0
 80007e4:	08003100 	.word	0x08003100
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	20000000 	.word	0x20000000
 80007f0:	0800310c 	.word	0x0800310c
 80007f4:	200000c0 	.word	0x200000c0
 80007f8:	20000034 	.word	0x20000034

080007fc <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	  dat_buf[count++]=recv_dat;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_UART_RxCpltCallback+0x5c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	b2d1      	uxtb	r1, r2
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_UART_RxCpltCallback+0x5c>)
 800080e:	7011      	strb	r1, [r2, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_UART_RxCpltCallback+0x60>)
 8000814:	7819      	ldrb	r1, [r3, #0]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_UART_RxCpltCallback+0x64>)
 8000818:	5499      	strb	r1, [r3, r2]
//	  		  LCD_string("ACCESS DENIED");
//	  		delay(10000);
//	  	  }

	  //uint16_t len_of_data = strlen(dat_buf);
	  LCD_command(0x01);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff32 	bl	8000684 <LCD_command>
	  delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f7ff ff6c 	bl	80006fe <delay>
	  for(int i=0;dat_buf[i]!='\0';i++)
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e009      	b.n	8000840 <HAL_UART_RxCpltCallback+0x44>
	  {
		  LCD_data(dat_buf[i]);
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_UART_RxCpltCallback+0x64>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff47 	bl	80006c8 <LCD_data>
	  for(int i=0;dat_buf[i]!='\0';i++)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_UART_RxCpltCallback+0x64>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1ef      	bne.n	800082c <HAL_UART_RxCpltCallback+0x30>

	  }



}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000ca 	.word	0x200000ca
 800085c:	200000bc 	.word	0x200000bc
 8000860:	200000c0 	.word	0x200000c0

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fc24 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <SystemClock_Config+0xdc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <SystemClock_Config+0xdc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <SystemClock_Config+0xdc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <SystemClock_Config+0xe0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a25      	ldr	r2, [pc, #148]	; (8000944 <SystemClock_Config+0xe0>)
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <SystemClock_Config+0xe0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d4:	2308      	movs	r3, #8
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008d8:	23b4      	movs	r3, #180	; 0xb4
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f9ad 	bl	8001c4c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 f914 	bl	8000b24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008fc:	f000 fe0c 	bl	8001518 <HAL_PWREx_EnableOverDrive>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000906:	f000 f90d 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000916:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2105      	movs	r1, #5
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fe45 	bl	80015b8 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000934:	f000 f8f6 	bl	8000b24 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3750      	adds	r7, #80	; 0x50
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_UART4_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_UART4_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_UART4_Init+0x4c>)
 8000954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000958:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_UART4_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_UART4_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_UART4_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_UART4_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_UART4_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_UART4_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_UART4_Init+0x4c>)
 8000980:	f001 fc02 	bl	8002188 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f8cb 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000034 	.word	0x20000034
 8000998:	40004c00 	.word	0x40004c00

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f001 fbd8 	bl	8002188 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8a1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000078 	.word	0x20000078
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_GPIO_Init+0x124>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 8000a76:	2200      	movs	r2, #0
 8000a78:	f240 11e3 	movw	r1, #483	; 0x1e3
 8000a7c:	4826      	ldr	r0, [pc, #152]	; (8000b18 <MX_GPIO_Init+0x128>)
 8000a7e:	f000 fd31 	bl	80014e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000a88:	4824      	ldr	r0, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x12c>)
 8000a8a:	f000 fd2b 	bl	80014e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a94:	f000 fd26 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	481c      	ldr	r0, [pc, #112]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000ab0:	f000 fb84 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 8000ab4:	f240 13e3 	movw	r3, #483	; 0x1e3
 8000ab8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_GPIO_Init+0x128>)
 8000ace:	f000 fb75 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ad2:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000ad6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_GPIO_Init+0x12c>)
 8000aec:	f000 fb66 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000b08:	f000 fb58 	bl	80011bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020800 	.word	0x40020800

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fa50 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <HAL_UART_MspInit+0x108>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d135      	bne.n	8000c0e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bec:	2308      	movs	r3, #8
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <HAL_UART_MspInit+0x110>)
 8000bf8:	f000 fae0 	bl	80011bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2034      	movs	r0, #52	; 0x34
 8000c02:	f000 fa12 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c06:	2034      	movs	r0, #52	; 0x34
 8000c08:	f000 fa2b 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	e038      	b.n	8000c80 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <HAL_UART_MspInit+0x114>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d133      	bne.n	8000c80 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x10c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c50:	230c      	movs	r3, #12
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c60:	2307      	movs	r3, #7
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_UART_MspInit+0x118>)
 8000c6c:	f000 faa6 	bl	80011bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2026      	movs	r0, #38	; 0x26
 8000c76:	f000 f9d8 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 f9f1 	bl	8001062 <HAL_NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8a4 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	f001 fac5 	bl	8002284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000078 	.word	0x20000078

08000d04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <UART4_IRQHandler+0x10>)
 8000d0a:	f001 fabb 	bl	8002284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000034 	.word	0x20000034

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 f985 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fce3 	bl	8000738 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d80:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 8000d84:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d88:	200000d0 	.word	0x200000d0

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff feb4 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f943 	bl	800107e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000014 	.word	0x20000014
 8000e30:	20000010 	.word	0x20000010

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000014 	.word	0x20000014
 8000e58:	200000cc 	.word	0x200000cc

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000cc 	.word	0x200000cc

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff feda 	bl	8000e5c <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e052      	b.n	800116e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0216 	bic.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <HAL_DMA_Abort+0x62>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0208 	bic.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e013      	b.n	8001142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe9f 	bl	8000e5c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d90c      	bls.n	8001142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e015      	b.n	800116e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e4      	bne.n	800111a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d004      	beq.n	8001194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e165      	b.n	80014a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8154 	bne.w	800149e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80ae 	beq.w	800149e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_GPIO_Init+0x300>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a5c      	ldr	r2, [pc, #368]	; (80014bc <HAL_GPIO_Init+0x300>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <HAL_GPIO_Init+0x300>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4f      	ldr	r2, [pc, #316]	; (80014c4 <HAL_GPIO_Init+0x308>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d025      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <HAL_GPIO_Init+0x30c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01f      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <HAL_GPIO_Init+0x310>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d019      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <HAL_GPIO_Init+0x314>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x20e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_GPIO_Init+0x318>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x20a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x31c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x206>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_GPIO_Init+0x320>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x202>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e00c      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013be:	2307      	movs	r3, #7
 80013c0:	e00a      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013c2:	2305      	movs	r3, #5
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x21c>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x304>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_GPIO_Init+0x324>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <HAL_GPIO_Init+0x324>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_GPIO_Init+0x324>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x324>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_GPIO_Init+0x324>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_GPIO_Init+0x324>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_GPIO_Init+0x324>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_GPIO_Init+0x324>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f ae96 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001544:	f7ff fc8a 	bl	8000e5c <HAL_GetTick>
 8001548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800154a:	e009      	b.n	8001560 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800154c:	f7ff fc86 	bl	8000e5c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800155a:	d901      	bls.n	8001560 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e01f      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d1ee      	bne.n	800154c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff fc72 	bl	8000e5c <HAL_GetTick>
 8001578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800157a:	e009      	b.n	8001590 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800157c:	f7ff fc6e 	bl	8000e5c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800158a:	d901      	bls.n	8001590 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e007      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800159c:	d1ee      	bne.n	800157c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	420e0040 	.word	0x420e0040
 80015b0:	40007000 	.word	0x40007000
 80015b4:	420e0044 	.word	0x420e0044

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0cc      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d90c      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800162e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d044      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d003      	beq.n	8001676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	2b03      	cmp	r3, #3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e067      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4934      	ldr	r1, [pc, #208]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7ff fbd8 	bl	8000e5c <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff fbd4 	bl	8000e5c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20c      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f855 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490a      	ldr	r1, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fb38 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00
 8001774:	40023800 	.word	0x40023800
 8001778:	0800311c 	.word	0x0800311c
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000010 	.word	0x20000010

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_GetHCLKFreq+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000000c 	.word	0x2000000c

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017a0:	f7ff fff0 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0a9b      	lsrs	r3, r3, #10
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4903      	ldr	r1, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	0800312c 	.word	0x0800312c

080017c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017c8:	f7ff ffdc 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0b5b      	lsrs	r3, r3, #13
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4903      	ldr	r1, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	0800312c 	.word	0x0800312c

080017ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f0:	b0ae      	sub	sp, #184	; 0xb8
 80017f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001812:	4bcb      	ldr	r3, [pc, #812]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b0c      	cmp	r3, #12
 800181c:	f200 8206 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x440>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	0800185d 	.word	0x0800185d
 800182c:	08001c2d 	.word	0x08001c2d
 8001830:	08001c2d 	.word	0x08001c2d
 8001834:	08001c2d 	.word	0x08001c2d
 8001838:	08001865 	.word	0x08001865
 800183c:	08001c2d 	.word	0x08001c2d
 8001840:	08001c2d 	.word	0x08001c2d
 8001844:	08001c2d 	.word	0x08001c2d
 8001848:	0800186d 	.word	0x0800186d
 800184c:	08001c2d 	.word	0x08001c2d
 8001850:	08001c2d 	.word	0x08001c2d
 8001854:	08001c2d 	.word	0x08001c2d
 8001858:	08001a5d 	.word	0x08001a5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800185c:	4bb9      	ldr	r3, [pc, #740]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x358>)
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001862:	e1e7      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001864:	4bb8      	ldr	r3, [pc, #736]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186a:	e1e3      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186c:	4bb4      	ldr	r3, [pc, #720]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001878:	4bb1      	ldr	r3, [pc, #708]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d071      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001884:	4bae      	ldr	r3, [pc, #696]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	2200      	movs	r2, #0
 800188c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001890:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800189c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80018aa:	4622      	mov	r2, r4
 80018ac:	462b      	mov	r3, r5
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	0159      	lsls	r1, r3, #5
 80018b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018bc:	0150      	lsls	r0, r2, #5
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4621      	mov	r1, r4
 80018c4:	1a51      	subs	r1, r2, r1
 80018c6:	6439      	str	r1, [r7, #64]	; 0x40
 80018c8:	4629      	mov	r1, r5
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018dc:	4649      	mov	r1, r9
 80018de:	018b      	lsls	r3, r1, #6
 80018e0:	4641      	mov	r1, r8
 80018e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e6:	4641      	mov	r1, r8
 80018e8:	018a      	lsls	r2, r1, #6
 80018ea:	4641      	mov	r1, r8
 80018ec:	1a51      	subs	r1, r2, r1
 80018ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80018f0:	4649      	mov	r1, r9
 80018f2:	eb63 0301 	sbc.w	r3, r3, r1
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001904:	4649      	mov	r1, r9
 8001906:	00cb      	lsls	r3, r1, #3
 8001908:	4641      	mov	r1, r8
 800190a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800190e:	4641      	mov	r1, r8
 8001910:	00ca      	lsls	r2, r1, #3
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	4603      	mov	r3, r0
 8001918:	4622      	mov	r2, r4
 800191a:	189b      	adds	r3, r3, r2
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
 800191e:	462b      	mov	r3, r5
 8001920:	460a      	mov	r2, r1
 8001922:	eb42 0303 	adc.w	r3, r2, r3
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001934:	4629      	mov	r1, r5
 8001936:	024b      	lsls	r3, r1, #9
 8001938:	4621      	mov	r1, r4
 800193a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800193e:	4621      	mov	r1, r4
 8001940:	024a      	lsls	r2, r1, #9
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800194a:	2200      	movs	r2, #0
 800194c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001954:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001958:	f7fe fc5e 	bl	8000218 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001966:	e067      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001968:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	2200      	movs	r2, #0
 8001970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001974:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800197c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001980:	67bb      	str	r3, [r7, #120]	; 0x78
 8001982:	2300      	movs	r3, #0
 8001984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001986:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800198a:	4622      	mov	r2, r4
 800198c:	462b      	mov	r3, r5
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	0159      	lsls	r1, r3, #5
 8001998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199c:	0150      	lsls	r0, r2, #5
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4621      	mov	r1, r4
 80019a4:	1a51      	subs	r1, r2, r1
 80019a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80019a8:	4629      	mov	r1, r5
 80019aa:	eb63 0301 	sbc.w	r3, r3, r1
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80019bc:	4649      	mov	r1, r9
 80019be:	018b      	lsls	r3, r1, #6
 80019c0:	4641      	mov	r1, r8
 80019c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c6:	4641      	mov	r1, r8
 80019c8:	018a      	lsls	r2, r1, #6
 80019ca:	4641      	mov	r1, r8
 80019cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80019d0:	4649      	mov	r1, r9
 80019d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019ea:	4692      	mov	sl, r2
 80019ec:	469b      	mov	fp, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	eb1a 0303 	adds.w	r3, sl, r3
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	462b      	mov	r3, r5
 80019f8:	eb4b 0303 	adc.w	r3, fp, r3
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a20:	2200      	movs	r2, #0
 8001a22:	673b      	str	r3, [r7, #112]	; 0x70
 8001a24:	677a      	str	r2, [r7, #116]	; 0x74
 8001a26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a2a:	f7fe fbf5 	bl	8000218 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4613      	mov	r3, r2
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a38:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a5a:	e0eb      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06b      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a86:	663b      	str	r3, [r7, #96]	; 0x60
 8001a88:	2300      	movs	r3, #0
 8001a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a90:	4622      	mov	r2, r4
 8001a92:	462b      	mov	r3, r5
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	0159      	lsls	r1, r3, #5
 8001a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa2:	0150      	lsls	r0, r2, #5
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1a51      	subs	r1, r2, r1
 8001aac:	61b9      	str	r1, [r7, #24]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ac2:	4659      	mov	r1, fp
 8001ac4:	018b      	lsls	r3, r1, #6
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001acc:	4651      	mov	r1, sl
 8001ace:	018a      	lsls	r2, r1, #6
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	ebb2 0801 	subs.w	r8, r2, r1
 8001ad6:	4659      	mov	r1, fp
 8001ad8:	eb63 0901 	sbc.w	r9, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	eb18 0303 	adds.w	r3, r8, r3
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	462b      	mov	r3, r5
 8001afe:	eb49 0303 	adc.w	r3, r9, r3
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b10:	4629      	mov	r1, r5
 8001b12:	024b      	lsls	r3, r1, #9
 8001b14:	4621      	mov	r1, r4
 8001b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	024a      	lsls	r2, r1, #9
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b26:	2200      	movs	r2, #0
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b30:	f7fe fb72 	bl	8000218 <__aeabi_uldivmod>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4613      	mov	r3, r2
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b3e:	e065      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x420>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400
 8001b48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	2200      	movs	r2, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	4611      	mov	r1, r2
 8001b58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b5e:	2300      	movs	r3, #0
 8001b60:	657b      	str	r3, [r7, #84]	; 0x54
 8001b62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b66:	4642      	mov	r2, r8
 8001b68:	464b      	mov	r3, r9
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0159      	lsls	r1, r3, #5
 8001b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b78:	0150      	lsls	r0, r2, #5
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4641      	mov	r1, r8
 8001b80:	1a51      	subs	r1, r2, r1
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	4649      	mov	r1, r9
 8001b86:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b98:	4659      	mov	r1, fp
 8001b9a:	018b      	lsls	r3, r1, #6
 8001b9c:	4651      	mov	r1, sl
 8001b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	018a      	lsls	r2, r1, #6
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	1a54      	subs	r4, r2, r1
 8001baa:	4659      	mov	r1, fp
 8001bac:	eb63 0501 	sbc.w	r5, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	00eb      	lsls	r3, r5, #3
 8001bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bbe:	00e2      	lsls	r2, r4, #3
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	4643      	mov	r3, r8
 8001bc6:	18e3      	adds	r3, r4, r3
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	464b      	mov	r3, r9
 8001bcc:	eb45 0303 	adc.w	r3, r5, r3
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bfe:	f7fe fb0b 	bl	8000218 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4613      	mov	r3, r2
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0f1b      	lsrs	r3, r3, #28
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c2a:	e003      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	37b8      	adds	r7, #184	; 0xb8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400

08001c4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e28d      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8083 	beq.w	8001d72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c6c:	4b94      	ldr	r3, [pc, #592]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d019      	beq.n	8001cac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c78:	4b91      	ldr	r3, [pc, #580]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c84:	4b8e      	ldr	r3, [pc, #568]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c90:	d00c      	beq.n	8001cac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d112      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9e:	4b88      	ldr	r3, [pc, #544]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001caa:	d10b      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	4b84      	ldr	r3, [pc, #528]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d05b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x124>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d157      	bne.n	8001d70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e25a      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x90>
 8001cce:	4b7c      	ldr	r3, [pc, #496]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7b      	ldr	r2, [pc, #492]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xcc>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0xb4>
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a75      	ldr	r2, [pc, #468]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a72      	ldr	r2, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xcc>
 8001d00:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b6c      	ldr	r3, [pc, #432]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f89c 	bl	8000e5c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff f898 	bl	8000e5c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e21f      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xdc>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f888 	bl	8000e5c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff f884 	bl	8000e5c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e20b      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b57      	ldr	r3, [pc, #348]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x104>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06f      	beq.n	8001e5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d017      	beq.n	8001dba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d8a:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d105      	bne.n	8001da2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d116      	bne.n	8001de8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x186>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1d3      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4937      	ldr	r1, [pc, #220]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	e03a      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x278>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff f831 	bl	8000e5c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f82d 	bl	8000e5c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1b4      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4925      	ldr	r1, [pc, #148]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x278>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f810 	bl	8000e5c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff f80c 	bl	8000e5c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e193      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d036      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d016      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7fe fff0 	bl	8000e5c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e80:	f7fe ffec 	bl	8000e5c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e173      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x234>
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ffd9 	bl	8000e5c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	e00e      	b.n	8001ecc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7fe ffd5 	bl	8000e5c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d907      	bls.n	8001ecc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e15c      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	42470000 	.word	0x42470000
 8001ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ea      	bne.n	8001eae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8097 	beq.w	8002014 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b83      	ldr	r3, [pc, #524]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a7e      	ldr	r2, [pc, #504]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b79      	ldr	r3, [pc, #484]	; (80020fc <HAL_RCC_OscConfig+0x4b0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d118      	bne.n	8001f54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x4b0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4b0>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe ff95 	bl	8000e5c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7fe ff91 	bl	8000e5c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e118      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x4b0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x31e>
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x358>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x340>
 8001f72:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a60      	ldr	r2, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x358>
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a59      	ldr	r2, [pc, #356]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7fe ff56 	bl	8000e5c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff52 	bl	8000e5c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0d7      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ee      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x368>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7fe ff40 	bl	8000e5c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe ff3c 	bl	8000e5c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e0c1      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ee      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80ad 	beq.w	8002178 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d060      	beq.n	80020ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d145      	bne.n	80020be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCC_OscConfig+0x4b4>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe ff10 	bl	8000e5c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe ff0c 	bl	8000e5c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e093      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	019b      	lsls	r3, r3, #6
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	071b      	lsls	r3, r3, #28
 800208a:	491b      	ldr	r1, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4b4>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7fe fee1 	bl	8000e5c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe fedd 	bl	8000e5c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e064      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x452>
 80020bc:	e05c      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x4b4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe feca 	bl	8000e5c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe fec6 	bl	8000e5c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04d      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
 80020ea:	e045      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e040      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000
 8002100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_RCC_OscConfig+0x538>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d030      	beq.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d129      	bne.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d122      	bne.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d119      	bne.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d10f      	bne.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e03f      	b.n	800221a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fce6 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fcdf 	bl	8002b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	4613      	mov	r3, r2
 800222e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b20      	cmp	r3, #32
 800223a:	d11d      	bne.n	8002278 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_UART_Receive_IT+0x26>
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e016      	b.n	800227a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_UART_Receive_IT+0x38>
 8002256:	2302      	movs	r3, #2
 8002258:	e00f      	b.n	800227a <HAL_UART_Receive_IT+0x58>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	461a      	mov	r2, r3
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fab6 	bl	80027e0 <UART_Start_Receive_IT>
 8002274:	4603      	mov	r3, r0
 8002276:	e000      	b.n	800227a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0ba      	sub	sp, #232	; 0xe8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_UART_IRQHandler+0x66>
 80022d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fb99 	bl	8002a1a <UART_Receive_IT>
      return;
 80022e8:	e256      	b.n	8002798 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80de 	beq.w	80024b0 <HAL_UART_IRQHandler+0x22c>
 80022f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002304:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80d1 	beq.w	80024b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_UART_IRQHandler+0xae>
 800231a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_UART_IRQHandler+0xd2>
 800233e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_UART_IRQHandler+0xf6>
 8002362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d011      	beq.n	80023aa <HAL_UART_IRQHandler+0x126>
 8002386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f043 0208 	orr.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 81ed 	beq.w	800278e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_UART_IRQHandler+0x14e>
 80023c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fb24 	bl	8002a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_UART_IRQHandler+0x17a>
 80023f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d04f      	beq.n	800249e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa2c 	bl	800285c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d141      	bne.n	8002496 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3314      	adds	r3, #20
 8002418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002420:	e853 3f00 	ldrex	r3, [r3]
 8002424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800242c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3314      	adds	r3, #20
 800243a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800244a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1d9      	bne.n	8002412 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	2b00      	cmp	r3, #0
 8002464:	d013      	beq.n	800248e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	4a7d      	ldr	r2, [pc, #500]	; (8002660 <HAL_UART_IRQHandler+0x3dc>)
 800246c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fe7f 	bl	8001176 <HAL_DMA_Abort_IT>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002488:	4610      	mov	r0, r2
 800248a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	e00e      	b.n	80024ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f990 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	e00a      	b.n	80024ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f98c 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	e006      	b.n	80024ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f988 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024aa:	e170      	b.n	800278e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	bf00      	nop
    return;
 80024ae:	e16e      	b.n	800278e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f040 814a 	bne.w	800274e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8143 	beq.w	800274e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 813c 	beq.w	800274e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	f040 80b4 	bne.w	8002664 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002508:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8140 	beq.w	8002792 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800251a:	429a      	cmp	r2, r3
 800251c:	f080 8139 	bcs.w	8002792 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002526:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002532:	f000 8088 	beq.w	8002646 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800254c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800256e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1d9      	bne.n	8002536 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3314      	adds	r3, #20
 8002588:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025b2:	e841 2300 	strex	r3, r2, [r1]
 80025b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e1      	bne.n	8002582 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3314      	adds	r3, #20
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3314      	adds	r3, #20
 80025de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e3      	bne.n	80025be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	f023 0310 	bic.w	r3, r3, #16
 800261a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002628:	65ba      	str	r2, [r7, #88]	; 0x58
 800262a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e3      	bne.n	8002604 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fd28 	bl	8001096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264e:	b29b      	uxth	r3, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8b6 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800265c:	e099      	b.n	8002792 <HAL_UART_IRQHandler+0x50e>
 800265e:	bf00      	nop
 8002660:	08002923 	.word	0x08002923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800266c:	b29b      	uxth	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 808b 	beq.w	8002796 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8086 	beq.w	8002796 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	e853 3f00 	ldrex	r3, [r3]
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026ae:	647a      	str	r2, [r7, #68]	; 0x44
 80026b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e3      	bne.n	800268a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3314      	adds	r3, #20
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	623b      	str	r3, [r7, #32]
   return(result);
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3314      	adds	r3, #20
 80026e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026e6:	633a      	str	r2, [r7, #48]	; 0x30
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e3      	bne.n	80026c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	e853 3f00 	ldrex	r3, [r3]
 8002716:	60fb      	str	r3, [r7, #12]
   return(result);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0310 	bic.w	r3, r3, #16
 800271e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800272c:	61fa      	str	r2, [r7, #28]
 800272e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	69b9      	ldr	r1, [r7, #24]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	617b      	str	r3, [r7, #20]
   return(result);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e3      	bne.n	8002708 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f83e 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800274c:	e023      	b.n	8002796 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_UART_IRQHandler+0x4ea>
 800275a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8ef 	bl	800294a <UART_Transmit_IT>
    return;
 800276c:	e014      	b.n	8002798 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <HAL_UART_IRQHandler+0x514>
 800277a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f92f 	bl	80029ea <UART_EndTransmit_IT>
    return;
 800278c:	e004      	b.n	8002798 <HAL_UART_IRQHandler+0x514>
    return;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <HAL_UART_IRQHandler+0x514>
      return;
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <HAL_UART_IRQHandler+0x514>
      return;
 8002796:	bf00      	nop
  }
}
 8002798:	37e8      	adds	r7, #232	; 0xe8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop

080027a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2222      	movs	r2, #34	; 0x22
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b095      	sub	sp, #84	; 0x54
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	e853 3f00 	ldrex	r3, [r3]
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002884:	643a      	str	r2, [r7, #64]	; 0x40
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800288a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800288c:	e841 2300 	strex	r3, r2, [r1]
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3314      	adds	r3, #20
 80028b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d119      	bne.n	8002908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028f4:	61ba      	str	r2, [r7, #24]
 80028f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6979      	ldr	r1, [r7, #20]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	613b      	str	r3, [r7, #16]
   return(result);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e5      	bne.n	80028d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002916:	bf00      	nop
 8002918:	3754      	adds	r7, #84	; 0x54
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff39 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b21      	cmp	r3, #33	; 0x21
 800295c:	d13e      	bne.n	80029dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d114      	bne.n	8002992 <UART_Transmit_IT+0x48>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d110      	bne.n	8002992 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]
 8002990:	e008      	b.n	80029a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6211      	str	r1, [r2, #32]
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4619      	mov	r1, r3
 80029b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fec8 	bl	80027a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b08c      	sub	sp, #48	; 0x30
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b22      	cmp	r3, #34	; 0x22
 8002a2c:	f040 80ab 	bne.w	8002b86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d117      	bne.n	8002a6a <UART_Receive_IT+0x50>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	1c9a      	adds	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
 8002a68:	e026      	b.n	8002ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7c:	d007      	beq.n	8002a8e <UART_Receive_IT+0x74>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <UART_Receive_IT+0x82>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e008      	b.n	8002aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d15a      	bne.n	8002b82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0220 	bic.w	r2, r2, #32
 8002ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d135      	bne.n	8002b78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	613b      	str	r3, [r7, #16]
   return(result);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f023 0310 	bic.w	r3, r3, #16
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	623a      	str	r2, [r7, #32]
 8002b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	69f9      	ldr	r1, [r7, #28]
 8002b38:	6a3a      	ldr	r2, [r7, #32]
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e5      	bne.n	8002b12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d10a      	bne.n	8002b6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fe29 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
 8002b76:	e002      	b.n	8002b7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fd fe3f 	bl	80007fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e002      	b.n	8002b88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3730      	adds	r7, #48	; 0x30
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b0c0      	sub	sp, #256	; 0x100
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	ea40 0301 	orr.w	r3, r0, r1
 8002bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002be8:	f021 010c 	bic.w	r1, r1, #12
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	6999      	ldr	r1, [r3, #24]
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	ea40 0301 	orr.w	r3, r0, r1
 8002c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <UART_SetConfig+0x2cc>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d005      	beq.n	8002c30 <UART_SetConfig+0xa0>
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b8d      	ldr	r3, [pc, #564]	; (8002e60 <UART_SetConfig+0x2d0>)
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d104      	bne.n	8002c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7fe fdc8 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8002c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c38:	e003      	b.n	8002c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7fe fdaf 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8002c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	f040 810c 	bne.w	8002e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c72:	4621      	mov	r1, r4
 8002c74:	eb12 0801 	adds.w	r8, r2, r1
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb43 0901 	adc.w	r9, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c92:	4690      	mov	r8, r2
 8002c94:	4699      	mov	r9, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb18 0303 	adds.w	r3, r8, r3
 8002c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	eb49 0303 	adc.w	r3, r9, r3
 8002ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	18db      	adds	r3, r3, r3
 8002cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	eb42 0303 	adc.w	r3, r2, r3
 8002cca:	657b      	str	r3, [r7, #84]	; 0x54
 8002ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cd4:	f7fd faa0 	bl	8000218 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	011c      	lsls	r4, r3, #4
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d00:	415b      	adcs	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d08:	4641      	mov	r1, r8
 8002d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002d0e:	4649      	mov	r1, r9
 8002d10:	eb43 0b01 	adc.w	fp, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d28:	4692      	mov	sl, r2
 8002d2a:	469b      	mov	fp, r3
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d36:	464b      	mov	r3, r9
 8002d38:	eb4b 0303 	adc.w	r3, fp, r3
 8002d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
 8002d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d6a:	f7fd fa55 	bl	8000218 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002d76:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2264      	movs	r2, #100	; 0x64
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	1acb      	subs	r3, r1, r3
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d98:	441c      	add	r4, r3
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db4:	415b      	adcs	r3, r3
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e26:	f7fd f9f7 	bl	8000218 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	3332      	adds	r3, #50	; 0x32
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <UART_SetConfig+0x2d4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	f003 0207 	and.w	r2, r3, #7
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4422      	add	r2, r4
 8002e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e58:	e105      	b.n	8003066 <UART_SetConfig+0x4d6>
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	6239      	str	r1, [r7, #32]
 8002e82:	415b      	adcs	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1854      	adds	r4, r2, r1
 8002e8e:	4649      	mov	r1, r9
 8002e90:	eb43 0501 	adc.w	r5, r3, r1
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	eb45 0303 	adc.w	r3, r5, r3
 8002eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	008b      	lsls	r3, r1, #2
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	008a      	lsls	r2, r1, #2
 8002ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ee8:	f7fd f996 	bl	8000218 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4b60      	ldr	r3, [pc, #384]	; (8003074 <UART_SetConfig+0x4e4>)
 8002ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	011c      	lsls	r4, r3, #4
 8002efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	61b9      	str	r1, [r7, #24]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	1851      	adds	r1, r2, r1
 8002f20:	6139      	str	r1, [r7, #16]
 8002f22:	4649      	mov	r1, r9
 8002f24:	414b      	adcs	r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	00cb      	lsls	r3, r1, #3
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3e:	4651      	mov	r1, sl
 8002f40:	00ca      	lsls	r2, r1, #3
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f50:	464b      	mov	r3, r9
 8002f52:	460a      	mov	r2, r1
 8002f54:	eb42 0303 	adc.w	r3, r2, r3
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f74:	4649      	mov	r1, r9
 8002f76:	008b      	lsls	r3, r1, #2
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7e:	4641      	mov	r1, r8
 8002f80:	008a      	lsls	r2, r1, #2
 8002f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f86:	f7fd f947 	bl	8000218 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <UART_SetConfig+0x4e4>)
 8002f90:	fba3 1302 	umull	r1, r3, r3, r2
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	2164      	movs	r1, #100	; 0x64
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	3332      	adds	r3, #50	; 0x32
 8002fa2:	4a34      	ldr	r2, [pc, #208]	; (8003074 <UART_SetConfig+0x4e4>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fae:	441c      	add	r4, r3
 8002fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb8:	677a      	str	r2, [r7, #116]	; 0x74
 8002fba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fce:	4641      	mov	r1, r8
 8002fd0:	1851      	adds	r1, r2, r1
 8002fd2:	6039      	str	r1, [r7, #0]
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	414b      	adcs	r3, r1
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fe6:	4659      	mov	r1, fp
 8002fe8:	00cb      	lsls	r3, r1, #3
 8002fea:	4651      	mov	r1, sl
 8002fec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	00ca      	lsls	r2, r1, #3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003000:	464b      	mov	r3, r9
 8003002:	460a      	mov	r2, r1
 8003004:	eb42 0303 	adc.w	r3, r2, r3
 8003008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
 8003014:	667a      	str	r2, [r7, #100]	; 0x64
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003022:	4649      	mov	r1, r9
 8003024:	008b      	lsls	r3, r1, #2
 8003026:	4641      	mov	r1, r8
 8003028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302c:	4641      	mov	r1, r8
 800302e:	008a      	lsls	r2, r1, #2
 8003030:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003034:	f7fd f8f0 	bl	8000218 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <UART_SetConfig+0x4e4>)
 800303e:	fba3 1302 	umull	r1, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2164      	movs	r1, #100	; 0x64
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3332      	adds	r3, #50	; 0x32
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <UART_SetConfig+0x4e4>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4422      	add	r2, r4
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	51eb851f 	.word	0x51eb851f

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f820 	bl	80030d0 <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	0800313c 	.word	0x0800313c
 80030b4:	0800313c 	.word	0x0800313c
 80030b8:	0800313c 	.word	0x0800313c
 80030bc:	08003140 	.word	0x08003140

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
