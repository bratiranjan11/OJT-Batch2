
USART_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d78  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb0  08000fb0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  0800101c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800101c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a37  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000035f  00000000  00000000  00020acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00020f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002880  00000000  00000000  00021038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001184  00000000  00000000  000238b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009345  00000000  00000000  00024a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002dd81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a40  00000000  00000000  0002ddd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f24 	.word	0x08000f24

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000f24 	.word	0x08000f24

08000204 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
//#define GPIOAEN (1u)
void delay(int T)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int i;
	while(T--)
 800020c:	e009      	b.n	8000222 <delay+0x1e>
	{
	for(i=0;i<4000;i++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000220:	dbf8      	blt.n	8000214 <delay+0x10>
	while(T--)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	1e5a      	subs	r2, r3, #1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1f0      	bne.n	800020e <delay+0xa>
	}
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <__io_putchar>:
__io_putchar(unsigned char dat)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint32_t *USART2SR =(uint32_t *)0x40004400;//Enable Status register
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <__io_putchar+0x38>)
 8000248:	60fb      	str	r3, [r7, #12]
	uint32_t *USART2DR =(uint32_t *)0x40004404;//Enable Data Register
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <__io_putchar+0x3c>)
 800024c:	60bb      	str	r3, [r7, #8]

		while(!(*USART2SR & 0x80));//TXE pin enabled
 800024e:	bf00      	nop
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f9      	beq.n	8000250 <__io_putchar+0x14>
		*USART2DR = (dat & 0xff);//Data transmitted Through DATA REGISTER
 800025c:	79fa      	ldrb	r2, [r7, #7]
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]
		delay(200);
 8000262:	20c8      	movs	r0, #200	; 0xc8
 8000264:	f7ff ffce 	bl	8000204 <delay>

	}
 8000268:	bf00      	nop
 800026a:	4618      	mov	r0, r3
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40004400 	.word	0x40004400
 8000278:	40004404 	.word	0x40004404

0800027c <main>:

int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
	uint32_t *portaAHB1ENR =(uint32_t *)0x40023830;//Enabled Port
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <main+0x88>)
 8000284:	61fb      	str	r3, [r7, #28]
	uint32_t *portaAPB1ENR =(uint32_t *)0x40023840;//Enable Bus for USART2
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <main+0x8c>)
 8000288:	61bb      	str	r3, [r7, #24]
	uint32_t *portaMODER =(uint32_t *)0x40020000;//Enable GPIOA Moder
 800028a:	4b20      	ldr	r3, [pc, #128]	; (800030c <main+0x90>)
 800028c:	617b      	str	r3, [r7, #20]
	uint32_t *portaAFRL =(uint32_t *)0x40020020;//Enable GPIOA Alternate function register Low
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <main+0x94>)
 8000290:	613b      	str	r3, [r7, #16]
	uint32_t *USART2CR1 =(uint32_t *)0x4000440c;//Enable USART2 Control Register
 8000292:	4b20      	ldr	r3, [pc, #128]	; (8000314 <main+0x98>)
 8000294:	60fb      	str	r3, [r7, #12]
	uint32_t *USART2BRR =(uint32_t *)0x40004408;//Enable USART2 Baud Rate Register
 8000296:	4b20      	ldr	r3, [pc, #128]	; (8000318 <main+0x9c>)
 8000298:	60bb      	str	r3, [r7, #8]
	uint32_t *USART2SR =(uint32_t *)0x40004400;//Enable Status register
 800029a:	4b20      	ldr	r3, [pc, #128]	; (800031c <main+0xa0>)
 800029c:	607b      	str	r3, [r7, #4]
	uint32_t *USART2DR =(uint32_t *)0x40004404;//Enable Data Register
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <main+0xa4>)
 80002a0:	603b      	str	r3, [r7, #0]



	*portaAHB1ENR |= 0x01;//AHB1 and GPIOA Enabled
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0201 	orr.w	r2, r3, #1
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	601a      	str	r2, [r3, #0]
	*portaAPB1ENR |= 0x20000;//APB1 and USART2 Enabled
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002b6:	69bb      	ldr	r3, [r7, #24]
 80002b8:	601a      	str	r2, [r3, #0]
	*portaMODER |= 0xA0;//MODER set to Alternate function
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	601a      	str	r2, [r3, #0]
	*portaAFRL |= 0x7700;//USART2tx And USART2rx Enabled
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	601a      	str	r2, [r3, #0]
	*USART2CR1 |= 0x2000;//USART ENABLED
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]
	*USART2CR1 |= 0xc;//RE TE Enabled
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 020c 	orr.w	r2, r3, #12
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	601a      	str	r2, [r3, #0]
	*USART2BRR |= 0x683;//BAUD Rate Set to 9600
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 80002f2:	f043 0303 	orr.w	r3, r3, #3
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	6013      	str	r3, [r2, #0]
//	unsigned char dat ='B';
//	while(!(*USART2SR & 0x80));//TXE pin enabled
//	*USART2DR = (dat & 0xff);//Data transmitted Through DATA REGISTER
//	delay(200);

		printf("Hello WOrld\r\n");
 80002fa:	480a      	ldr	r0, [pc, #40]	; (8000324 <main+0xa8>)
 80002fc:	f000 f982 	bl	8000604 <puts>
	{
 8000300:	e7fb      	b.n	80002fa <main+0x7e>
 8000302:	bf00      	nop
 8000304:	40023830 	.word	0x40023830
 8000308:	40023840 	.word	0x40023840
 800030c:	40020000 	.word	0x40020000
 8000310:	40020020 	.word	0x40020020
 8000314:	4000440c 	.word	0x4000440c
 8000318:	40004408 	.word	0x40004408
 800031c:	40004400 	.word	0x40004400
 8000320:	40004404 	.word	0x40004404
 8000324:	08000f3c 	.word	0x08000f3c

08000328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	e00a      	b.n	8000350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033a:	f3af 8000 	nop.w
 800033e:	4601      	mov	r1, r0
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf0      	blt.n	800033a <_read+0x12>
  }

  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e009      	b.n	8000388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff5d 	bl	800023c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf1      	blt.n	8000374 <_write+0x12>
  }
  return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_close>:

int _close(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c2:	605a      	str	r2, [r3, #4]
  return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_isatty>:

int _isatty(int file)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003da:	2301      	movs	r3, #1
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003f4:	2300      	movs	r3, #0
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 f846 	bl	80004c4 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20020000 	.word	0x20020000
 8000464:	00000400 	.word	0x00000400
 8000468:	20000080 	.word	0x20000080
 800046c:	20000098 	.word	0x20000098

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f817 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff feeb 	bl	800027c <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004b4:	08000fb8 	.word	0x08000fb8
  ldr r2, =_sbss
 80004b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004bc:	20000094 	.word	0x20000094

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__errno>:
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <__errno+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4d0d      	ldr	r5, [pc, #52]	; (8000508 <__libc_init_array+0x38>)
 80004d4:	4c0d      	ldr	r4, [pc, #52]	; (800050c <__libc_init_array+0x3c>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	2600      	movs	r6, #0
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	4d0b      	ldr	r5, [pc, #44]	; (8000510 <__libc_init_array+0x40>)
 80004e2:	4c0c      	ldr	r4, [pc, #48]	; (8000514 <__libc_init_array+0x44>)
 80004e4:	f000 fd1e 	bl	8000f24 <_init>
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	2600      	movs	r6, #0
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000fb0 	.word	0x08000fb0
 800050c:	08000fb0 	.word	0x08000fb0
 8000510:	08000fb0 	.word	0x08000fb0
 8000514:	08000fb4 	.word	0x08000fb4

08000518 <memset>:
 8000518:	4402      	add	r2, r0
 800051a:	4603      	mov	r3, r0
 800051c:	4293      	cmp	r3, r2
 800051e:	d100      	bne.n	8000522 <memset+0xa>
 8000520:	4770      	bx	lr
 8000522:	f803 1b01 	strb.w	r1, [r3], #1
 8000526:	e7f9      	b.n	800051c <memset+0x4>

08000528 <_puts_r>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	460e      	mov	r6, r1
 800052c:	4605      	mov	r5, r0
 800052e:	b118      	cbz	r0, 8000538 <_puts_r+0x10>
 8000530:	6983      	ldr	r3, [r0, #24]
 8000532:	b90b      	cbnz	r3, 8000538 <_puts_r+0x10>
 8000534:	f000 fa48 	bl	80009c8 <__sinit>
 8000538:	69ab      	ldr	r3, [r5, #24]
 800053a:	68ac      	ldr	r4, [r5, #8]
 800053c:	b913      	cbnz	r3, 8000544 <_puts_r+0x1c>
 800053e:	4628      	mov	r0, r5
 8000540:	f000 fa42 	bl	80009c8 <__sinit>
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <_puts_r+0xd0>)
 8000546:	429c      	cmp	r4, r3
 8000548:	d120      	bne.n	800058c <_puts_r+0x64>
 800054a:	686c      	ldr	r4, [r5, #4]
 800054c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800054e:	07db      	lsls	r3, r3, #31
 8000550:	d405      	bmi.n	800055e <_puts_r+0x36>
 8000552:	89a3      	ldrh	r3, [r4, #12]
 8000554:	0598      	lsls	r0, r3, #22
 8000556:	d402      	bmi.n	800055e <_puts_r+0x36>
 8000558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800055a:	f000 fad3 	bl	8000b04 <__retarget_lock_acquire_recursive>
 800055e:	89a3      	ldrh	r3, [r4, #12]
 8000560:	0719      	lsls	r1, r3, #28
 8000562:	d51d      	bpl.n	80005a0 <_puts_r+0x78>
 8000564:	6923      	ldr	r3, [r4, #16]
 8000566:	b1db      	cbz	r3, 80005a0 <_puts_r+0x78>
 8000568:	3e01      	subs	r6, #1
 800056a:	68a3      	ldr	r3, [r4, #8]
 800056c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000570:	3b01      	subs	r3, #1
 8000572:	60a3      	str	r3, [r4, #8]
 8000574:	bb39      	cbnz	r1, 80005c6 <_puts_r+0x9e>
 8000576:	2b00      	cmp	r3, #0
 8000578:	da38      	bge.n	80005ec <_puts_r+0xc4>
 800057a:	4622      	mov	r2, r4
 800057c:	210a      	movs	r1, #10
 800057e:	4628      	mov	r0, r5
 8000580:	f000 f848 	bl	8000614 <__swbuf_r>
 8000584:	3001      	adds	r0, #1
 8000586:	d011      	beq.n	80005ac <_puts_r+0x84>
 8000588:	250a      	movs	r5, #10
 800058a:	e011      	b.n	80005b0 <_puts_r+0x88>
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <_puts_r+0xd4>)
 800058e:	429c      	cmp	r4, r3
 8000590:	d101      	bne.n	8000596 <_puts_r+0x6e>
 8000592:	68ac      	ldr	r4, [r5, #8]
 8000594:	e7da      	b.n	800054c <_puts_r+0x24>
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <_puts_r+0xd8>)
 8000598:	429c      	cmp	r4, r3
 800059a:	bf08      	it	eq
 800059c:	68ec      	ldreq	r4, [r5, #12]
 800059e:	e7d5      	b.n	800054c <_puts_r+0x24>
 80005a0:	4621      	mov	r1, r4
 80005a2:	4628      	mov	r0, r5
 80005a4:	f000 f888 	bl	80006b8 <__swsetup_r>
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d0dd      	beq.n	8000568 <_puts_r+0x40>
 80005ac:	f04f 35ff 	mov.w	r5, #4294967295
 80005b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005b2:	07da      	lsls	r2, r3, #31
 80005b4:	d405      	bmi.n	80005c2 <_puts_r+0x9a>
 80005b6:	89a3      	ldrh	r3, [r4, #12]
 80005b8:	059b      	lsls	r3, r3, #22
 80005ba:	d402      	bmi.n	80005c2 <_puts_r+0x9a>
 80005bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005be:	f000 faa2 	bl	8000b06 <__retarget_lock_release_recursive>
 80005c2:	4628      	mov	r0, r5
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	da04      	bge.n	80005d4 <_puts_r+0xac>
 80005ca:	69a2      	ldr	r2, [r4, #24]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dc06      	bgt.n	80005de <_puts_r+0xb6>
 80005d0:	290a      	cmp	r1, #10
 80005d2:	d004      	beq.n	80005de <_puts_r+0xb6>
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	6022      	str	r2, [r4, #0]
 80005da:	7019      	strb	r1, [r3, #0]
 80005dc:	e7c5      	b.n	800056a <_puts_r+0x42>
 80005de:	4622      	mov	r2, r4
 80005e0:	4628      	mov	r0, r5
 80005e2:	f000 f817 	bl	8000614 <__swbuf_r>
 80005e6:	3001      	adds	r0, #1
 80005e8:	d1bf      	bne.n	800056a <_puts_r+0x42>
 80005ea:	e7df      	b.n	80005ac <_puts_r+0x84>
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	250a      	movs	r5, #10
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	6022      	str	r2, [r4, #0]
 80005f4:	701d      	strb	r5, [r3, #0]
 80005f6:	e7db      	b.n	80005b0 <_puts_r+0x88>
 80005f8:	08000f70 	.word	0x08000f70
 80005fc:	08000f90 	.word	0x08000f90
 8000600:	08000f50 	.word	0x08000f50

08000604 <puts>:
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <puts+0xc>)
 8000606:	4601      	mov	r1, r0
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	f7ff bf8d 	b.w	8000528 <_puts_r>
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <__swbuf_r>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	460e      	mov	r6, r1
 8000618:	4614      	mov	r4, r2
 800061a:	4605      	mov	r5, r0
 800061c:	b118      	cbz	r0, 8000626 <__swbuf_r+0x12>
 800061e:	6983      	ldr	r3, [r0, #24]
 8000620:	b90b      	cbnz	r3, 8000626 <__swbuf_r+0x12>
 8000622:	f000 f9d1 	bl	80009c8 <__sinit>
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <__swbuf_r+0x98>)
 8000628:	429c      	cmp	r4, r3
 800062a:	d12b      	bne.n	8000684 <__swbuf_r+0x70>
 800062c:	686c      	ldr	r4, [r5, #4]
 800062e:	69a3      	ldr	r3, [r4, #24]
 8000630:	60a3      	str	r3, [r4, #8]
 8000632:	89a3      	ldrh	r3, [r4, #12]
 8000634:	071a      	lsls	r2, r3, #28
 8000636:	d52f      	bpl.n	8000698 <__swbuf_r+0x84>
 8000638:	6923      	ldr	r3, [r4, #16]
 800063a:	b36b      	cbz	r3, 8000698 <__swbuf_r+0x84>
 800063c:	6923      	ldr	r3, [r4, #16]
 800063e:	6820      	ldr	r0, [r4, #0]
 8000640:	1ac0      	subs	r0, r0, r3
 8000642:	6963      	ldr	r3, [r4, #20]
 8000644:	b2f6      	uxtb	r6, r6
 8000646:	4283      	cmp	r3, r0
 8000648:	4637      	mov	r7, r6
 800064a:	dc04      	bgt.n	8000656 <__swbuf_r+0x42>
 800064c:	4621      	mov	r1, r4
 800064e:	4628      	mov	r0, r5
 8000650:	f000 f926 	bl	80008a0 <_fflush_r>
 8000654:	bb30      	cbnz	r0, 80006a4 <__swbuf_r+0x90>
 8000656:	68a3      	ldr	r3, [r4, #8]
 8000658:	3b01      	subs	r3, #1
 800065a:	60a3      	str	r3, [r4, #8]
 800065c:	6823      	ldr	r3, [r4, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	6022      	str	r2, [r4, #0]
 8000662:	701e      	strb	r6, [r3, #0]
 8000664:	6963      	ldr	r3, [r4, #20]
 8000666:	3001      	adds	r0, #1
 8000668:	4283      	cmp	r3, r0
 800066a:	d004      	beq.n	8000676 <__swbuf_r+0x62>
 800066c:	89a3      	ldrh	r3, [r4, #12]
 800066e:	07db      	lsls	r3, r3, #31
 8000670:	d506      	bpl.n	8000680 <__swbuf_r+0x6c>
 8000672:	2e0a      	cmp	r6, #10
 8000674:	d104      	bne.n	8000680 <__swbuf_r+0x6c>
 8000676:	4621      	mov	r1, r4
 8000678:	4628      	mov	r0, r5
 800067a:	f000 f911 	bl	80008a0 <_fflush_r>
 800067e:	b988      	cbnz	r0, 80006a4 <__swbuf_r+0x90>
 8000680:	4638      	mov	r0, r7
 8000682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <__swbuf_r+0x9c>)
 8000686:	429c      	cmp	r4, r3
 8000688:	d101      	bne.n	800068e <__swbuf_r+0x7a>
 800068a:	68ac      	ldr	r4, [r5, #8]
 800068c:	e7cf      	b.n	800062e <__swbuf_r+0x1a>
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <__swbuf_r+0xa0>)
 8000690:	429c      	cmp	r4, r3
 8000692:	bf08      	it	eq
 8000694:	68ec      	ldreq	r4, [r5, #12]
 8000696:	e7ca      	b.n	800062e <__swbuf_r+0x1a>
 8000698:	4621      	mov	r1, r4
 800069a:	4628      	mov	r0, r5
 800069c:	f000 f80c 	bl	80006b8 <__swsetup_r>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d0cb      	beq.n	800063c <__swbuf_r+0x28>
 80006a4:	f04f 37ff 	mov.w	r7, #4294967295
 80006a8:	e7ea      	b.n	8000680 <__swbuf_r+0x6c>
 80006aa:	bf00      	nop
 80006ac:	08000f70 	.word	0x08000f70
 80006b0:	08000f90 	.word	0x08000f90
 80006b4:	08000f50 	.word	0x08000f50

080006b8 <__swsetup_r>:
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <__swsetup_r+0xcc>)
 80006ba:	b570      	push	{r4, r5, r6, lr}
 80006bc:	681d      	ldr	r5, [r3, #0]
 80006be:	4606      	mov	r6, r0
 80006c0:	460c      	mov	r4, r1
 80006c2:	b125      	cbz	r5, 80006ce <__swsetup_r+0x16>
 80006c4:	69ab      	ldr	r3, [r5, #24]
 80006c6:	b913      	cbnz	r3, 80006ce <__swsetup_r+0x16>
 80006c8:	4628      	mov	r0, r5
 80006ca:	f000 f97d 	bl	80009c8 <__sinit>
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <__swsetup_r+0xd0>)
 80006d0:	429c      	cmp	r4, r3
 80006d2:	d10f      	bne.n	80006f4 <__swsetup_r+0x3c>
 80006d4:	686c      	ldr	r4, [r5, #4]
 80006d6:	89a3      	ldrh	r3, [r4, #12]
 80006d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006dc:	0719      	lsls	r1, r3, #28
 80006de:	d42c      	bmi.n	800073a <__swsetup_r+0x82>
 80006e0:	06dd      	lsls	r5, r3, #27
 80006e2:	d411      	bmi.n	8000708 <__swsetup_r+0x50>
 80006e4:	2309      	movs	r3, #9
 80006e6:	6033      	str	r3, [r6, #0]
 80006e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80006ec:	81a3      	strh	r3, [r4, #12]
 80006ee:	f04f 30ff 	mov.w	r0, #4294967295
 80006f2:	e03e      	b.n	8000772 <__swsetup_r+0xba>
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <__swsetup_r+0xd4>)
 80006f6:	429c      	cmp	r4, r3
 80006f8:	d101      	bne.n	80006fe <__swsetup_r+0x46>
 80006fa:	68ac      	ldr	r4, [r5, #8]
 80006fc:	e7eb      	b.n	80006d6 <__swsetup_r+0x1e>
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <__swsetup_r+0xd8>)
 8000700:	429c      	cmp	r4, r3
 8000702:	bf08      	it	eq
 8000704:	68ec      	ldreq	r4, [r5, #12]
 8000706:	e7e6      	b.n	80006d6 <__swsetup_r+0x1e>
 8000708:	0758      	lsls	r0, r3, #29
 800070a:	d512      	bpl.n	8000732 <__swsetup_r+0x7a>
 800070c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800070e:	b141      	cbz	r1, 8000722 <__swsetup_r+0x6a>
 8000710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000714:	4299      	cmp	r1, r3
 8000716:	d002      	beq.n	800071e <__swsetup_r+0x66>
 8000718:	4630      	mov	r0, r6
 800071a:	f000 fa5b 	bl	8000bd4 <_free_r>
 800071e:	2300      	movs	r3, #0
 8000720:	6363      	str	r3, [r4, #52]	; 0x34
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000728:	81a3      	strh	r3, [r4, #12]
 800072a:	2300      	movs	r3, #0
 800072c:	6063      	str	r3, [r4, #4]
 800072e:	6923      	ldr	r3, [r4, #16]
 8000730:	6023      	str	r3, [r4, #0]
 8000732:	89a3      	ldrh	r3, [r4, #12]
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	81a3      	strh	r3, [r4, #12]
 800073a:	6923      	ldr	r3, [r4, #16]
 800073c:	b94b      	cbnz	r3, 8000752 <__swsetup_r+0x9a>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000748:	d003      	beq.n	8000752 <__swsetup_r+0x9a>
 800074a:	4621      	mov	r1, r4
 800074c:	4630      	mov	r0, r6
 800074e:	f000 fa01 	bl	8000b54 <__smakebuf_r>
 8000752:	89a0      	ldrh	r0, [r4, #12]
 8000754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000758:	f010 0301 	ands.w	r3, r0, #1
 800075c:	d00a      	beq.n	8000774 <__swsetup_r+0xbc>
 800075e:	2300      	movs	r3, #0
 8000760:	60a3      	str	r3, [r4, #8]
 8000762:	6963      	ldr	r3, [r4, #20]
 8000764:	425b      	negs	r3, r3
 8000766:	61a3      	str	r3, [r4, #24]
 8000768:	6923      	ldr	r3, [r4, #16]
 800076a:	b943      	cbnz	r3, 800077e <__swsetup_r+0xc6>
 800076c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000770:	d1ba      	bne.n	80006e8 <__swsetup_r+0x30>
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	0781      	lsls	r1, r0, #30
 8000776:	bf58      	it	pl
 8000778:	6963      	ldrpl	r3, [r4, #20]
 800077a:	60a3      	str	r3, [r4, #8]
 800077c:	e7f4      	b.n	8000768 <__swsetup_r+0xb0>
 800077e:	2000      	movs	r0, #0
 8000780:	e7f7      	b.n	8000772 <__swsetup_r+0xba>
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000
 8000788:	08000f70 	.word	0x08000f70
 800078c:	08000f90 	.word	0x08000f90
 8000790:	08000f50 	.word	0x08000f50

08000794 <__sflush_r>:
 8000794:	898a      	ldrh	r2, [r1, #12]
 8000796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800079a:	4605      	mov	r5, r0
 800079c:	0710      	lsls	r0, r2, #28
 800079e:	460c      	mov	r4, r1
 80007a0:	d458      	bmi.n	8000854 <__sflush_r+0xc0>
 80007a2:	684b      	ldr	r3, [r1, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dc05      	bgt.n	80007b4 <__sflush_r+0x20>
 80007a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dc02      	bgt.n	80007b4 <__sflush_r+0x20>
 80007ae:	2000      	movs	r0, #0
 80007b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d0f9      	beq.n	80007ae <__sflush_r+0x1a>
 80007ba:	2300      	movs	r3, #0
 80007bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007c0:	682f      	ldr	r7, [r5, #0]
 80007c2:	602b      	str	r3, [r5, #0]
 80007c4:	d032      	beq.n	800082c <__sflush_r+0x98>
 80007c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007c8:	89a3      	ldrh	r3, [r4, #12]
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	d505      	bpl.n	80007da <__sflush_r+0x46>
 80007ce:	6863      	ldr	r3, [r4, #4]
 80007d0:	1ac0      	subs	r0, r0, r3
 80007d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007d4:	b10b      	cbz	r3, 80007da <__sflush_r+0x46>
 80007d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d8:	1ac0      	subs	r0, r0, r3
 80007da:	2300      	movs	r3, #0
 80007dc:	4602      	mov	r2, r0
 80007de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007e0:	6a21      	ldr	r1, [r4, #32]
 80007e2:	4628      	mov	r0, r5
 80007e4:	47b0      	blx	r6
 80007e6:	1c43      	adds	r3, r0, #1
 80007e8:	89a3      	ldrh	r3, [r4, #12]
 80007ea:	d106      	bne.n	80007fa <__sflush_r+0x66>
 80007ec:	6829      	ldr	r1, [r5, #0]
 80007ee:	291d      	cmp	r1, #29
 80007f0:	d82c      	bhi.n	800084c <__sflush_r+0xb8>
 80007f2:	4a2a      	ldr	r2, [pc, #168]	; (800089c <__sflush_r+0x108>)
 80007f4:	40ca      	lsrs	r2, r1
 80007f6:	07d6      	lsls	r6, r2, #31
 80007f8:	d528      	bpl.n	800084c <__sflush_r+0xb8>
 80007fa:	2200      	movs	r2, #0
 80007fc:	6062      	str	r2, [r4, #4]
 80007fe:	04d9      	lsls	r1, r3, #19
 8000800:	6922      	ldr	r2, [r4, #16]
 8000802:	6022      	str	r2, [r4, #0]
 8000804:	d504      	bpl.n	8000810 <__sflush_r+0x7c>
 8000806:	1c42      	adds	r2, r0, #1
 8000808:	d101      	bne.n	800080e <__sflush_r+0x7a>
 800080a:	682b      	ldr	r3, [r5, #0]
 800080c:	b903      	cbnz	r3, 8000810 <__sflush_r+0x7c>
 800080e:	6560      	str	r0, [r4, #84]	; 0x54
 8000810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000812:	602f      	str	r7, [r5, #0]
 8000814:	2900      	cmp	r1, #0
 8000816:	d0ca      	beq.n	80007ae <__sflush_r+0x1a>
 8000818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800081c:	4299      	cmp	r1, r3
 800081e:	d002      	beq.n	8000826 <__sflush_r+0x92>
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f9d7 	bl	8000bd4 <_free_r>
 8000826:	2000      	movs	r0, #0
 8000828:	6360      	str	r0, [r4, #52]	; 0x34
 800082a:	e7c1      	b.n	80007b0 <__sflush_r+0x1c>
 800082c:	6a21      	ldr	r1, [r4, #32]
 800082e:	2301      	movs	r3, #1
 8000830:	4628      	mov	r0, r5
 8000832:	47b0      	blx	r6
 8000834:	1c41      	adds	r1, r0, #1
 8000836:	d1c7      	bne.n	80007c8 <__sflush_r+0x34>
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0c4      	beq.n	80007c8 <__sflush_r+0x34>
 800083e:	2b1d      	cmp	r3, #29
 8000840:	d001      	beq.n	8000846 <__sflush_r+0xb2>
 8000842:	2b16      	cmp	r3, #22
 8000844:	d101      	bne.n	800084a <__sflush_r+0xb6>
 8000846:	602f      	str	r7, [r5, #0]
 8000848:	e7b1      	b.n	80007ae <__sflush_r+0x1a>
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	81a3      	strh	r3, [r4, #12]
 8000852:	e7ad      	b.n	80007b0 <__sflush_r+0x1c>
 8000854:	690f      	ldr	r7, [r1, #16]
 8000856:	2f00      	cmp	r7, #0
 8000858:	d0a9      	beq.n	80007ae <__sflush_r+0x1a>
 800085a:	0793      	lsls	r3, r2, #30
 800085c:	680e      	ldr	r6, [r1, #0]
 800085e:	bf08      	it	eq
 8000860:	694b      	ldreq	r3, [r1, #20]
 8000862:	600f      	str	r7, [r1, #0]
 8000864:	bf18      	it	ne
 8000866:	2300      	movne	r3, #0
 8000868:	eba6 0807 	sub.w	r8, r6, r7
 800086c:	608b      	str	r3, [r1, #8]
 800086e:	f1b8 0f00 	cmp.w	r8, #0
 8000872:	dd9c      	ble.n	80007ae <__sflush_r+0x1a>
 8000874:	6a21      	ldr	r1, [r4, #32]
 8000876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000878:	4643      	mov	r3, r8
 800087a:	463a      	mov	r2, r7
 800087c:	4628      	mov	r0, r5
 800087e:	47b0      	blx	r6
 8000880:	2800      	cmp	r0, #0
 8000882:	dc06      	bgt.n	8000892 <__sflush_r+0xfe>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	81a3      	strh	r3, [r4, #12]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	e78e      	b.n	80007b0 <__sflush_r+0x1c>
 8000892:	4407      	add	r7, r0
 8000894:	eba8 0800 	sub.w	r8, r8, r0
 8000898:	e7e9      	b.n	800086e <__sflush_r+0xda>
 800089a:	bf00      	nop
 800089c:	20400001 	.word	0x20400001

080008a0 <_fflush_r>:
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	690b      	ldr	r3, [r1, #16]
 80008a4:	4605      	mov	r5, r0
 80008a6:	460c      	mov	r4, r1
 80008a8:	b913      	cbnz	r3, 80008b0 <_fflush_r+0x10>
 80008aa:	2500      	movs	r5, #0
 80008ac:	4628      	mov	r0, r5
 80008ae:	bd38      	pop	{r3, r4, r5, pc}
 80008b0:	b118      	cbz	r0, 80008ba <_fflush_r+0x1a>
 80008b2:	6983      	ldr	r3, [r0, #24]
 80008b4:	b90b      	cbnz	r3, 80008ba <_fflush_r+0x1a>
 80008b6:	f000 f887 	bl	80009c8 <__sinit>
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <_fflush_r+0x6c>)
 80008bc:	429c      	cmp	r4, r3
 80008be:	d11b      	bne.n	80008f8 <_fflush_r+0x58>
 80008c0:	686c      	ldr	r4, [r5, #4]
 80008c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0ef      	beq.n	80008aa <_fflush_r+0xa>
 80008ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80008cc:	07d0      	lsls	r0, r2, #31
 80008ce:	d404      	bmi.n	80008da <_fflush_r+0x3a>
 80008d0:	0599      	lsls	r1, r3, #22
 80008d2:	d402      	bmi.n	80008da <_fflush_r+0x3a>
 80008d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008d6:	f000 f915 	bl	8000b04 <__retarget_lock_acquire_recursive>
 80008da:	4628      	mov	r0, r5
 80008dc:	4621      	mov	r1, r4
 80008de:	f7ff ff59 	bl	8000794 <__sflush_r>
 80008e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008e4:	07da      	lsls	r2, r3, #31
 80008e6:	4605      	mov	r5, r0
 80008e8:	d4e0      	bmi.n	80008ac <_fflush_r+0xc>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	059b      	lsls	r3, r3, #22
 80008ee:	d4dd      	bmi.n	80008ac <_fflush_r+0xc>
 80008f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008f2:	f000 f908 	bl	8000b06 <__retarget_lock_release_recursive>
 80008f6:	e7d9      	b.n	80008ac <_fflush_r+0xc>
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_fflush_r+0x70>)
 80008fa:	429c      	cmp	r4, r3
 80008fc:	d101      	bne.n	8000902 <_fflush_r+0x62>
 80008fe:	68ac      	ldr	r4, [r5, #8]
 8000900:	e7df      	b.n	80008c2 <_fflush_r+0x22>
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <_fflush_r+0x74>)
 8000904:	429c      	cmp	r4, r3
 8000906:	bf08      	it	eq
 8000908:	68ec      	ldreq	r4, [r5, #12]
 800090a:	e7da      	b.n	80008c2 <_fflush_r+0x22>
 800090c:	08000f70 	.word	0x08000f70
 8000910:	08000f90 	.word	0x08000f90
 8000914:	08000f50 	.word	0x08000f50

08000918 <std>:
 8000918:	2300      	movs	r3, #0
 800091a:	b510      	push	{r4, lr}
 800091c:	4604      	mov	r4, r0
 800091e:	e9c0 3300 	strd	r3, r3, [r0]
 8000922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000926:	6083      	str	r3, [r0, #8]
 8000928:	8181      	strh	r1, [r0, #12]
 800092a:	6643      	str	r3, [r0, #100]	; 0x64
 800092c:	81c2      	strh	r2, [r0, #14]
 800092e:	6183      	str	r3, [r0, #24]
 8000930:	4619      	mov	r1, r3
 8000932:	2208      	movs	r2, #8
 8000934:	305c      	adds	r0, #92	; 0x5c
 8000936:	f7ff fdef 	bl	8000518 <memset>
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <std+0x38>)
 800093c:	6263      	str	r3, [r4, #36]	; 0x24
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <std+0x3c>)
 8000940:	62a3      	str	r3, [r4, #40]	; 0x28
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <std+0x40>)
 8000944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <std+0x44>)
 8000948:	6224      	str	r4, [r4, #32]
 800094a:	6323      	str	r3, [r4, #48]	; 0x30
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	08000db5 	.word	0x08000db5
 8000954:	08000dd7 	.word	0x08000dd7
 8000958:	08000e0f 	.word	0x08000e0f
 800095c:	08000e33 	.word	0x08000e33

08000960 <_cleanup_r>:
 8000960:	4901      	ldr	r1, [pc, #4]	; (8000968 <_cleanup_r+0x8>)
 8000962:	f000 b8af 	b.w	8000ac4 <_fwalk_reent>
 8000966:	bf00      	nop
 8000968:	080008a1 	.word	0x080008a1

0800096c <__sfmoreglue>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	2268      	movs	r2, #104	; 0x68
 8000970:	1e4d      	subs	r5, r1, #1
 8000972:	4355      	muls	r5, r2
 8000974:	460e      	mov	r6, r1
 8000976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800097a:	f000 f997 	bl	8000cac <_malloc_r>
 800097e:	4604      	mov	r4, r0
 8000980:	b140      	cbz	r0, 8000994 <__sfmoreglue+0x28>
 8000982:	2100      	movs	r1, #0
 8000984:	e9c0 1600 	strd	r1, r6, [r0]
 8000988:	300c      	adds	r0, #12
 800098a:	60a0      	str	r0, [r4, #8]
 800098c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000990:	f7ff fdc2 	bl	8000518 <memset>
 8000994:	4620      	mov	r0, r4
 8000996:	bd70      	pop	{r4, r5, r6, pc}

08000998 <__sfp_lock_acquire>:
 8000998:	4801      	ldr	r0, [pc, #4]	; (80009a0 <__sfp_lock_acquire+0x8>)
 800099a:	f000 b8b3 	b.w	8000b04 <__retarget_lock_acquire_recursive>
 800099e:	bf00      	nop
 80009a0:	20000085 	.word	0x20000085

080009a4 <__sfp_lock_release>:
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <__sfp_lock_release+0x8>)
 80009a6:	f000 b8ae 	b.w	8000b06 <__retarget_lock_release_recursive>
 80009aa:	bf00      	nop
 80009ac:	20000085 	.word	0x20000085

080009b0 <__sinit_lock_acquire>:
 80009b0:	4801      	ldr	r0, [pc, #4]	; (80009b8 <__sinit_lock_acquire+0x8>)
 80009b2:	f000 b8a7 	b.w	8000b04 <__retarget_lock_acquire_recursive>
 80009b6:	bf00      	nop
 80009b8:	20000086 	.word	0x20000086

080009bc <__sinit_lock_release>:
 80009bc:	4801      	ldr	r0, [pc, #4]	; (80009c4 <__sinit_lock_release+0x8>)
 80009be:	f000 b8a2 	b.w	8000b06 <__retarget_lock_release_recursive>
 80009c2:	bf00      	nop
 80009c4:	20000086 	.word	0x20000086

080009c8 <__sinit>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	4604      	mov	r4, r0
 80009cc:	f7ff fff0 	bl	80009b0 <__sinit_lock_acquire>
 80009d0:	69a3      	ldr	r3, [r4, #24]
 80009d2:	b11b      	cbz	r3, 80009dc <__sinit+0x14>
 80009d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009d8:	f7ff bff0 	b.w	80009bc <__sinit_lock_release>
 80009dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80009e0:	6523      	str	r3, [r4, #80]	; 0x50
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <__sinit+0x68>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <__sinit+0x6c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80009ea:	42a3      	cmp	r3, r4
 80009ec:	bf04      	itt	eq
 80009ee:	2301      	moveq	r3, #1
 80009f0:	61a3      	streq	r3, [r4, #24]
 80009f2:	4620      	mov	r0, r4
 80009f4:	f000 f820 	bl	8000a38 <__sfp>
 80009f8:	6060      	str	r0, [r4, #4]
 80009fa:	4620      	mov	r0, r4
 80009fc:	f000 f81c 	bl	8000a38 <__sfp>
 8000a00:	60a0      	str	r0, [r4, #8]
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 f818 	bl	8000a38 <__sfp>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60e0      	str	r0, [r4, #12]
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	6860      	ldr	r0, [r4, #4]
 8000a10:	f7ff ff82 	bl	8000918 <std>
 8000a14:	68a0      	ldr	r0, [r4, #8]
 8000a16:	2201      	movs	r2, #1
 8000a18:	2109      	movs	r1, #9
 8000a1a:	f7ff ff7d 	bl	8000918 <std>
 8000a1e:	68e0      	ldr	r0, [r4, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	2112      	movs	r1, #18
 8000a24:	f7ff ff78 	bl	8000918 <std>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61a3      	str	r3, [r4, #24]
 8000a2c:	e7d2      	b.n	80009d4 <__sinit+0xc>
 8000a2e:	bf00      	nop
 8000a30:	08000f4c 	.word	0x08000f4c
 8000a34:	08000961 	.word	0x08000961

08000a38 <__sfp>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	4607      	mov	r7, r0
 8000a3c:	f7ff ffac 	bl	8000998 <__sfp_lock_acquire>
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <__sfp+0x84>)
 8000a42:	681e      	ldr	r6, [r3, #0]
 8000a44:	69b3      	ldr	r3, [r6, #24]
 8000a46:	b913      	cbnz	r3, 8000a4e <__sfp+0x16>
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f7ff ffbd 	bl	80009c8 <__sinit>
 8000a4e:	3648      	adds	r6, #72	; 0x48
 8000a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	d503      	bpl.n	8000a60 <__sfp+0x28>
 8000a58:	6833      	ldr	r3, [r6, #0]
 8000a5a:	b30b      	cbz	r3, 8000aa0 <__sfp+0x68>
 8000a5c:	6836      	ldr	r6, [r6, #0]
 8000a5e:	e7f7      	b.n	8000a50 <__sfp+0x18>
 8000a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a64:	b9d5      	cbnz	r5, 8000a9c <__sfp+0x64>
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <__sfp+0x88>)
 8000a68:	60e3      	str	r3, [r4, #12]
 8000a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8000a70:	f000 f847 	bl	8000b02 <__retarget_lock_init_recursive>
 8000a74:	f7ff ff96 	bl	80009a4 <__sfp_lock_release>
 8000a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a80:	6025      	str	r5, [r4, #0]
 8000a82:	61a5      	str	r5, [r4, #24]
 8000a84:	2208      	movs	r2, #8
 8000a86:	4629      	mov	r1, r5
 8000a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a8c:	f7ff fd44 	bl	8000518 <memset>
 8000a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a98:	4620      	mov	r0, r4
 8000a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9c:	3468      	adds	r4, #104	; 0x68
 8000a9e:	e7d9      	b.n	8000a54 <__sfp+0x1c>
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	f7ff ff62 	bl	800096c <__sfmoreglue>
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	6030      	str	r0, [r6, #0]
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1d5      	bne.n	8000a5c <__sfp+0x24>
 8000ab0:	f7ff ff78 	bl	80009a4 <__sfp_lock_release>
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	e7ee      	b.n	8000a98 <__sfp+0x60>
 8000aba:	bf00      	nop
 8000abc:	08000f4c 	.word	0x08000f4c
 8000ac0:	ffff0001 	.word	0xffff0001

08000ac4 <_fwalk_reent>:
 8000ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac8:	4606      	mov	r6, r0
 8000aca:	4688      	mov	r8, r1
 8000acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8000ada:	d505      	bpl.n	8000ae8 <_fwalk_reent+0x24>
 8000adc:	6824      	ldr	r4, [r4, #0]
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d1f7      	bne.n	8000ad2 <_fwalk_reent+0xe>
 8000ae2:	4638      	mov	r0, r7
 8000ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ae8:	89ab      	ldrh	r3, [r5, #12]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d907      	bls.n	8000afe <_fwalk_reent+0x3a>
 8000aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000af2:	3301      	adds	r3, #1
 8000af4:	d003      	beq.n	8000afe <_fwalk_reent+0x3a>
 8000af6:	4629      	mov	r1, r5
 8000af8:	4630      	mov	r0, r6
 8000afa:	47c0      	blx	r8
 8000afc:	4307      	orrs	r7, r0
 8000afe:	3568      	adds	r5, #104	; 0x68
 8000b00:	e7e9      	b.n	8000ad6 <_fwalk_reent+0x12>

08000b02 <__retarget_lock_init_recursive>:
 8000b02:	4770      	bx	lr

08000b04 <__retarget_lock_acquire_recursive>:
 8000b04:	4770      	bx	lr

08000b06 <__retarget_lock_release_recursive>:
 8000b06:	4770      	bx	lr

08000b08 <__swhatbuf_r>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	460e      	mov	r6, r1
 8000b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b10:	2900      	cmp	r1, #0
 8000b12:	b096      	sub	sp, #88	; 0x58
 8000b14:	4614      	mov	r4, r2
 8000b16:	461d      	mov	r5, r3
 8000b18:	da08      	bge.n	8000b2c <__swhatbuf_r+0x24>
 8000b1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	602a      	str	r2, [r5, #0]
 8000b22:	061a      	lsls	r2, r3, #24
 8000b24:	d410      	bmi.n	8000b48 <__swhatbuf_r+0x40>
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	e00e      	b.n	8000b4a <__swhatbuf_r+0x42>
 8000b2c:	466a      	mov	r2, sp
 8000b2e:	f000 f9a7 	bl	8000e80 <_fstat_r>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	dbf1      	blt.n	8000b1a <__swhatbuf_r+0x12>
 8000b36:	9a01      	ldr	r2, [sp, #4]
 8000b38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b40:	425a      	negs	r2, r3
 8000b42:	415a      	adcs	r2, r3
 8000b44:	602a      	str	r2, [r5, #0]
 8000b46:	e7ee      	b.n	8000b26 <__swhatbuf_r+0x1e>
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	b016      	add	sp, #88	; 0x58
 8000b50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b54 <__smakebuf_r>:
 8000b54:	898b      	ldrh	r3, [r1, #12]
 8000b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b58:	079d      	lsls	r5, r3, #30
 8000b5a:	4606      	mov	r6, r0
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	d507      	bpl.n	8000b70 <__smakebuf_r+0x1c>
 8000b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b64:	6023      	str	r3, [r4, #0]
 8000b66:	6123      	str	r3, [r4, #16]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	6163      	str	r3, [r4, #20]
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	ab01      	add	r3, sp, #4
 8000b72:	466a      	mov	r2, sp
 8000b74:	f7ff ffc8 	bl	8000b08 <__swhatbuf_r>
 8000b78:	9900      	ldr	r1, [sp, #0]
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f000 f895 	bl	8000cac <_malloc_r>
 8000b82:	b948      	cbnz	r0, 8000b98 <__smakebuf_r+0x44>
 8000b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b88:	059a      	lsls	r2, r3, #22
 8000b8a:	d4ef      	bmi.n	8000b6c <__smakebuf_r+0x18>
 8000b8c:	f023 0303 	bic.w	r3, r3, #3
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	e7e3      	b.n	8000b60 <__smakebuf_r+0xc>
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <__smakebuf_r+0x7c>)
 8000b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	6020      	str	r0, [r4, #0]
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	81a3      	strh	r3, [r4, #12]
 8000ba6:	9b00      	ldr	r3, [sp, #0]
 8000ba8:	6163      	str	r3, [r4, #20]
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	6120      	str	r0, [r4, #16]
 8000bae:	b15b      	cbz	r3, 8000bc8 <__smakebuf_r+0x74>
 8000bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f000 f975 	bl	8000ea4 <_isatty_r>
 8000bba:	b128      	cbz	r0, 8000bc8 <__smakebuf_r+0x74>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f023 0303 	bic.w	r3, r3, #3
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	81a3      	strh	r3, [r4, #12]
 8000bc8:	89a0      	ldrh	r0, [r4, #12]
 8000bca:	4305      	orrs	r5, r0
 8000bcc:	81a5      	strh	r5, [r4, #12]
 8000bce:	e7cd      	b.n	8000b6c <__smakebuf_r+0x18>
 8000bd0:	08000961 	.word	0x08000961

08000bd4 <_free_r>:
 8000bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d044      	beq.n	8000c64 <_free_r+0x90>
 8000bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bde:	9001      	str	r0, [sp, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f1a1 0404 	sub.w	r4, r1, #4
 8000be6:	bfb8      	it	lt
 8000be8:	18e4      	addlt	r4, r4, r3
 8000bea:	f000 f97d 	bl	8000ee8 <__malloc_lock>
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <_free_r+0x94>)
 8000bf0:	9801      	ldr	r0, [sp, #4]
 8000bf2:	6813      	ldr	r3, [r2, #0]
 8000bf4:	b933      	cbnz	r3, 8000c04 <_free_r+0x30>
 8000bf6:	6063      	str	r3, [r4, #4]
 8000bf8:	6014      	str	r4, [r2, #0]
 8000bfa:	b003      	add	sp, #12
 8000bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c00:	f000 b978 	b.w	8000ef4 <__malloc_unlock>
 8000c04:	42a3      	cmp	r3, r4
 8000c06:	d908      	bls.n	8000c1a <_free_r+0x46>
 8000c08:	6825      	ldr	r5, [r4, #0]
 8000c0a:	1961      	adds	r1, r4, r5
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	bf01      	itttt	eq
 8000c10:	6819      	ldreq	r1, [r3, #0]
 8000c12:	685b      	ldreq	r3, [r3, #4]
 8000c14:	1949      	addeq	r1, r1, r5
 8000c16:	6021      	streq	r1, [r4, #0]
 8000c18:	e7ed      	b.n	8000bf6 <_free_r+0x22>
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	b10b      	cbz	r3, 8000c24 <_free_r+0x50>
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	d9fa      	bls.n	8000c1a <_free_r+0x46>
 8000c24:	6811      	ldr	r1, [r2, #0]
 8000c26:	1855      	adds	r5, r2, r1
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	d10b      	bne.n	8000c44 <_free_r+0x70>
 8000c2c:	6824      	ldr	r4, [r4, #0]
 8000c2e:	4421      	add	r1, r4
 8000c30:	1854      	adds	r4, r2, r1
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	6011      	str	r1, [r2, #0]
 8000c36:	d1e0      	bne.n	8000bfa <_free_r+0x26>
 8000c38:	681c      	ldr	r4, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	6053      	str	r3, [r2, #4]
 8000c3e:	4421      	add	r1, r4
 8000c40:	6011      	str	r1, [r2, #0]
 8000c42:	e7da      	b.n	8000bfa <_free_r+0x26>
 8000c44:	d902      	bls.n	8000c4c <_free_r+0x78>
 8000c46:	230c      	movs	r3, #12
 8000c48:	6003      	str	r3, [r0, #0]
 8000c4a:	e7d6      	b.n	8000bfa <_free_r+0x26>
 8000c4c:	6825      	ldr	r5, [r4, #0]
 8000c4e:	1961      	adds	r1, r4, r5
 8000c50:	428b      	cmp	r3, r1
 8000c52:	bf04      	itt	eq
 8000c54:	6819      	ldreq	r1, [r3, #0]
 8000c56:	685b      	ldreq	r3, [r3, #4]
 8000c58:	6063      	str	r3, [r4, #4]
 8000c5a:	bf04      	itt	eq
 8000c5c:	1949      	addeq	r1, r1, r5
 8000c5e:	6021      	streq	r1, [r4, #0]
 8000c60:	6054      	str	r4, [r2, #4]
 8000c62:	e7ca      	b.n	8000bfa <_free_r+0x26>
 8000c64:	b003      	add	sp, #12
 8000c66:	bd30      	pop	{r4, r5, pc}
 8000c68:	20000088 	.word	0x20000088

08000c6c <sbrk_aligned>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	4e0e      	ldr	r6, [pc, #56]	; (8000ca8 <sbrk_aligned+0x3c>)
 8000c70:	460c      	mov	r4, r1
 8000c72:	6831      	ldr	r1, [r6, #0]
 8000c74:	4605      	mov	r5, r0
 8000c76:	b911      	cbnz	r1, 8000c7e <sbrk_aligned+0x12>
 8000c78:	f000 f88c 	bl	8000d94 <_sbrk_r>
 8000c7c:	6030      	str	r0, [r6, #0]
 8000c7e:	4621      	mov	r1, r4
 8000c80:	4628      	mov	r0, r5
 8000c82:	f000 f887 	bl	8000d94 <_sbrk_r>
 8000c86:	1c43      	adds	r3, r0, #1
 8000c88:	d00a      	beq.n	8000ca0 <sbrk_aligned+0x34>
 8000c8a:	1cc4      	adds	r4, r0, #3
 8000c8c:	f024 0403 	bic.w	r4, r4, #3
 8000c90:	42a0      	cmp	r0, r4
 8000c92:	d007      	beq.n	8000ca4 <sbrk_aligned+0x38>
 8000c94:	1a21      	subs	r1, r4, r0
 8000c96:	4628      	mov	r0, r5
 8000c98:	f000 f87c 	bl	8000d94 <_sbrk_r>
 8000c9c:	3001      	adds	r0, #1
 8000c9e:	d101      	bne.n	8000ca4 <sbrk_aligned+0x38>
 8000ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	2000008c 	.word	0x2000008c

08000cac <_malloc_r>:
 8000cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb0:	1ccd      	adds	r5, r1, #3
 8000cb2:	f025 0503 	bic.w	r5, r5, #3
 8000cb6:	3508      	adds	r5, #8
 8000cb8:	2d0c      	cmp	r5, #12
 8000cba:	bf38      	it	cc
 8000cbc:	250c      	movcc	r5, #12
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	db01      	blt.n	8000cc8 <_malloc_r+0x1c>
 8000cc4:	42a9      	cmp	r1, r5
 8000cc6:	d905      	bls.n	8000cd4 <_malloc_r+0x28>
 8000cc8:	230c      	movs	r3, #12
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	2600      	movs	r6, #0
 8000cce:	4630      	mov	r0, r6
 8000cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd4:	4e2e      	ldr	r6, [pc, #184]	; (8000d90 <_malloc_r+0xe4>)
 8000cd6:	f000 f907 	bl	8000ee8 <__malloc_lock>
 8000cda:	6833      	ldr	r3, [r6, #0]
 8000cdc:	461c      	mov	r4, r3
 8000cde:	bb34      	cbnz	r4, 8000d2e <_malloc_r+0x82>
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f7ff ffc2 	bl	8000c6c <sbrk_aligned>
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	4604      	mov	r4, r0
 8000cec:	d14d      	bne.n	8000d8a <_malloc_r+0xde>
 8000cee:	6834      	ldr	r4, [r6, #0]
 8000cf0:	4626      	mov	r6, r4
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d140      	bne.n	8000d78 <_malloc_r+0xcc>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	eb04 0803 	add.w	r8, r4, r3
 8000d00:	f000 f848 	bl	8000d94 <_sbrk_r>
 8000d04:	4580      	cmp	r8, r0
 8000d06:	d13a      	bne.n	8000d7e <_malloc_r+0xd2>
 8000d08:	6821      	ldr	r1, [r4, #0]
 8000d0a:	3503      	adds	r5, #3
 8000d0c:	1a6d      	subs	r5, r5, r1
 8000d0e:	f025 0503 	bic.w	r5, r5, #3
 8000d12:	3508      	adds	r5, #8
 8000d14:	2d0c      	cmp	r5, #12
 8000d16:	bf38      	it	cc
 8000d18:	250c      	movcc	r5, #12
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4638      	mov	r0, r7
 8000d1e:	f7ff ffa5 	bl	8000c6c <sbrk_aligned>
 8000d22:	3001      	adds	r0, #1
 8000d24:	d02b      	beq.n	8000d7e <_malloc_r+0xd2>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	442b      	add	r3, r5
 8000d2a:	6023      	str	r3, [r4, #0]
 8000d2c:	e00e      	b.n	8000d4c <_malloc_r+0xa0>
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	1b52      	subs	r2, r2, r5
 8000d32:	d41e      	bmi.n	8000d72 <_malloc_r+0xc6>
 8000d34:	2a0b      	cmp	r2, #11
 8000d36:	d916      	bls.n	8000d66 <_malloc_r+0xba>
 8000d38:	1961      	adds	r1, r4, r5
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	6025      	str	r5, [r4, #0]
 8000d3e:	bf18      	it	ne
 8000d40:	6059      	strne	r1, [r3, #4]
 8000d42:	6863      	ldr	r3, [r4, #4]
 8000d44:	bf08      	it	eq
 8000d46:	6031      	streq	r1, [r6, #0]
 8000d48:	5162      	str	r2, [r4, r5]
 8000d4a:	604b      	str	r3, [r1, #4]
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	f104 060b 	add.w	r6, r4, #11
 8000d52:	f000 f8cf 	bl	8000ef4 <__malloc_unlock>
 8000d56:	f026 0607 	bic.w	r6, r6, #7
 8000d5a:	1d23      	adds	r3, r4, #4
 8000d5c:	1af2      	subs	r2, r6, r3
 8000d5e:	d0b6      	beq.n	8000cce <_malloc_r+0x22>
 8000d60:	1b9b      	subs	r3, r3, r6
 8000d62:	50a3      	str	r3, [r4, r2]
 8000d64:	e7b3      	b.n	8000cce <_malloc_r+0x22>
 8000d66:	6862      	ldr	r2, [r4, #4]
 8000d68:	42a3      	cmp	r3, r4
 8000d6a:	bf0c      	ite	eq
 8000d6c:	6032      	streq	r2, [r6, #0]
 8000d6e:	605a      	strne	r2, [r3, #4]
 8000d70:	e7ec      	b.n	8000d4c <_malloc_r+0xa0>
 8000d72:	4623      	mov	r3, r4
 8000d74:	6864      	ldr	r4, [r4, #4]
 8000d76:	e7b2      	b.n	8000cde <_malloc_r+0x32>
 8000d78:	4634      	mov	r4, r6
 8000d7a:	6876      	ldr	r6, [r6, #4]
 8000d7c:	e7b9      	b.n	8000cf2 <_malloc_r+0x46>
 8000d7e:	230c      	movs	r3, #12
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4638      	mov	r0, r7
 8000d84:	f000 f8b6 	bl	8000ef4 <__malloc_unlock>
 8000d88:	e7a1      	b.n	8000cce <_malloc_r+0x22>
 8000d8a:	6025      	str	r5, [r4, #0]
 8000d8c:	e7de      	b.n	8000d4c <_malloc_r+0xa0>
 8000d8e:	bf00      	nop
 8000d90:	20000088 	.word	0x20000088

08000d94 <_sbrk_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	4d06      	ldr	r5, [pc, #24]	; (8000db0 <_sbrk_r+0x1c>)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	602b      	str	r3, [r5, #0]
 8000da0:	f7ff fb30 	bl	8000404 <_sbrk>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_sbrk_r+0x1a>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_sbrk_r+0x1a>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000090 	.word	0x20000090

08000db4 <__sread>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	460c      	mov	r4, r1
 8000db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dbc:	f000 f8a0 	bl	8000f00 <_read_r>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	bfab      	itete	ge
 8000dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8000dc8:	181b      	addge	r3, r3, r0
 8000dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dce:	bfac      	ite	ge
 8000dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dd2:	81a3      	strhlt	r3, [r4, #12]
 8000dd4:	bd10      	pop	{r4, pc}

08000dd6 <__swrite>:
 8000dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dda:	461f      	mov	r7, r3
 8000ddc:	898b      	ldrh	r3, [r1, #12]
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	4605      	mov	r5, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4616      	mov	r6, r2
 8000de6:	d505      	bpl.n	8000df4 <__swrite+0x1e>
 8000de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dec:	2302      	movs	r3, #2
 8000dee:	2200      	movs	r2, #0
 8000df0:	f000 f868 	bl	8000ec4 <_lseek_r>
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dfe:	81a3      	strh	r3, [r4, #12]
 8000e00:	4632      	mov	r2, r6
 8000e02:	463b      	mov	r3, r7
 8000e04:	4628      	mov	r0, r5
 8000e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0a:	f000 b817 	b.w	8000e3c <_write_r>

08000e0e <__sseek>:
 8000e0e:	b510      	push	{r4, lr}
 8000e10:	460c      	mov	r4, r1
 8000e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e16:	f000 f855 	bl	8000ec4 <_lseek_r>
 8000e1a:	1c43      	adds	r3, r0, #1
 8000e1c:	89a3      	ldrh	r3, [r4, #12]
 8000e1e:	bf15      	itete	ne
 8000e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e2a:	81a3      	strheq	r3, [r4, #12]
 8000e2c:	bf18      	it	ne
 8000e2e:	81a3      	strhne	r3, [r4, #12]
 8000e30:	bd10      	pop	{r4, pc}

08000e32 <__sclose>:
 8000e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e36:	f000 b813 	b.w	8000e60 <_close_r>
	...

08000e3c <_write_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	4d07      	ldr	r5, [pc, #28]	; (8000e5c <_write_r+0x20>)
 8000e40:	4604      	mov	r4, r0
 8000e42:	4608      	mov	r0, r1
 8000e44:	4611      	mov	r1, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	602a      	str	r2, [r5, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f7ff fa89 	bl	8000362 <_write>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_write_r+0x1e>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_write_r+0x1e>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	20000090 	.word	0x20000090

08000e60 <_close_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4d06      	ldr	r5, [pc, #24]	; (8000e7c <_close_r+0x1c>)
 8000e64:	2300      	movs	r3, #0
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	602b      	str	r3, [r5, #0]
 8000e6c:	f7ff fa95 	bl	800039a <_close>
 8000e70:	1c43      	adds	r3, r0, #1
 8000e72:	d102      	bne.n	8000e7a <_close_r+0x1a>
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b103      	cbz	r3, 8000e7a <_close_r+0x1a>
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	20000090 	.word	0x20000090

08000e80 <_fstat_r>:
 8000e80:	b538      	push	{r3, r4, r5, lr}
 8000e82:	4d07      	ldr	r5, [pc, #28]	; (8000ea0 <_fstat_r+0x20>)
 8000e84:	2300      	movs	r3, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	f7ff fa90 	bl	80003b2 <_fstat>
 8000e92:	1c43      	adds	r3, r0, #1
 8000e94:	d102      	bne.n	8000e9c <_fstat_r+0x1c>
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	b103      	cbz	r3, 8000e9c <_fstat_r+0x1c>
 8000e9a:	6023      	str	r3, [r4, #0]
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000090 	.word	0x20000090

08000ea4 <_isatty_r>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4d06      	ldr	r5, [pc, #24]	; (8000ec0 <_isatty_r+0x1c>)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	602b      	str	r3, [r5, #0]
 8000eb0:	f7ff fa8f 	bl	80003d2 <_isatty>
 8000eb4:	1c43      	adds	r3, r0, #1
 8000eb6:	d102      	bne.n	8000ebe <_isatty_r+0x1a>
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	b103      	cbz	r3, 8000ebe <_isatty_r+0x1a>
 8000ebc:	6023      	str	r3, [r4, #0]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
 8000ec0:	20000090 	.word	0x20000090

08000ec4 <_lseek_r>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	4d07      	ldr	r5, [pc, #28]	; (8000ee4 <_lseek_r+0x20>)
 8000ec8:	4604      	mov	r4, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	602a      	str	r2, [r5, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f7ff fa88 	bl	80003e8 <_lseek>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	d102      	bne.n	8000ee2 <_lseek_r+0x1e>
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	b103      	cbz	r3, 8000ee2 <_lseek_r+0x1e>
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
 8000ee4:	20000090 	.word	0x20000090

08000ee8 <__malloc_lock>:
 8000ee8:	4801      	ldr	r0, [pc, #4]	; (8000ef0 <__malloc_lock+0x8>)
 8000eea:	f7ff be0b 	b.w	8000b04 <__retarget_lock_acquire_recursive>
 8000eee:	bf00      	nop
 8000ef0:	20000084 	.word	0x20000084

08000ef4 <__malloc_unlock>:
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <__malloc_unlock+0x8>)
 8000ef6:	f7ff be06 	b.w	8000b06 <__retarget_lock_release_recursive>
 8000efa:	bf00      	nop
 8000efc:	20000084 	.word	0x20000084

08000f00 <_read_r>:
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4d07      	ldr	r5, [pc, #28]	; (8000f20 <_read_r+0x20>)
 8000f04:	4604      	mov	r4, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	602a      	str	r2, [r5, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f7ff fa0a 	bl	8000328 <_read>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d102      	bne.n	8000f1e <_read_r+0x1e>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	b103      	cbz	r3, 8000f1e <_read_r+0x1e>
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	20000090 	.word	0x20000090

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
